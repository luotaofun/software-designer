1
00:00:00,000 --> 00:00:02,820
接下来我们简单来看一

2
00:00:02,820 --> 00:00:05,760
编译它的一个呢，基本过程

3
00:00:05,760 --> 00:00:09,000
那针对编译程序来说的话

4
00:00:09,000 --> 00:00:10,740
它的大致过程啊

5
00:00:10,740 --> 00:00:13,100
是书输入源程序

6
00:00:13,100 --> 00:00:16,990
然后呢，最终会输出目标程序

7
00:00:16,990 --> 00:00:20,310
我们的编译整个过程当中

8
00:00:20,310 --> 00:00:21,830
它的这个工作呀

9
00:00:21,830 --> 00:00:24,730
就是呢，哎，输入我们编程的代码

10
00:00:24,730 --> 00:00:29,990
然后呢，输出能够让计算机识别的这种呢

11
00:00:29,990 --> 00:00:30,950
目标代码

12
00:00:30,950 --> 00:00:33,750
或者叫做呢机器代码是它的目标

13
00:00:33,750 --> 00:00:36,740
那整个编译的过程啊

14
00:00:36,740 --> 00:00:40,440
是针对我们的原程序，诶

15
00:00:40,440 --> 00:00:42,820
一段程序他要做什么呢

16
00:00:42,820 --> 00:00:45,100
我们首先要检查一下

17
00:00:45,100 --> 00:00:47,600
它里面组成的这些单词

18
00:00:47,600 --> 00:00:48,730
有没有问题

19
00:00:48,730 --> 00:00:53,580
所以首先他去检查的是词法分析

20
00:00:53,580 --> 00:00:56,970
那词法分析会用到正规

21
00:00:56,970 --> 00:01:01,300
以及呢，有限制有限自动机来进行验证

22
00:01:01,300 --> 00:01:03,440
词法分析之后啊

23
00:01:03,440 --> 00:01:06,390
我们要看一看，唉，这个句子

24
00:01:06,390 --> 00:01:10,040
把单词，单词拼接起来之后

25
00:01:10,040 --> 00:01:13,320
有没有一些呢，语法问题

26
00:01:13,320 --> 00:01:16,250
那就会呢，进行语法分析

27
00:01:16,250 --> 00:01:19,450
根据我们相应的程序设计语言

28
00:01:19,450 --> 00:01:22,850
它自己的语法规则来判断一下呢

29
00:01:22,850 --> 00:01:24,410
有没有这样的，诶

30
00:01:24,410 --> 00:01:26,170
语法问题的存在

31
00:01:26,170 --> 00:01:28,780
那语法问题呢，诶

32
00:01:28,780 --> 00:01:29,900
分析完之后

33
00:01:29,900 --> 00:01:33,380
接下来就看一看我们这一个句子

34
00:01:33,380 --> 00:01:35,180
既然单词没问题

35
00:01:35,180 --> 00:01:36,330
语法没问题

36
00:01:36,330 --> 00:01:38,110
那他到底做了什么呢

37
00:01:38,110 --> 00:01:42,090
所以接下来看到的就是对语义的分析

38
00:01:42,090 --> 00:01:45,910
他会呢，做一些语义的检查

39
00:01:45,910 --> 00:01:51,490
那这三个阶段是我们编译程序以及解释程序

40
00:01:51,490 --> 00:01:53,950
都会经历的三个阶段

41
00:01:54,110 --> 00:01:57,510
编译器除了这三个阶段以外

42
00:01:57,510 --> 00:02:00,950
诶，它还可以生成中间代码

43
00:02:00,950 --> 00:02:03,320
然后呢，进行代码优化

44
00:02:03,320 --> 00:02:04,660
但是要注意

45
00:02:04,660 --> 00:02:10,539
这两个阶段在编译程序当中是可有可无

46
00:02:10,539 --> 00:02:12,720
并不是必须存在的

47
00:02:12,720 --> 00:02:16,880
而中间代码它常见的表达形式呢

48
00:02:16,880 --> 00:02:19,680
诶，有语法数、后缀表达式

49
00:02:19,680 --> 00:02:21,600
以及呢，三地址码

50
00:02:21,600 --> 00:02:25,240
或者叫做呢，四元式啊

51
00:02:25,240 --> 00:02:28,640
三地址码和四元式是一个含义

52
00:02:28,640 --> 00:02:30,680
它只是呢，给了三个地址

53
00:02:30,680 --> 00:02:32,120
表示的是四个元组

54
00:02:32,120 --> 00:02:35,730
这样的一四个元素的组成形式

55
00:02:35,730 --> 00:02:37,740
那我们在这里呢

56
00:02:37,740 --> 00:02:39,600
一般代码优化

57
00:02:39,600 --> 00:02:43,430
是在中间代码的基础上来进行优化的

58
00:02:43,430 --> 00:02:46,600
那最后呢，会生成目标代码

59
00:02:46,600 --> 00:02:48,680
这个目标代码呀

60
00:02:48,680 --> 00:02:51,460
是会考考虑硬

61
00:02:51,460 --> 00:02:53,840
它的一个呢，具体存在的

62
00:02:53,840 --> 00:02:55,900
那这是整个呢，诶

63
00:02:55,900 --> 00:02:58,220
编译它的一个过程

64
00:02:58,220 --> 00:03:00,060
那我们在这里啊

65
00:03:00,060 --> 00:03:03,290
编译器从初始到最后

66
00:03:03,290 --> 00:03:06,940
还有两个部分呢，是贯穿始终的

67
00:03:06,940 --> 00:03:10,210
那它包括呢，对出错的处理

68
00:03:10,210 --> 00:03:13,230
以及呢，符号表的管理

69
00:03:13,230 --> 00:03:14,730
出错处理啊

70
00:03:14,730 --> 00:03:16,910
它针对的是整个程序

71
00:03:16,910 --> 00:03:19,060
从词法分析有没有错误

72
00:03:19,060 --> 00:03:22,820
语法分析有没有错误、语义分析有没有错误

73
00:03:22,820 --> 00:03:25,640
包括最终执行是否有报错

74
00:03:25,640 --> 00:03:27,860
这样的一些呢，管理过程

75
00:03:27,860 --> 00:03:29,560
而符号表的话

76
00:03:29,560 --> 00:03:32,770
它会将我们的程序进行了拆分

77
00:03:32,770 --> 00:03:37,480
然后呢，唉，从细小的符号来进行识别

78
00:03:37,480 --> 00:03:38,800
以及呢，诶

79
00:03:38,800 --> 00:03:40,400
执行的过程

80
00:03:40,400 --> 00:03:43,300
接下来我们详细来看一下

81
00:03:43,300 --> 00:03:44,880
编译器的各个过程

82
00:03:44,880 --> 00:03:46,910
首先，词法分

83
00:03:46,910 --> 00:03:50,550
输入源程序之后会从左到右啊

84
00:03:50,550 --> 00:03:53,550
逐个的扫描我们程序的字符

85
00:03:53,550 --> 00:03:55,950
然后呢，识别其中

86
00:03:55,950 --> 00:03:57,790
诶，哪些呢是关键字

87
00:03:57,790 --> 00:03:58,970
也叫做保留字

88
00:03:58,970 --> 00:04:00,430
哪些是标识符

89
00:04:00,430 --> 00:04:03,070
常数运算符以及分隔符等等

90
00:04:03,070 --> 00:04:05,450
那我们下面给了一个例子

91
00:04:05,450 --> 00:04:09,800
简单的针对这个语句啊进行词法分析的话

92
00:04:09,800 --> 00:04:13,780
会把各个部分都给它呢，识别出来

93
00:04:13,780 --> 00:04:16,640
看看呢，这些部分具体呢

94
00:04:16,640 --> 00:04:18,690
是什么样的一些东西

95
00:04:18,690 --> 00:04:21,890
那在这里我们一般词法分析啊

96
00:04:21,890 --> 00:04:24,590
会用到自动机来进行识别

97
00:04:24,590 --> 00:04:28,300
在词法分析它的输入呢

98
00:04:28,300 --> 00:04:30,530
是我们的源程序

99
00:04:30,530 --> 00:04:34,530
输出呢，唉，是涉及到的记号流

100
00:04:34,530 --> 00:04:36,650
简单的了解一下

101
00:04:36,650 --> 00:04:39,560
这是词法分析它的一个过程

102
00:04:39,560 --> 00:04:42,300
那在词法分析过程当中

103
00:04:42,300 --> 00:04:45,380
如果发现比如说关键字写错

104
00:04:45,380 --> 00:04:46,580
这种情况呢

105
00:04:46,580 --> 00:04:48,940
就是属于典型的这种，诶

106
00:04:48,940 --> 00:04:49,900
词法错误

107
00:04:49,900 --> 00:04:53,370
我们也可以呢，把它归到语法错误当中来

108
00:04:53,370 --> 00:04:57,310
那这是关于呢，词法分析的过程

109
00:04:57,310 --> 00:04:59,330
词法分析之后啊

110
00:04:59,330 --> 00:05:01,490
会进行语法分析

111
00:05:01,490 --> 00:05:06,170
语法分析呢，会将我们刚刚的字符流输入

112
00:05:06,170 --> 00:05:09,520
然后呢，如果没有语法问题

113
00:05:09,520 --> 00:05:11,760
它会呢生成语法书

114
00:05:11,760 --> 00:05:14,740
那它会啊，根据语法规

115
00:05:14,740 --> 00:05:16,520
将单词符号呢

116
00:05:16,520 --> 00:05:18,240
分解成语法单位

117
00:05:18,240 --> 00:05:20,960
分析呢，上面有没有语法错误

118
00:05:20,960 --> 00:05:23,600
那常见的语法错误呢

119
00:05:23,600 --> 00:05:25,860
诶，常见词法错误比较简单

120
00:05:25,860 --> 00:05:27,200
单词写错了嘛

121
00:05:27,200 --> 00:05:30,040
那常常见的语法错误的话

122
00:05:30,040 --> 00:05:32,500
它包括我们结构出错

123
00:05:32,500 --> 00:05:36,340
还有呢， if and if 这样的不匹配的问题

124
00:05:36,340 --> 00:05:38,830
包括呢，像缺少括号啊

125
00:05:38,830 --> 00:05:40,150
缺少分号啊

126
00:05:40,150 --> 00:05:42,820
以及呢，表达式、缺少标识符

127
00:05:42,820 --> 00:05:44,280
都是属于呢

128
00:05:44,280 --> 00:05:46,580
语法错误的类型

129
00:05:46,950 --> 00:05:50,330
我们在进行语法分析的时候呢

130
00:05:50,330 --> 00:05:51,970
有两种方法

131
00:05:51,970 --> 00:05:54,170
可以呢，自顶向下

132
00:05:54,170 --> 00:05:55,410
也可以呢

133
00:05:55,410 --> 00:05:57,070
唉，自底向上

134
00:05:57,070 --> 00:06:01,170
自底向上呢，也叫做一进规约分析法

135
00:06:01,170 --> 00:06:02,390
那这里呢

136
00:06:02,390 --> 00:06:05,950
简单了解一下语法分析它的一个过程

137
00:06:05,950 --> 00:06:09,150
语法分析之后呢，是语义分析

138
00:06:09,150 --> 00:06:14,100
语义分析呢，它会对类型来进行分析和检查

139
00:06:14,100 --> 00:06:19,000
那我们在编译的过程当中进行的语义分析

140
00:06:19,000 --> 00:06:22,020
叫做呢，静态语义分析

141
00:06:22,020 --> 00:06:23,770
执行过程当中啊

142
00:06:23,770 --> 00:06:27,620
可能还会出现动态的语义错误

143
00:06:27,620 --> 00:06:31,180
那这里静态和动态区别就在于呢

144
00:06:31,180 --> 00:06:33,160
诶，他是执行过程当中呢

145
00:06:33,160 --> 00:06:34,840
还是呢，我们这个

146
00:06:34,840 --> 00:06:38,190
呃，编译过程当中来进行分析的

147
00:06:38,190 --> 00:06:40,990
那典型的静态语义错误

148
00:06:40,990 --> 00:06:45,350
主要呢，是运算符和运算类型不匹配

149
00:06:45,350 --> 00:06:48,810
比如说呢，我们对浮点数进行自增自减

150
00:06:48,810 --> 00:06:52,780
诶，对浮点数进行取余都会呢，报错

151
00:06:52,780 --> 00:06:56,960
那我们在进行语义分析的时候啊

152
00:06:56,960 --> 00:07:01,510
它会呢，诶，也会利用到符号表这样的一个东西

153
00:07:01,510 --> 00:07:03,200
那语义分析

154
00:07:03,200 --> 00:07:05,060
诶，它的这个错误呢

155
00:07:05,060 --> 00:07:06,840
大家要注意区分

156
00:07:06,840 --> 00:07:08,890
在考试当中啊

157
00:07:08,890 --> 00:07:12,860
经常会给大家一些呢，描述问大家呢

158
00:07:12,860 --> 00:07:15,320
诶，哪一个是静态语义错误

159
00:07:15,320 --> 00:07:17,120
或者呢，动态语义错误

160
00:07:17,120 --> 00:07:19,740
哪一些是词法错误等等

161
00:07:19,740 --> 00:07:24,150
那我们说动态错误和静态错误

162
00:07:24,410 --> 00:07:26,810
它的区别在于呢

163
00:07:26,810 --> 00:07:29,790
执行的时候才能发现，诶

164
00:07:29,790 --> 00:07:32,270
发生在程序运行的时候

165
00:07:32,270 --> 00:07:33,880
静态错误呢

166
00:07:33,880 --> 00:07:37,160
它是在编译的过程当中发现的

167
00:07:37,160 --> 00:07:40,570
诶，编译时所发现的程序错误

168
00:07:40,570 --> 00:07:44,040
那我们的静态错误包括呢

169
00:07:44,040 --> 00:07:47,220
诶，语法错误和静态语义错误

170
00:07:47,220 --> 00:07:49,420
那语法错误还包括呢

171
00:07:49,420 --> 00:07:51,260
像单词拼写这一类

172
00:07:51,260 --> 00:07:52,980
我们也可以把它归到

173
00:07:52,980 --> 00:07:54,750
呃，词法错误当中去

174
00:07:54,750 --> 00:07:56,370
我们一般说词法分析

175
00:07:56,370 --> 00:08:00,260
但是最终呢，针对它的错误分类来看的话

176
00:08:00,260 --> 00:08:02,790
大家都作为呢，语法错误来看呢

177
00:08:02,790 --> 00:08:07,510
包括单词拼写的错误、标点符号错误、缺少操作数

178
00:08:07,510 --> 00:08:09,390
括号不匹配等等

179
00:08:09,390 --> 00:08:11,880
那这样的一些结构上的错误

180
00:08:11,880 --> 00:08:14,400
静态语义分析的错误呢

181
00:08:14,400 --> 00:08:18,530
主要包括运算符与运算对象不匹配

182
00:08:18,530 --> 00:08:22,440
那还有一些典型的像零除数

183
00:08:22,440 --> 00:08:24,340
它其实是比较特殊的

184
00:08:24,340 --> 00:08:28,290
因为如果是1÷0

185
00:08:28,290 --> 00:08:31,830
那我们在静态分析的时候就会报错吧

186
00:08:31,830 --> 00:08:33,419
因为这是零除数

187
00:08:33,419 --> 00:08:35,980
而如果 A 等于零

188
00:08:35,980 --> 00:08:37,919
A 1除以 A 的话

189
00:08:37,919 --> 00:08:42,870
这种时候它只有在动态执行过程当中

190
00:08:42,870 --> 00:08:46,460
才能发现变量取零做除数

191
00:08:46,460 --> 00:08:49,900
这是典型的动态语义错误

192
00:08:49,900 --> 00:08:54,170
那动态语义错误主要是呢，唉，陷入死循环

193
00:08:54,170 --> 00:08:57,980
然后我们刚刚说的零除数是变量的情况

194
00:08:57,980 --> 00:09:02,090
以及呢，引用数组元素下标越界

195
00:09:02,090 --> 00:09:05,550
那这是呢，针对整个编译过程当

196
00:09:05,550 --> 00:09:07,090
可能出现的错误

197
00:09:07,090 --> 00:09:09,040
它的一个呢，管理

198
00:09:09,040 --> 00:09:10,970
针对这一部分啊

199
00:09:10,970 --> 00:09:14,760
我们主要呢，需要大家掌握的就是编译程序

200
00:09:14,760 --> 00:09:17,140
它的基本过程以及呢

201
00:09:17,140 --> 00:09:18,700
各阶段的排序

202
00:09:18,700 --> 00:09:21,830
那这中间有两个阶段比较特殊

203
00:09:21,830 --> 00:09:24,080
它是呢，可有可无的

204
00:09:24,080 --> 00:09:25,130
其次呢

205
00:09:25,130 --> 00:09:29,250
唉，我们在整个过程当中涉及到的错误管理

206
00:09:29,250 --> 00:09:31,310
也是呢，需要大家掌握的

207
00:09:31,310 --> 00:09:33,900
那我们接下来来看一下

208
00:09:33,900 --> 00:09:37,160
针对这一部分真题的考察啊

209
00:09:37,160 --> 00:09:38,860
下面告诉我们呢

210
00:09:38,860 --> 00:09:41,900
编译器和解释器是两种基本的

211
00:09:41,900 --> 00:09:43,640
高级语言处理程序

212
00:09:43,640 --> 00:09:47,660
编译器呢，对高级语言源程序

213
00:09:47,660 --> 00:09:49,270
它的处理过程啊

214
00:09:49,270 --> 00:09:51,020
可以有词法分析

215
00:09:51,020 --> 00:09:55,000
语法分析、语义分析、中间代码生成、代码优化

216
00:09:55,000 --> 00:09:57,410
目标代码生成等阶段

217
00:09:57,410 --> 00:10:01,910
那其中哪些不是每个编译器必须都有的呢

218
00:10:01,910 --> 00:10:06,380
唉，应该是中中间代码生成和代码优化吧

219
00:10:06,380 --> 00:10:10,100
这是考试当中经常考的一个基本概念

220
00:10:10,100 --> 00:10:11,870
大家呢了解一下

221
00:10:11,870 --> 00:10:14,390
那与编译器相比

222
00:10:14,390 --> 00:10:16,690
解释器有什么样的特点呢

223
00:10:16,690 --> 00:10:20,500
这个其实就是我们前面的视频当中提到过的

224
00:10:20,500 --> 00:10:22,970
编译与解释的区别

225
00:10:22,970 --> 00:10:26,060
那编译器它生成目标代码

226
00:10:26,060 --> 00:10:27,720
可以呢直接执行

227
00:10:27,720 --> 00:10:31,160
而解释器它生成的是中间代码

228
00:10:31,160 --> 00:10:35,150
必须呢由解释器参与运行

229
00:10:35,150 --> 00:10:37,730
那解释器参与运行

230
00:10:37,730 --> 00:10:39,430
边解释边执行

231
00:10:39,430 --> 00:10:42,540
它的速度呢就会比较慢

232
00:10:42,540 --> 00:10:45,420
所以这里呢，解释器的特

233
00:10:45,420 --> 00:10:47,950
应该呢选择 B 选项

234
00:10:47,950 --> 00:10:49,600
不参与执行

235
00:10:49,600 --> 00:10:51,260
然后速度较快

236
00:10:51,260 --> 00:10:54,340
这是呢编译器它的特点

237
00:10:57,640 --> 00:11:01,440
这是对我们的编译器

238
00:11:01,440 --> 00:11:04,760
它的这个具体的过程的考察

239
00:11:04,760 --> 00:11:08,280
以及呢与解释器的特点对比

240
00:11:09,040 --> 00:11:11,290
再来看下面这道题

241
00:11:11,290 --> 00:11:14,560
在以阶段划分的编译器当中啊

242
00:11:14,560 --> 00:11:17,020
哪一个阶段的主要作用是

243
00:11:17,020 --> 00:11:19,450
分析构成程序的字符

244
00:11:19,450 --> 00:11:23,640
以及呢，由字符构造规则构成的字符呢

245
00:11:23,640 --> 00:11:27,080
唉，这个符号是否符合语言规定

246
00:11:27,080 --> 00:11:31,780
那我们现在唉，将程序进行拆分的话

247
00:11:31,780 --> 00:11:35,040
首先检查的就是这个字符吧

248
00:11:35,040 --> 00:11:37,990
字符检查完了才会检查句子

249
00:11:37,990 --> 00:11:41,890
检查字符是词法分析去做的

250
00:11:41,890 --> 00:11:45,550
检查句子的结构是语法分析做的

251
00:11:45,550 --> 00:11:47,950
检查句子是做什么的

252
00:11:47,950 --> 00:11:50,840
是语义分析来完成的

253
00:11:50,840 --> 00:11:54,980
那最终呢，可以经过中间代码生成和代码优化

254
00:11:54,980 --> 00:11:57,990
然后呢，生成具体的目标代码

255
00:11:57,990 --> 00:12:02,320
中间代码生成和代码优化是可以呢

256
00:12:02,320 --> 00:12:03,860
忽略不计的诶

257
00:12:03,860 --> 00:12:05,400
它是可有可无的

258
00:12:05,400 --> 00:12:06,580
有的编译器有

259
00:12:06,580 --> 00:12:09,560
有的编译器呢，并不包含这个功能

260
00:12:10,330 --> 00:12:12,550
再来看下面这道题

261
00:12:12,550 --> 00:12:14,930
将编译器的工作过程呢

262
00:12:14,930 --> 00:12:17,650
划分成词法分析、语法分析

263
00:12:17,650 --> 00:12:19,960
诶，漏了一个语法分析，没有说吧

264
00:12:19,960 --> 00:12:22,280
还有语义分析、中间代码生成

265
00:12:22,280 --> 00:12:24,980
代码优化和目标代码生成

266
00:12:24,980 --> 00:12:30,400
那语法分析它的这个输入内容是什么呢

267
00:12:30,400 --> 00:12:31,320
我们说啊

268
00:12:31,320 --> 00:12:36,070
语法分析它输入的是词法分析的输出

269
00:12:36,070 --> 00:12:39,180
那我们从原程序，诶

270
00:12:39,180 --> 00:12:42,890
输入之后进行的是词法分析

271
00:12:42,890 --> 00:12:47,000
词法分析的结果应该呢，是记号流

272
00:12:47,000 --> 00:12:50,690
记号流会放到语法分析当中

273
00:12:50,690 --> 00:12:52,970
进行了具体的语法分析

274
00:12:52,970 --> 00:12:57,900
所以语法分析它的输入呢，应该是记号流

275
00:12:57,900 --> 00:12:59,730
如果没有问题

276
00:12:59,730 --> 00:13:02,470
输出呢，可以是语法术被

277
00:13:02,470 --> 00:13:03,870
或者理解为呢，分析

278
00:13:03,870 --> 00:13:05,400
数字符流呢

279
00:13:05,400 --> 00:13:10,040
是我们在程序当中会出现的一种呢输入形式

280
00:13:10,040 --> 00:13:13,560
那若程序中括号不匹配的话

281
00:13:13,560 --> 00:13:15,840
唉，这里不是单词了

282
00:13:15,840 --> 00:13:17,780
而是呢，结构问题

283
00:13:17,780 --> 00:13:19,910
那结构问题应该呢

284
00:13:19,910 --> 00:13:22,330
是在语法分析阶

285
00:13:22,330 --> 00:13:24,650
检查出来的错误

286
00:13:24,650 --> 00:13:27,010
词法分析检查的是拼写

287
00:13:27,010 --> 00:13:29,190
语法分析检查的是结构

288
00:13:29,190 --> 00:13:35,020
而语义分析检查的是语句的具体执行过程

289
00:13:35,020 --> 00:13:37,390
再来看下面这道题

290
00:13:37,390 --> 00:13:41,850
语法指导翻译是一种什么样的方法

291
00:13:41,850 --> 00:13:46,090
那由语法来指导的应该呢

292
00:13:46,090 --> 00:13:49,350
诶，是我们的语义分析过程

293
00:13:49,350 --> 00:13:54,070
那这种语义分析应该是静态语义分析吧

294
00:13:54,070 --> 00:13:55,870
动态语义分析

295
00:13:55,870 --> 00:14:00,360
它应该是执行过程当中才考虑的问题

296
00:14:00,360 --> 00:14:02,310
中间代码优化

297
00:14:02,310 --> 00:14:06,890
唉，我们一般呢是在编译器当中可以

298
00:14:06,890 --> 00:14:09,290
或者呢可以没有的阶段

299
00:14:09,290 --> 00:14:11,620
那目标代码我们一般不

300
00:14:11,620 --> 00:14:13,840
不对目标代码进行优化

301
00:14:13,840 --> 00:14:17,660
只对呢中间代码来进行优化

302
00:14:19,080 --> 00:14:21,830
接下来再看下面这道题

303
00:14:21,830 --> 00:14:25,600
将高级程序语言原程序转换成一种

304
00:14:25,600 --> 00:14:27,200
一种呢，中间代码

305
00:14:27,200 --> 00:14:30,390
是现代编译器常见的处理方式

306
00:14:30,390 --> 00:14:34,050
那常见的中间代码有后缀式，诶

307
00:14:34,050 --> 00:14:35,290
还有呢

308
00:14:35,290 --> 00:14:39,030
以及呢三地址码、前

309
00:14:39,030 --> 00:14:40,810
符号表、补码、移

310
00:14:40,810 --> 00:14:44,120
与我们的编译过程是没有关系的

311
00:14:44,120 --> 00:14:47,550
那我们的符号表示贯穿始终

312
00:14:47,550 --> 00:14:49,290
它不是中间代码

313
00:14:49,290 --> 00:14:53,000
而是记录符号与对应取值的补码

314
00:14:53,000 --> 00:14:56,320
移码是我们在数据的表示当中提到的

315
00:14:56,320 --> 00:14:58,750
二进制表示的形式

316
00:14:58,750 --> 00:15:00,650
那这是我们呢，唉

317
00:15:00,650 --> 00:15:04,880
关于这是对中间代码的考察

318
00:15:04,880 --> 00:15:06,720
再来看下面这道题

319
00:15:06,720 --> 00:15:09,880
某程序运行的时候陷入死循环

320
00:15:09,880 --> 00:15:11,250
可能的原因

321
00:15:11,250 --> 00:15:14,090
诶，是程序中存在什么错误呢

322
00:15:14,090 --> 00:15:14,530
唉

323
00:15:14,530 --> 00:15:16,450
死循环它是呢

324
00:15:16,450 --> 00:15:18,450
动态的语义错误

325
00:15:18,450 --> 00:15:20,760
词法错误是拼写错误

326
00:15:20,760 --> 00:15:22,750
语法错误是结构错误

327
00:15:22,750 --> 00:15:24,130
静态语义错误

328
00:15:24,130 --> 00:15:26,090
主要体现在运

329
00:15:26,090 --> 00:15:29,230
运算符与变量之间呢，不

330
00:15:29,230 --> 00:15:30,750
这样的一个呢过程

331
00:15:30,750 --> 00:15:32,890
那像陷入死循环

332
00:15:32,890 --> 00:15:35,220
还有变量做零除数等等

333
00:15:35,220 --> 00:15:38,540
是我们典型的动态语义错误

334
00:15:38,540 --> 00:15:41,600
这是对错误管理的考察

335
00:15:42,090 --> 00:15:44,310
再来看下面这道题

336
00:15:44,310 --> 00:15:48,330
在对高级程序语言进行编译或解释

337
00:15:48,330 --> 00:15:49,920
处理的过程当中

338
00:15:49,920 --> 00:15:52,030
需要不断地收集

339
00:15:52,030 --> 00:15:55,050
记录和使用源程序当

340
00:15:55,050 --> 00:15:58,410
一些呢，相关符号的类型和特征

341
00:15:58,410 --> 00:16:00,640
并将其存入什么呢

342
00:16:00,640 --> 00:16:05,510
唉，我们不断收集记录涉及的相关符号

343
00:16:05,510 --> 00:16:11,370
它会把类型和特征等等记录在符号表当中

344
00:16:11,370 --> 00:16:13,640
哈希表，它是一种呢

345
00:16:13,640 --> 00:16:16,260
比较特殊的查找表

346
00:16:16,260 --> 00:16:19,770
堆栈和队列是我们诶

347
00:16:19,770 --> 00:16:22,990
涉及到的数据结构的两种

348
00:16:22,990 --> 00:16:24,180
在这里呢

349
00:16:24,180 --> 00:16:26,940
我们描述的是符号表

350
00:16:26,940 --> 00:16:29,670
这是对符号表的考察

351
00:16:29,670 --> 00:16:33,700
这是呢，唉，我们给大家讲到的关于啊

352
00:16:33,700 --> 00:16:34,660
编译器

353
00:16:34,660 --> 00:16:36,150
它的执行过程

354
00:16:36,150 --> 00:16:37,860
它的各个阶段的任务

355
00:16:37,860 --> 00:16:41,140
以及呢，可能出现的关于错误管理

356
00:16:41,140 --> 00:16:44,000
符号表和中间代码的一些呢

357
00:16:44,000 --> 00:16:44,960
诶，内容

358
00:16:44,960 --> 00:16:46,650
大家回去之后呢

359
00:16:46,650 --> 00:16:50,170
注意呢，自己做题再进行巩固一下
