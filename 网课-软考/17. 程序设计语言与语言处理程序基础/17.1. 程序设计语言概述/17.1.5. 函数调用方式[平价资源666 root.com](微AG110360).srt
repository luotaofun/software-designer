1
00:00:00,000 --> 00:00:03,840
下面我们展开来看一下函数调用的方式

2
00:00:03,840 --> 00:00:06,860
我们在程序设计过程当中啊

3
00:00:06,860 --> 00:00:09,640
尤其是结构化开发的过程当中

4
00:00:09,640 --> 00:00:12,790
代码呢，都是通过函数来进行调用的

5
00:00:12,790 --> 00:00:15,730
函数的声明和定义啊

6
00:00:15,730 --> 00:00:19,040
函数是需要先做声明定义

7
00:00:19,040 --> 00:00:20,880
然后才能够调用的

8
00:00:20,880 --> 00:00:24,640
那它的声明和定义主要的格式呢

9
00:00:24,640 --> 00:00:27,710
唉，首先有返回值类型

10
00:00:27,710 --> 00:00:30,330
然后呢，诶，会有一个呢

11
00:00:30,330 --> 00:00:32,500
相应的函数名称

12
00:00:32,500 --> 00:00:34,980
以及呢，相应的参数列表

13
00:00:34,980 --> 00:00:39,260
参数列表我们一般以括号的形式括起来

14
00:00:39,260 --> 00:00:43,500
比如说 int function 函数一

15
00:00:43,500 --> 00:00:47,820
然后呢，哎，里面需要传参 int x 

16
00:00:47,990 --> 00:00:51,440
这就是一个呢，简单的函数声明

17
00:00:51,440 --> 00:00:54,700
声明之后后面会有一个大括号

18
00:00:54,700 --> 00:00:57,720
跟随的是函数的执行过程

19
00:00:57,720 --> 00:00:59,900
可以理解为实现过程

20
00:00:59,900 --> 00:01:01,940
或者叫做呢方法体

21
00:01:01,940 --> 00:01:04,840
函数名也叫呢，方法名啊

22
00:01:04,840 --> 00:01:06,950
那我们船舱之后

23
00:01:06,950 --> 00:01:08,470
这是一个声明吧

24
00:01:08,470 --> 00:01:10,840
声明之后我们还要使用

25
00:01:10,840 --> 00:01:13,970
使用也就是调用的过程当中啊

26
00:01:13,970 --> 00:01:17,440
我们可以以函数名来调用

27
00:01:17,440 --> 00:01:19,040
并且需要呢

28
00:01:19,040 --> 00:01:22,770
在当中传递相应的参数

29
00:01:22,770 --> 00:01:24,500
这个过程当中

30
00:01:24,500 --> 00:01:28,680
我们声明定义的部分叫做呢形参

31
00:01:28,680 --> 00:01:31,710
形式参数列表可以有一个

32
00:01:31,710 --> 00:01:32,670
可以有多个

33
00:01:32,670 --> 00:01:33,830
也可以没有

34
00:01:33,830 --> 00:01:36,060
而调用过程当中

35
00:01:36,060 --> 00:01:39,680
这个参数我们呢叫做实参

36
00:01:39,840 --> 00:01:44,560
它才是真正传递进去的数值

37
00:01:44,560 --> 00:01:47,930
那在这个调用过程当中

38
00:01:47,930 --> 00:01:53,390
我们传递数值是通过值来传递的

39
00:01:53,390 --> 00:01:56,850
还是通过地址引用来传递的

40
00:01:56,850 --> 00:01:59,070
结果是不一样的

41
00:01:59,070 --> 00:02:01,050
那我们在这里呢

42
00:02:01,050 --> 00:02:05,060
唉，了解到这两种调用方式的区别

43
00:02:05,060 --> 00:02:10,210
和这两种方式对最终结果的影响就可以了

44
00:02:10,210 --> 00:02:12,520
对于传值调用

45
00:02:12,520 --> 00:02:16,330
它是指呢，唉，我们调用过程当中

46
00:02:16,330 --> 00:02:19,860
形参取的是实参具体的值

47
00:02:19,860 --> 00:02:24,060
那形参在函数体当中发生改变

48
00:02:24,060 --> 00:02:28,380
是不会影响我们调用过程当中啊

49
00:02:28,380 --> 00:02:31,820
唉，所传递的实参具体的数值的

50
00:02:31,820 --> 00:02:34,360
因为它只是使用了具体的数值

51
00:02:34,360 --> 00:02:35,960
值与这个数呢

52
00:02:35,960 --> 00:02:39,540
或者说与这个变量本身是没有关系的

53
00:02:39,770 --> 00:02:43,330
传址调用，或者说呢，引用调用

54
00:02:43,330 --> 00:02:44,830
我们在这里呢

55
00:02:44,830 --> 00:02:48,610
行参取的是实参的地址

56
00:02:48,610 --> 00:02:51,840
所以我们在传递的过程当中呢

57
00:02:51,840 --> 00:02:53,420
对实参啊

58
00:02:53,420 --> 00:02:56,060
整个形参的修改呢

59
00:02:56,060 --> 00:02:57,770
其实都是呢

60
00:02:57,770 --> 00:03:00,440
对实参的具体修改

61
00:03:00,440 --> 00:03:03,700
所以它的值如果发生变化的话

62
00:03:03,700 --> 00:03:06,160
形参的值一旦发生变化

63
00:03:06,160 --> 00:03:08,390
在被调用函数当中啊

64
00:03:08,390 --> 00:03:10,510
这个函数体里发生变化的话

65
00:03:10,510 --> 00:03:15,740
会匀会影响它在原本传参之前的取值

66
00:03:15,740 --> 00:03:17,780
那这就是呢

67
00:03:17,780 --> 00:03:20,780
两种调用方式它的区别

68
00:03:20,780 --> 00:03:22,500
我们来看一个例子

69
00:03:22,500 --> 00:03:25,220
这是一个呢，典型的数据交换

70
00:03:25,220 --> 00:03:28,700
首先左侧这个数据交换

71
00:03:28,700 --> 00:03:30,120
交换的函数

72
00:03:30,120 --> 00:03:32,980
它声明了一个参数列表

73
00:03:32,980 --> 00:03:34,840
一个 X ，一个 Y 

74
00:03:34,840 --> 00:03:39,280
两个整形参数定义了一个呢过渡的变量

75
00:03:39,280 --> 00:03:41,920
那把 T 的值，唉

76
00:03:41,920 --> 00:03:43,120
赋值为 X 

77
00:03:43,120 --> 00:03:45,320
X 值赋值为 YY 的值

78
00:03:45,320 --> 00:03:46,690
再赋值为 T 

79
00:03:46,690 --> 00:03:49,350
然后呢，输出 X 和 Y 

80
00:03:49,350 --> 00:03:52,230
那这是呢，做数据交换的过程

81
00:03:52,230 --> 00:03:55,990
我们在对啊， C 语言程序进行分析的时候

82
00:03:55,990 --> 00:03:58,980
一般会从主程序开始分析

83
00:03:58,980 --> 00:04:01,030
那主函数当中呢

84
00:04:01,030 --> 00:04:02,370
失声明的两个变量

85
00:04:02,370 --> 00:04:06,730
A 和 B ，调用这个 swap 交换函数

86
00:04:06,730 --> 00:04:08,410
那调用之后

87
00:04:08,410 --> 00:04:12,560
这里的调用过程会找到 swap 函数

88
00:04:12,560 --> 00:04:14,910
当它执行完之后

89
00:04:14,910 --> 00:04:17,750
再返回我们的调用点

90
00:04:17,750 --> 00:04:19,750
那这个情况当中

91
00:04:19,750 --> 00:04:25,760
我们首先会通过 swap 函数输出 X 和 Y 的值

92
00:04:25,760 --> 00:04:28,930
那我们传的时候是三和四吧

93
00:04:28,930 --> 00:04:32,470
传到我们的这个形参当中

94
00:04:32,470 --> 00:04:34,550
传递的是数值

95
00:04:34,550 --> 00:04:36,600
那 T 1等于 X 

96
00:04:36,600 --> 00:04:38,350
就是 T 1等于三

97
00:04:38,350 --> 00:04:39,960
X 等于 Y 

98
00:04:39,960 --> 00:04:41,780
它就呢改成了四

99
00:04:41,780 --> 00:04:43,460
Y 等于 T 

100
00:04:43,460 --> 00:04:45,060
Y 就是等于三的

101
00:04:45,060 --> 00:04:47,720
所以输出 X 和 Y 

102
00:04:47,720 --> 00:04:50,360
它的取值是四和三

103
00:04:50,360 --> 00:04:53,150
那我们返回调用点之后

104
00:04:53,150 --> 00:04:56,420
下一个语句是输出 A 和 B 

105
00:04:56,420 --> 00:04:58,720
A 的值仍然是三

106
00:04:58,720 --> 00:05:00,820
B 的值仍然是四

107
00:05:00,820 --> 00:05:02,730
没有发生变化

108
00:05:02,730 --> 00:05:04,120
我们在这里呢

109
00:05:04,120 --> 00:05:05,060
传给形参

110
00:05:05,060 --> 00:05:06,700
就是呢，给形参了

111
00:05:06,700 --> 00:05:09,460
我们在这里可以理解为这些数值啊

112
00:05:09,460 --> 00:05:11,930
都是我们的局部变量

113
00:05:11,930 --> 00:05:14,550
只在呢本函数当中使用

114
00:05:14,550 --> 00:05:17,040
那本函数要给其他函数用呢

115
00:05:17,040 --> 00:05:19,500
可以通过调用传参的过程当中

116
00:05:19,500 --> 00:05:22,840
把相应的数值或者地址传过去

117
00:05:22,840 --> 00:05:25,600
再来看右侧这个过程

118
00:05:25,820 --> 00:05:28,360
右侧这个过程同样呢

119
00:05:28,360 --> 00:05:31,180
主函数声明的变量 A 和 B 

120
00:05:31,180 --> 00:05:34,470
然后，哎，调用了 swap 函数吧

121
00:05:34,470 --> 00:05:36,960
这个函数就不一样了啊

122
00:05:36,960 --> 00:05:38,080
有区别了

123
00:05:38,080 --> 00:05:39,480
这个函数

124
00:05:39,480 --> 00:05:44,850
它的形参列表是两个整形变量的指针

125
00:05:44,850 --> 00:05:50,410
所以，唉，这种指针可以呢理解为传引用

126
00:05:50,410 --> 00:05:52,610
那传引用的话

127
00:05:52,610 --> 00:05:54,490
这个过程当中啊

128
00:05:54,490 --> 00:05:57,090
我们用 int 星号 X 

129
00:05:57,090 --> 00:05:59,560
int 星号 Y ， int 星号 T 

130
00:05:59,560 --> 00:06:01,700
它都是声明指针

131
00:06:01,700 --> 00:06:04,350
而在下面部分当中

132
00:06:04,350 --> 00:06:07,440
星号 T 、星号 X 、星号 

133
00:06:07,440 --> 00:06:11,940
指的都是我们指针内部的内容了

134
00:06:11,940 --> 00:06:15,730
那星号 T 是一个地址指向的具体内容

135
00:06:15,730 --> 00:06:18,170
我们给这个地址当中呢

136
00:06:18,170 --> 00:06:20,960
唉，传递了 X 的内容

137
00:06:20,960 --> 00:06:23,870
X 的内容是三

138
00:06:24,220 --> 00:06:29,520
然后呢，哎，原本这个 X 的内容里面是三吧

139
00:06:29,520 --> 00:06:33,390
现在把它呢变成了 Y 里面的内容

140
00:06:33,390 --> 00:06:35,510
它就变成了四

141
00:06:35,510 --> 00:06:37,650
那 Y 里面的内

142
00:06:37,650 --> 00:06:41,830
原本呢，哎，星号 Y 它里面的内容是三吧

143
00:06:41,830 --> 00:06:43,280
哎，是四吧

144
00:06:43,280 --> 00:06:47,300
但是现在转成了星号 T 里面的内容三

145
00:06:47,300 --> 00:06:50,050
所以它从四变成了三

146
00:06:50,050 --> 00:06:53,980
输出的结果是 X 的内容

147
00:06:53,980 --> 00:06:56,580
Y 的内容也就是四和三

148
00:06:56,580 --> 00:06:58,950
返回调用点之后

149
00:06:58,950 --> 00:07:01,790
输出 A 的值和 B 的值

150
00:07:01,790 --> 00:07:04,640
此时也是四和三

151
00:07:04,640 --> 00:07:07,100
这种方式就是我们说

152
00:07:07,100 --> 00:07:10,280
以引用、调用的方式来传

153
00:07:10,280 --> 00:07:14,360
我们呢，会修改原参数的值

154
00:07:14,360 --> 00:07:17,940
原实参的值会随之发生改变

155
00:07:17,940 --> 00:07:21,320
那这是呢，最终的输出结果

156
00:07:21,320 --> 00:07:23,970
这一部分在我们考试当中啊

157
00:07:23,970 --> 00:07:26,430
也是呢，会出现这种代码

158
00:07:26,430 --> 00:07:30,660
让大家分析最终的输出结果是多少

159
00:07:30,660 --> 00:07:32,400
那我们来看一下

160
00:07:32,400 --> 00:07:36,660
关于我们函数进行数据交换的过程

161
00:07:36,660 --> 00:07:41,660
那我们如果声明了 ab 两个变量里面

162
00:07:41,660 --> 00:07:44,430
具体的取值是三和四

163
00:07:44,430 --> 00:07:48,350
那我们把这个取值通过函数调用

164
00:07:48,350 --> 00:07:51,200
传给了 X 和 Y 的变量

165
00:07:51,200 --> 00:07:57,030
X 和 Y ，它是在声明的时候就开辟了两个空间

166
00:07:57,030 --> 00:07:59,570
等着大家把值放进去

167
00:07:59,570 --> 00:08:01,230
那传递之后

168
00:08:01,230 --> 00:08:05,250
A 和 B 、 X 和 Y 它们是不相干的

169
00:08:05,250 --> 00:08:08,470
所以 X 和 Y 进行数据交换

170
00:08:08,470 --> 00:08:09,650
变成四，三

171
00:08:09,650 --> 00:08:13,410
ab 的取值是没有变化的

172
00:08:13,600 --> 00:08:17,260
而对于引用调用这种方式的话

173
00:08:17,260 --> 00:08:19,720
我们在 A 和 B 当中

174
00:08:19,720 --> 00:08:23,130
声明变量里面的内容是三和四

175
00:08:23,130 --> 00:08:29,040
而 X 和 Y 是我们找到的两个地址指针

176
00:08:29,040 --> 00:08:30,940
声明的地址指针

177
00:08:30,940 --> 00:08:33,990
那地址指针的内容是什么呢

178
00:08:33,990 --> 00:08:39,030
我们传递的参数是以 and 的符号传递的 A 和 B 

179
00:08:39,030 --> 00:08:42,600
那这里传的其实就是地址

180
00:08:42,600 --> 00:08:45,110
那传的是地址

181
00:08:45,110 --> 00:08:46,890
那我们就是说呢

182
00:08:46,890 --> 00:08:49,950
X 它是等于星号 X 

183
00:08:50,060 --> 00:08:52,100
声明的情况下

184
00:08:52,100 --> 00:08:56,110
这个 X 指针是与 A 1样的

185
00:08:56,110 --> 00:09:00,590
所以最终的话，这城的一个地址指向 A 

186
00:09:00,590 --> 00:09:03,860
那我们在地址指向 A 当中

187
00:09:03,860 --> 00:09:06,960
对具体的地址内容进行修改

188
00:09:06,960 --> 00:09:09,670
此时修改的就是呢

189
00:09:09,670 --> 00:09:12,520
A 和 B 里面填写的内容了

190
00:09:12,520 --> 00:09:17,680
所以这就是呢，船只和船只引用它们的区别

191
00:09:17,680 --> 00:09:20,360
那我们来看一下这一部分

192
00:09:20,360 --> 00:09:24,170
在我们软件设计师考试真题当中的体现

193
00:09:24,170 --> 00:09:25,980
首先呢，是，诶

194
00:09:25,980 --> 00:09:28,680
对于这两种方式的概

195
00:09:28,680 --> 00:09:31,910
对比常用的函数参数啊

196
00:09:31,910 --> 00:09:34,850
传递方式有传值和传引用两种

197
00:09:34,850 --> 00:09:38,250
那这两种方式有什么区别呢

198
00:09:38,250 --> 00:09:41,140
在传值的方式下

199
00:09:41,140 --> 00:09:43,800
形参和实参之间呢

200
00:09:43,800 --> 00:09:46,650
是可以互相传递值的

201
00:09:46,650 --> 00:09:49,450
我们只会把实参的值给形参

202
00:09:49,450 --> 00:09:51,550
形参不会给实参

203
00:09:51,550 --> 00:09:53,720
所以它是错误的

204
00:09:53,720 --> 00:09:54,820
B 选项

205
00:09:54,820 --> 00:09:57,630
在船值方式下

206
00:09:57,630 --> 00:10:00,140
实参不能是变量

207
00:10:00,140 --> 00:10:02,610
它可以是变量

208
00:10:02,610 --> 00:10:06,930
我们刚刚写的 A 和 B 就是声明的两个变量

209
00:10:06,930 --> 00:10:12,410
C 选项，在传引用方式下修改形参

210
00:10:12,410 --> 00:10:15,490
实质上就是改变了实参的值吧

211
00:10:15,490 --> 00:10:17,740
这个说法是正确的

212
00:10:17,740 --> 00:10:21,180
这也是传引用方式它的特点

213
00:10:21,340 --> 00:10:25,210
D 选项，在船引用方式下

214
00:10:25,210 --> 00:10:29,780
实参可以是任意的变量和表达式

215
00:10:29,780 --> 00:10:31,230
我们在这里啊

216
00:10:31,230 --> 00:10:33,350
实参不能是表达式

217
00:10:33,350 --> 00:10:35,690
它可以呢是任意的变量

218
00:10:35,690 --> 00:10:38,060
那这是我们呢提到的

219
00:10:38,060 --> 00:10:42,280
关于船只和船引用两种方式

220
00:10:42,280 --> 00:10:44,120
它的呢对比过程

221
00:10:44,120 --> 00:10:46,160
再来看下面这道题

222
00:10:46,160 --> 00:10:49,050
函数 T 和 F 的定义如下

223
00:10:49,050 --> 00:10:51,210
若调用函数 T 的时候

224
00:10:51,210 --> 00:10:55,190
传递给 X 的值是五

225
00:10:55,510 --> 00:10:58,710
并且调用函数 F 的时候

226
00:10:58,710 --> 00:11:02,730
第一个参数采用的是传值方式

227
00:11:02,730 --> 00:11:07,140
第二个参数采用的是传引用方式

228
00:11:07,140 --> 00:11:10,740
那函数 T 它的返回值是多少呢

229
00:11:10,740 --> 00:11:13,700
那这道题是典型的结合代码考察

230
00:11:13,700 --> 00:11:17,840
但是要注意，这种代码一般都是伪代码

231
00:11:17,840 --> 00:11:20,610
所以很多同学都会问老师啊

232
00:11:20,610 --> 00:11:24,270
呃，为什么感觉他写的这个代码不是很规范

233
00:11:24,270 --> 00:11:26,480
或者感觉没有这种格式

234
00:11:26,480 --> 00:11:27,740
到底是什么代码呢

235
00:11:27,740 --> 00:11:29,260
可以理解为伪代码

236
00:11:29,260 --> 00:11:33,710
能够读懂它具体的描述逻辑就可以了

237
00:11:33,710 --> 00:11:35,360
那我们可以看到呢

238
00:11:35,360 --> 00:11:37,560
唉，从 T 开始分析

239
00:11:37,560 --> 00:11:43,070
int a ，哎，声明一个变量 A 等于三乘以 X 

240
00:11:43,070 --> 00:11:44,850
也就是5+1

241
00:11:44,850 --> 00:11:47,070
它是等于16的

242
00:11:47,070 --> 00:11:49,380
那接下来调用 F 

243
00:11:49,380 --> 00:11:52,520
函数调用过程当中呢

244
00:11:52,520 --> 00:11:55,740
X 的值是传给了 R 

245
00:11:55,740 --> 00:11:59,040
那这个值还是等于五的

246
00:11:59,040 --> 00:12:01,960
这是一个呢值的调用

247
00:12:01,960 --> 00:12:07,600
传值调用意味着在我们下面的 F 代码当中

248
00:12:07,600 --> 00:12:11,370
所做的一切修改都不会影响 X 8

249
00:12:11,370 --> 00:12:13,470
那第二个参数 A 

250
00:12:13,470 --> 00:12:16,180
它的值传给了 S 

251
00:12:16,180 --> 00:12:18,820
并且这种传值的方式

252
00:12:18,820 --> 00:12:21,820
是传引用方式来调用的

253
00:12:22,370 --> 00:12:24,850
引用方式：调用说明

254
00:12:24,850 --> 00:12:29,930
对 S 的一切修改都会影响到 A 的取值

255
00:12:30,200 --> 00:12:33,980
传过去的数值呢，应该是16

256
00:12:33,980 --> 00:12:38,640
那再来看，在 F 函数当中声明了一个变量 X 

257
00:12:38,640 --> 00:12:44,520
注意这个 X 和我们 T 当中的 X 是不一样的

258
00:12:44,520 --> 00:12:49,010
它们是两个不同函数当中的局部参数

259
00:12:49,010 --> 00:12:53,240
那 X 等于二乘 S 加一

260
00:12:53,240 --> 00:12:57,060
也就是2×16加一

261
00:12:57,240 --> 00:13:02,240
结果应该是等于33的

262
00:13:04,520 --> 00:13:07,240
那33知道了之后

263
00:13:07,240 --> 00:13:11,720
S 是等于 X 加二的

264
00:13:11,720 --> 00:13:14,700
那它是等于33+5

265
00:13:14,700 --> 00:13:17,190
也就是等于38的

266
00:13:17,190 --> 00:13:20,610
然后 R 等于 X 减一

267
00:13:20,610 --> 00:13:23,130
R 是等于32的

268
00:13:23,130 --> 00:13:25,440
那这些修改过程当中

269
00:13:25,440 --> 00:13:27,640
最终 F 结束的时候

270
00:13:27,640 --> 00:13:31,030
R 的取值是变成了32

271
00:13:31,030 --> 00:13:33,910
X 的取值还是五

272
00:13:33,910 --> 00:13:39,130
它 A 和 S 的取值都变成了38

273
00:13:39,130 --> 00:13:42,440
那这是我们呢在 F 当中所做的修改

274
00:13:42,440 --> 00:13:45,660
然后返回没有具体返回值啊

275
00:13:45,660 --> 00:13:48,200
返回我们的调用点

276
00:13:48,200 --> 00:13:50,260
返回 A 减 X 

277
00:13:50,260 --> 00:13:52,560
A 的取值是38吧

278
00:13:52,560 --> 00:13:54,740
X 的取值还是五

279
00:13:54,740 --> 00:13:58,660
所以最终的结果应该是33

280
00:13:58,660 --> 00:14:01,610
这道题应该选择 A 选项

281
00:14:01,610 --> 00:14:03,540
那这是关于呢

282
00:14:03,540 --> 00:14:08,160
传值、传引用两种方式对代码调用过程当中

283
00:14:08,160 --> 00:14:10,390
数值的具体影响

284
00:14:10,390 --> 00:14:12,390
再来看下面这道题

285
00:14:12,390 --> 00:14:15,430
在程序的执行过程当中啊

286
00:14:15,430 --> 00:14:19,630
系统用什么来实现嵌套调用

287
00:14:19,630 --> 00:14:23,500
递归调用函数的正确返回

288
00:14:23,500 --> 00:14:25,040
那我们在这里呢

289
00:14:25,040 --> 00:14:27,420
当做一个常识记住就行了

290
00:14:27,420 --> 00:14:30,300
我们在函数调用的过程当中啊

291
00:14:30,300 --> 00:14:33,120
是利用栈来进行记录的

292
00:14:33,120 --> 00:14:35,440
包括我们在做中断的时候

293
00:14:35,440 --> 00:14:39,100
也是呢利用栈来实现它的调用过程的

294
00:14:39,100 --> 00:14:42,760
那这里呢，知道占它的用法就可以了

295
00:14:42,760 --> 00:14:46,600
这是呢，关于函数调用过程的相关内容
