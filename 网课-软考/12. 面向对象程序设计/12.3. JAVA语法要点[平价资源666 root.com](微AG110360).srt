1
00:00:00,000 --> 00:00:02,160
接下来我们再展开看一

2
00:00:02,160 --> 00:00:05,240
java 相关的一些呢语法要点

3
00:00:05,240 --> 00:00:06,980
那我们这一部分啊

4
00:00:06,980 --> 00:00:07,740
仍然呢

5
00:00:07,740 --> 00:00:12,570
是结合我们软件设计师考试的考察题型

6
00:00:12,570 --> 00:00:14,110
来进行介绍的

7
00:00:14,110 --> 00:00:16,990
有很多比较基础的一些语法内容呢

8
00:00:16,990 --> 00:00:19,770
我们在这里就没有展开赘述了

9
00:00:19,770 --> 00:00:23,420
那要想更好地掌握这类题型

10
00:00:23,420 --> 00:00:24,600
建议大家呢

11
00:00:24,600 --> 00:00:27,420
还是需要去做一做

12
00:00:27,420 --> 00:00:31,020
学一学相关的 java 语法

13
00:00:31,020 --> 00:00:34,910
接下来我们先来看一看 java 的基础

14
00:00:34,910 --> 00:00:37,510
首先，对于 java 来说呢

15
00:00:37,510 --> 00:00:40,940
它在开发过程当中啊

16
00:00:40,940 --> 00:00:43,380
一般呢会用到类

17
00:00:43,380 --> 00:00:45,780
那我们有很多个类呢

18
00:00:45,780 --> 00:00:48,260
是可以放到同一个包当中的

19
00:00:48,260 --> 00:00:51,690
java 一般会导入一些包

20
00:00:51,690 --> 00:00:53,950
那导入之后啊

21
00:00:53,950 --> 00:00:57,490
我们可以引入包里面的类来使用

22
00:00:57,490 --> 00:00:59,990
我们经常用到的一些啊

23
00:00:59,990 --> 00:01:02,250
import java 点 IO 啊等等

24
00:01:02,250 --> 00:01:07,870
那这类是我们开发软件里面的自带的一些包

25
00:01:07,870 --> 00:01:10,340
那我们对于类来说呢

26
00:01:10,340 --> 00:01:12,240
它是开发比较核心

27
00:01:12,240 --> 00:01:14,190
用到比较多的一个东西

28
00:01:14,190 --> 00:01:20,110
它用的 class 关键字来表示这是一个 L 

29
00:01:20,320 --> 00:01:23,980
那如果这个类是接口的话

30
00:01:23,980 --> 00:01:26,900
它会用呢， interface 来表示

31
00:01:26,900 --> 00:01:29,890
这是一个接口标识

32
00:01:29,890 --> 00:01:30,790
之后啊

33
00:01:30,790 --> 00:01:34,030
我们后面呢，会跟随它的命名

34
00:01:34,030 --> 00:01:36,720
哎，这个类名或者接口名

35
00:01:36,720 --> 00:01:40,030
那一个类前面还可以呢

36
00:01:40,030 --> 00:01:42,070
放上一些类修饰符

37
00:01:42,070 --> 00:01:44,150
当然你也可以不放

38
00:01:44,150 --> 00:01:45,670
类修饰符呢

39
00:01:45,670 --> 00:01:47,730
主要有以下几个

40
00:01:47,730 --> 00:01:49,530
那首先呢，公有

41
00:01:49,530 --> 00:01:51,650
那这是呢，比较常见的

42
00:01:51,650 --> 00:01:53,360
大家都能用私有

43
00:01:53,360 --> 00:01:55,340
那就是只有我们自己才能用

44
00:01:55,340 --> 00:02:00,140
一般呢，是用在我们的类内部里面

45
00:02:00,140 --> 00:02:02,660
所涉及到的一些属性成员

46
00:02:02,660 --> 00:02:06,810
哎，或者呢，一些函数成员给它定义为私有

47
00:02:06,810 --> 00:02:10,770
以及呢，我们常考的抽象修饰

48
00:02:10,770 --> 00:02:12,620
一定呢，要会写

49
00:02:12,620 --> 00:02:15,850
那抽象类它比较特殊

50
00:02:15,850 --> 00:02:19,710
抽象类里面一定至少包含一个

51
00:02:19,710 --> 00:02:21,970
抽象修饰的方法

52
00:02:21,970 --> 00:02:24,810
而抽象修饰的方法

53
00:02:24,810 --> 00:02:28,130
它是只有参数名和参数列表的

54
00:02:28,130 --> 00:02:32,110
没有或括号在内的具体实现

55
00:02:32,110 --> 00:02:34,330
那这是呢，修饰符

56
00:02:34,330 --> 00:02:36,720
最后呢，还有一个 final 修饰符

57
00:02:36,720 --> 00:02:40,940
它表示的是一个静态不可修改的数值了

58
00:02:40,940 --> 00:02:44,990
那这是我们呢，既看到的关于类修饰符

59
00:02:44,990 --> 00:02:46,280
或者叫做呢

60
00:02:46,280 --> 00:02:47,840
访问限制符

61
00:02:47,840 --> 00:02:50,560
访问控制符这样的一些说法啊

62
00:02:50,780 --> 00:02:53,160
针对于一个类而言的话

63
00:02:53,160 --> 00:02:57,140
它还可以呢，有一些上下的依赖关系

64
00:02:57,140 --> 00:03:00,620
那我们对类网上进行抽象的话

65
00:03:00,620 --> 00:03:02,440
可以呢形成父类

66
00:03:02,440 --> 00:03:05,040
或者呢，直接抽象成接口

67
00:03:05,040 --> 00:03:08,900
那我们如果说要继承某一个父类的话

68
00:03:08,900 --> 00:03:14,340
用关键字表示继承后面跟随它的父类名称

69
00:03:14,340 --> 00:03:15,980
或者叫做超类

70
00:03:15,980 --> 00:03:18,560
那这个关键字考试当中呢

71
00:03:18,560 --> 00:03:20,320
也经常出现

72
00:03:20,320 --> 00:03:21,850
那如果说我们啊

73
00:03:21,850 --> 00:03:24,210
网上抽象的是一个接口的话

74
00:03:24,210 --> 00:03:28,460
对于接口用实现关键字来表示

75
00:03:28,460 --> 00:03:31,810
唉，我们实现了某一个接口

76
00:03:31,810 --> 00:03:33,170
在这里啊

77
00:03:33,170 --> 00:03:34,390
我们重点呢

78
00:03:34,390 --> 00:03:39,280
掌握抽象以及继承和实现

79
00:03:39,280 --> 00:03:41,330
这三个关键字

80
00:03:41,330 --> 00:03:42,550
它的用法

81
00:03:42,550 --> 00:03:45,060
对于实现来看的话

82
00:03:45,060 --> 00:03:49,940
它是啊，由某一个类实现的一个接口

83
00:03:49,940 --> 00:03:52,610
所以看到实现关键字

84
00:03:52,610 --> 00:03:57,060
我们要知道后面跟随的是一个接口

85
00:03:57,060 --> 00:04:00,000
那如果上下文代码

86
00:04:00,000 --> 00:04:03,780
让你补充相应的这一部分

87
00:04:03,780 --> 00:04:05,800
它的类型关键字的话

88
00:04:05,800 --> 00:04:09,250
你要知道呢，它是接口就可以了

89
00:04:09,250 --> 00:04:12,560
其次呢，对于继承而言的话

90
00:04:12,560 --> 00:04:17,300
它所跟随的后面这一部分就是一个超类

91
00:04:17,300 --> 00:04:20,890
所以如果上下文要求补充的话

92
00:04:20,890 --> 00:04:25,210
这一部分它的关键字其实就是类 class 了

93
00:04:25,210 --> 00:04:31,200
这里呢，主要是为了区分继承和实现它的用法

94
00:04:33,860 --> 00:04:36,140
其次再来看一下呢

95
00:04:36,140 --> 00:04:38,480
关于抽象它的用法

96
00:04:38,480 --> 00:04:41,240
什么时候用抽象来修饰呢

97
00:04:41,240 --> 00:04:45,680
当我们发现在类它的内部里面呢

98
00:04:45,680 --> 00:04:47,040
存在一些方法

99
00:04:47,040 --> 00:04:50,260
并且这个方法成员函数啊

100
00:04:50,260 --> 00:04:53,080
以已经用抽象来修饰了

101
00:04:53,080 --> 00:04:58,960
那么它的类前面就必须要用抽象来修饰

102
00:04:58,960 --> 00:05:01,060
这里呢，要注意

103
00:05:01,060 --> 00:05:06,190
那这是我们填写抽象类修饰符的依据

104
00:05:06,190 --> 00:05:07,490
同理啊

105
00:05:07,490 --> 00:05:13,040
如果我们在前面看到了抽象修饰的类

106
00:05:13,040 --> 00:05:16,970
那么在它的内部成员当中啊

107
00:05:16,970 --> 00:05:20,810
我们要知道至少需要存在一个呢

108
00:05:20,810 --> 00:05:22,580
抽抽象函数

109
00:05:22,580 --> 00:05:23,980
那这是呢

110
00:05:23,980 --> 00:05:27,320
关于我们提到的抽象的用法

111
00:05:27,450 --> 00:05:30,430
抽象修饰的成员函数

112
00:05:30,430 --> 00:05:32,950
它有返回值类型

113
00:05:32,950 --> 00:05:36,020
有它的函数名称

114
00:05:36,020 --> 00:05:38,340
也可以有参数列表

115
00:05:38,340 --> 00:05:43,120
但是注意后面是没有或括号跟随的

116
00:05:43,120 --> 00:05:44,380
具体实现的

117
00:05:44,380 --> 00:05:47,500
这是抽象函数的特点

118
00:05:47,500 --> 00:05:50,200
那我们在修饰抽象的时候

119
00:05:50,200 --> 00:05:53,760
前面也可以跟随 public 来修饰

120
00:05:53,760 --> 00:05:56,090
当然你也可以呢不写

121
00:05:56,090 --> 00:05:59,140
这里呢，影响并不是很大

122
00:05:59,140 --> 00:06:02,160
因为不写的时候缺省情况下

123
00:06:02,160 --> 00:06:04,080
它是呢保护类型

124
00:06:04,080 --> 00:06:06,650
孢类呢，是可以使用的

125
00:06:06,650 --> 00:06:09,550
那这是呢，关于我们三个关键字

126
00:06:09,550 --> 00:06:10,940
它的用法

127
00:06:10,940 --> 00:06:13,620
后面呢，我们来看一下，哎

128
00:06:13,620 --> 00:06:16,020
具体的一些填空形式

129
00:06:16,020 --> 00:06:18,250
这里做了一些截取

130
00:06:18,250 --> 00:06:20,070
首先我们看到呢

131
00:06:20,070 --> 00:06:23,230
上面给了我们一个具体的类

132
00:06:23,230 --> 00:06:24,840
叫做 department 

133
00:06:24,840 --> 00:06:27,220
后面呢，又给了一个类

134
00:06:27,220 --> 00:06:29,840
叫做呢， sucserver department 

135
00:06:29,840 --> 00:06:34,140
那后面接下来填写的内容是什么呢

136
00:06:34,140 --> 00:06:36,910
这是类它的具体内涵吧

137
00:06:36,910 --> 00:06:40,690
那我们这个类有什么样的特点呢

138
00:06:40,690 --> 00:06:44,720
后面应该是有继承或者实现的

139
00:06:44,720 --> 00:06:46,230
那我们会发现

140
00:06:46,230 --> 00:06:49,110
department 跟上面的命名

141
00:06:49,110 --> 00:06:52,190
其实是有一定的一致性关系

142
00:06:52,190 --> 00:06:53,850
所以这里呀

143
00:06:53,850 --> 00:06:57,090
他继承了上面的父类

144
00:06:57,090 --> 00:07:00,780
所以这里填写的应该是继承

145
00:07:00,780 --> 00:07:05,350
并且后面跟随上面的父类名称

146
00:07:05,350 --> 00:07:08,660
也可以叫做呢，超类名称

147
00:07:08,660 --> 00:07:09,920
那这是呢

148
00:07:09,920 --> 00:07:12,610
对继承的使用

149
00:07:12,610 --> 00:07:15,570
如果说我们在这里呢

150
00:07:15,570 --> 00:07:18,120
看到了某一个类

151
00:07:18,120 --> 00:07:20,820
然后呢，这个类当中啊

152
00:07:20,820 --> 00:07:24,940
包含了抽象修饰的函数

153
00:07:24,940 --> 00:07:26,150
那我们，诶

154
00:07:26,150 --> 00:07:29,170
如果说包含了抽象修饰

155
00:07:29,170 --> 00:07:32,640
此时类修饰符一定呢

156
00:07:32,640 --> 00:07:34,960
也要用类来，哎

157
00:07:34,960 --> 00:07:37,830
用我们的抽象来修饰

158
00:07:37,830 --> 00:07:41,040
那这里的拼写一定要注意

159
00:07:41,040 --> 00:07:43,210
关键字不要写错了

160
00:07:43,210 --> 00:07:44,460
我们发现呢

161
00:07:44,460 --> 00:07:46,840
唉，下面还有一个类

162
00:07:46,840 --> 00:07:49,480
它继承了上面的抽象

163
00:07:49,480 --> 00:07:51,780
类继承之后啊

164
00:07:51,780 --> 00:07:54,420
我们对父类抽象

165
00:07:54,420 --> 00:07:57,080
父类所包含的抽象方

166
00:07:57,080 --> 00:07:59,100
一定呢，要继

167
00:07:59,100 --> 00:08:00,780
并且进行覆盖

168
00:08:00,780 --> 00:08:03,750
重写它的具体实现内容

169
00:08:03,750 --> 00:08:07,420
所以在下面缺失的部

170
00:08:07,420 --> 00:08:11,950
填写的就是呢，上面的抽象函数

171
00:08:11,950 --> 00:08:14,100
但是它不再抽象呢

172
00:08:14,100 --> 00:08:17,720
它可以可以有具体的实现内容

173
00:08:17,720 --> 00:08:22,500
这里缺失需要补充的是成员函数，哎

174
00:08:22,500 --> 00:08:24,570
它的另一个修饰符

175
00:08:24,570 --> 00:08:28,040
然后返回值类型为空

176
00:08:28,040 --> 00:08:34,409
以及对应的函数名称和参数列表

177
00:08:34,409 --> 00:08:39,000
注意，如果参数列表当中有东西的话

178
00:08:39,000 --> 00:08:41,970
同样呢，照抄下来就可以了

179
00:08:41,970 --> 00:08:46,800
那后面的或括号在代码当中已经包含

180
00:08:46,800 --> 00:08:48,380
不需要大家填写了

181
00:08:48,380 --> 00:08:49,810
所以这一部分啊

182
00:08:49,810 --> 00:08:53,690
就是呢将上面的函数呢，照抄下来

183
00:08:53,690 --> 00:08:57,390
注意呢，不要再写抽象修饰就可以了

184
00:08:57,390 --> 00:09:00,270
这是啊，我们在填空的时候

185
00:09:00,270 --> 00:09:05,420
对继承以及呢对抽象相关的填空题型

186
00:09:06,110 --> 00:09:11,160
下面呢，唉，我们详细来看一下接口这一部分

187
00:09:11,160 --> 00:09:13,820
接口它是特殊的类

188
00:09:13,820 --> 00:09:18,530
那它的特殊在代码上是如何来体现的呢

189
00:09:18,530 --> 00:09:22,960
首先接口它的关键字不再是 class 了

190
00:09:22,960 --> 00:09:25,200
而是呢用 it interface 来表示

191
00:09:25,200 --> 00:09:26,410
这是一个接口

192
00:09:26,410 --> 00:09:28,880
后面跟随接口名

193
00:09:28,880 --> 00:09:31,990
当然接口也可以继承副接口

194
00:09:31,990 --> 00:09:33,910
但是这一类继承的话

195
00:09:33,910 --> 00:09:35,990
目前在我们的软设当中呢

196
00:09:35,990 --> 00:09:38,380
还没有考察过大家啊

197
00:09:38,380 --> 00:09:40,680
那在接口当中

198
00:09:40,680 --> 00:09:44,150
它可以呢去定义一些常量

199
00:09:44,150 --> 00:09:48,000
还可以呢去定义一些函数方法

200
00:09:48,000 --> 00:09:50,350
注意我们的抽

201
00:09:50,350 --> 00:09:53,400
我们的整个接口当中啊

202
00:09:53,400 --> 00:09:57,500
所有的成员函数都是抽象的

203
00:09:57,500 --> 00:10:01,910
所有方法都没有具体实现

204
00:10:14,020 --> 00:10:17,480
也就是说，我们在接口当中啊

205
00:10:17,480 --> 00:10:19,130
去写方法的时候

206
00:10:19,130 --> 00:10:22,460
都只有名称和它的参数列表吧

207
00:10:22,460 --> 00:10:25,020
没有后括号体现的，诶

208
00:10:25,020 --> 00:10:26,900
它的具体实现的内容

209
00:10:26,900 --> 00:10:28,870
那大家都是抽象的

210
00:10:28,870 --> 00:10:32,160
其实我们就没有必要去填写抽象修饰了

211
00:10:32,160 --> 00:10:33,910
所以大家会看到呢

212
00:10:33,910 --> 00:10:35,830
在接口当中啊

213
00:10:35,830 --> 00:10:38,700
它的方法没有用抽象来修饰

214
00:10:38,700 --> 00:10:42,800
但所有的方法都是呢，没有具体实现

215
00:10:42,800 --> 00:10:44,910
没有方法体的

216
00:10:44,910 --> 00:10:47,760
那针对接口来看的话

217
00:10:47,760 --> 00:10:52,450
一个接口我们不叫它继承了

218
00:10:52,450 --> 00:10:56,590
而是呢，对接口来进行实现

219
00:10:56,590 --> 00:10:58,500
实现的关键字

220
00:10:58,500 --> 00:11:02,190
接口的关键字拼写不要错误

221
00:11:02,190 --> 00:11:06,170
注意接口它的成员函数的特点

222
00:11:06,170 --> 00:11:09,940
那这是我们呢，在考试当中也会呢

223
00:11:09,940 --> 00:11:11,960
经常考到的一个点

224
00:11:11,960 --> 00:11:16,320
下面呢，我们来看一下简单的一个例子

225
00:11:16,320 --> 00:11:18,920
在上面的代码当中呢

226
00:11:18,920 --> 00:11:21,620
我们发现这个代码只有一个框架

227
00:11:21,620 --> 00:11:24,060
一个名字加上一个后括号

228
00:11:24,060 --> 00:11:26,640
那它的修饰没有

229
00:11:26,640 --> 00:11:32,170
然后呢，后面所跟随的具体内涵也没有看到

230
00:11:32,170 --> 00:11:36,390
那从哪里来找到它的相关内容呢

231
00:11:36,390 --> 00:11:39,340
我们发现下面的这段代码

232
00:11:39,340 --> 00:11:43,400
有一个类实现了一个接口吧

233
00:11:43,400 --> 00:11:45,380
那这个接口在哪里呢

234
00:11:45,380 --> 00:11:49,020
就是我们在上面看到的框架

235
00:11:49,020 --> 00:11:54,210
所以第一个填空部分填写的这个 join 呢

236
00:11:54,210 --> 00:11:55,930
它是一个接口

237
00:11:55,930 --> 00:11:57,870
而不是 L 

238
00:11:57,870 --> 00:12:00,310
那有了接口之后

239
00:12:00,310 --> 00:12:03,260
我们的类对接口加以实现

240
00:12:03,260 --> 00:12:06,340
我们说涉及到抽象方法的话

241
00:12:06,340 --> 00:12:09,680
子类一定要去实现所有的抽象

242
00:12:09,680 --> 00:12:13,800
那我们现在实现接口同样如此

243
00:12:14,060 --> 00:12:17,740
这个类它实现了我们的接口

244
00:12:17,740 --> 00:12:23,770
那接口当中所有的抽象方法也要呢，加以实现

245
00:12:23,770 --> 00:12:28,970
那我们下面现在给出的两个函数是什么

246
00:12:28,970 --> 00:12:32,360
就是上面缺失的抽象方法吧

247
00:12:32,360 --> 00:12:34,880
那这种抽象的成员函数

248
00:12:34,880 --> 00:12:39,970
我们在这里只需要把框架填写进去

249
00:12:39,970 --> 00:12:42,010
包括它的诶

250
00:12:42,010 --> 00:12:43,260
修饰类型

251
00:12:43,260 --> 00:12:46,300
然后呢，返回值类型为空

252
00:12:46,300 --> 00:12:49,400
它的名称以及参数列表

253
00:12:49,400 --> 00:12:52,460
注意参数列表是不能省略的

254
00:12:52,460 --> 00:12:56,580
那后面的或括号全部就不需要了

255
00:12:56,580 --> 00:12:59,000
将这两个方法

256
00:12:59,000 --> 00:13:01,290
也就是呢，两个成员函数啊

257
00:13:01,290 --> 00:13:04,640
把它照抄上去就可以呢

258
00:13:04,640 --> 00:13:06,880
唉，填完我们的填空呢

259
00:13:06,880 --> 00:13:10,900
所以这里呢，其实占据了我们所有代码

260
00:13:10,900 --> 00:13:13,200
填空将近一半的分值

261
00:13:13,200 --> 00:13:14,880
但是它的来源

262
00:13:14,880 --> 00:13:19,680
很显然从代码上下文就能够找到了

263
00:13:19,680 --> 00:13:21,420
那这是我们呢

264
00:13:21,420 --> 00:13:24,990
对于接口以及实现类关系啊

265
00:13:24,990 --> 00:13:26,940
进行判别的时候呢

266
00:13:26,940 --> 00:13:30,360
可以给我们做题带来的一个便利
