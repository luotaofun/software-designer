1
00:00:00,000 --> 00:00:03,220
我们首先看到对于数组，数组啊

2
00:00:03,220 --> 00:00:05,520
它其实是典型的一个线性结构

3
00:00:05,520 --> 00:00:08,290
那我们经常看到的 A 100

4
00:00:08,290 --> 00:00:09,890
这样的一维数组啊

5
00:00:09,890 --> 00:00:11,870
它本身就是线性的

6
00:00:11,870 --> 00:00:14,420
但是数组是不是简单的一维呢

7
00:00:14,420 --> 00:00:17,640
它还可以存在行列、二维的形式

8
00:00:17,640 --> 00:00:19,550
甚至三维的形式

9
00:00:19,550 --> 00:00:22,760
那针对这种二维形式的数组

10
00:00:22,760 --> 00:00:26,580
我们又该如何用存储来进行表示

11
00:00:26,580 --> 00:00:28,020
就是我们这一部分啊

12
00:00:28,020 --> 00:00:30,210
主要给大家讲到的内容

13
00:00:30,210 --> 00:00:32,360
针对数组来看的话

14
00:00:32,360 --> 00:00:35,500
我们首先先理解一个概念啊

15
00:00:35,500 --> 00:00:38,950
我们在对于数组定义的时候

16
00:00:38,950 --> 00:00:43,510
数组的每一个元素都是同一个类型的

17
00:00:43,510 --> 00:00:46,160
那它可以是整形

18
00:00:46,160 --> 00:00:48,260
可以呢是字符类型

19
00:00:48,260 --> 00:00:51,060
甚至它可以是数据结构当中啊

20
00:00:51,060 --> 00:00:54,340
是结构体组成的一个数据元素

21
00:00:54,340 --> 00:00:55,470
那我们想一想

22
00:00:55,470 --> 00:00:57,110
这个元素它的地址

23
00:00:57,110 --> 00:00:58,970
它的长度是不是存在啊

24
00:00:58,970 --> 00:01:03,270
一个元素它本身会占据到一些地质空间

25
00:01:03,270 --> 00:01:07,780
那比如说我们在日常生活当中的地址当中

26
00:01:07,780 --> 00:01:10,970
唉，我们说在某一个区域

27
00:01:10,970 --> 00:01:13,410
我们放了一个大的箱子

28
00:01:13,410 --> 00:01:15,230
或者呢排了一个队

29
00:01:15,230 --> 00:01:17,000
那排了一个队之后

30
00:01:17,000 --> 00:01:18,460
这里是100

31
00:01:18,460 --> 00:01:20,260
这里是120

32
00:01:20,260 --> 00:01:23,200
那我们给这一部分写地址的时候

33
00:01:23,200 --> 00:01:24,080
会写多少

34
00:01:24,080 --> 00:01:26,470
会写起始地址吧

35
00:01:26,470 --> 00:01:29,570
所以我们看到的元素地址

36
00:01:29,570 --> 00:01:32,050
它的表示其实都是

37
00:01:32,050 --> 00:01:34,570
对起始地址它的考虑

38
00:01:34,570 --> 00:01:38,380
那在一个一维数组当中

39
00:01:38,950 --> 00:01:43,590
它的数组名我们一般会作为起始地址

40
00:01:43,590 --> 00:01:46,240
一个数组，它的初始地址

41
00:01:46,240 --> 00:01:48,450
那针对这个初始地址

42
00:01:48,450 --> 00:01:51,690
接下来所存储的元素是 A 0

43
00:01:51,690 --> 00:01:55,880
然后是 A 1直到 an 吧

44
00:01:55,880 --> 00:01:58,820
这是一个一维数组，它的形式

45
00:01:58,820 --> 00:02:01,080
那 A 0的地址是多少

46
00:02:01,080 --> 00:02:03,700
显然 A 0的地址是 A 吧

47
00:02:03,700 --> 00:02:06,350
那 A 1的地址是多少呢

48
00:02:06,350 --> 00:02:11,860
哎， A 1的地址应该是这个元素的起始部分

49
00:02:11,860 --> 00:02:14,960
它是在 A 的地址基础上

50
00:02:14,960 --> 00:02:17,740
增加了一个元素的长度

51
00:02:17,740 --> 00:02:21,320
所以它的地址是 A 加上 N 

52
00:02:21,320 --> 00:02:24,380
也就是元素长度的定义

53
00:02:24,380 --> 00:02:27,190
那第 I 个元素，诶

54
00:02:27,190 --> 00:02:30,470
AI 它的存储地址是多少呢

55
00:02:30,470 --> 00:02:33,470
我们首先要判断元素 I 

56
00:02:33,470 --> 00:02:36,870
它的地址应该是起始地址

57
00:02:36,870 --> 00:02:40,810
所以前面所包含的元素个数

58
00:02:40,810 --> 00:02:43,250
应该是零到 A 减一的

59
00:02:43,250 --> 00:02:45,500
下标一共有多少呢

60
00:02:45,500 --> 00:02:48,090
0~9有十个数啊

61
00:02:48,090 --> 00:02:49,790
零到 I 减一

62
00:02:49,790 --> 00:02:51,850
它有 I 个数

63
00:02:51,850 --> 00:02:55,490
所以前面已经存了 I 个元素

64
00:02:55,490 --> 00:03:00,580
这种地址更一般可以理解为偏移量

65
00:03:00,580 --> 00:03:03,700
从起始地址 A 开始

66
00:03:03,700 --> 00:03:07,670
加上呢数组元素给出的偏移量

67
00:03:07,670 --> 00:03:11,910
所以可以呢写作 A 加上 I 乘以 LEN 

68
00:03:11,910 --> 00:03:13,990
这是呢一维数组

69
00:03:13,990 --> 00:03:16,660
它的呢存储地址的计算

70
00:03:16,660 --> 00:03:18,560
A 是起始地址

71
00:03:18,560 --> 00:03:21,680
I 是前面的元素个数

72
00:03:21,680 --> 00:03:25,970
注意：这是 I 0到 I 减

73
00:03:25,970 --> 00:03:28,290
一共 I 个元素

74
00:03:28,290 --> 00:03:31,050
它的存储地址长度

75
00:03:31,550 --> 00:03:36,270
下一个位置才是 AI 它的起始位置

76
00:03:36,270 --> 00:03:38,420
这个地方呢，一定要注意啊

77
00:03:38,420 --> 00:03:42,040
我们给出的元素不是元素结束的位置

78
00:03:42,040 --> 00:03:44,410
而是它的起始位置

79
00:03:44,410 --> 00:03:47,190
那对于一个二维数组来说

80
00:03:47,190 --> 00:03:49,890
它有 A 、 A 、 MN 的话

81
00:03:49,890 --> 00:03:52,870
这是 M 行 N 列

82
00:03:53,850 --> 00:03:58,570
对于 M 行 N 列的二维数组来看的话

83
00:03:58,570 --> 00:04:03,050
那我们唉，能不能给它分配一个正方形的区域

84
00:04:03,050 --> 00:04:04,780
按行列来数啊

85
00:04:04,780 --> 00:04:06,000
无法分

86
00:04:06,000 --> 00:04:07,820
所以我们一般呢

87
00:04:07,820 --> 00:04:10,690
是转成一维数组来存储的

88
00:04:10,690 --> 00:04:12,000
如何转呢

89
00:04:12,000 --> 00:04:15,340
我们可以一行一行地去存

90
00:04:15,340 --> 00:04:18,260
也可以一列一列地去存

91
00:04:18,260 --> 00:04:23,150
所以有按行存储和按列存储的方式

92
00:04:23,150 --> 00:04:27,320
那对于行列不同有什么样的区别呢

93
00:04:27,320 --> 00:04:30,330
我们稍后来看一下它的存储过程

94
00:04:30,330 --> 00:04:32,500
那这里有一些细节的地方

95
00:04:32,500 --> 00:04:33,700
大家注意一下

96
00:04:33,700 --> 00:04:35,700
对于数组来说

97
00:04:35,700 --> 00:04:37,260
默认

98
00:04:38,370 --> 00:04:41,610
下标从零开始

99
00:04:43,060 --> 00:04:45,340
那是不是都是呢

100
00:04:45,340 --> 00:04:48,680
题目会给出一些特殊的定义

101
00:04:48,680 --> 00:04:55,810
比如说 A 1到 M 0到 N 

102
00:04:55,810 --> 00:05:00,610
那这里表示的就是下标一个从一开始

103
00:05:00,610 --> 00:05:03,040
一个呢从零开始

104
00:05:03,040 --> 00:05:05,050
行号可以从一开始

105
00:05:05,050 --> 00:05:07,090
列号从零开始

106
00:05:07,090 --> 00:05:09,320
这就是呢，它的自由定义

107
00:05:09,320 --> 00:05:12,700
所以大家在看题的时候要注意，呃

108
00:05:12,700 --> 00:05:14,120
仔细的去审题

109
00:05:14,120 --> 00:05:16,820
根据题目的条件来计算

110
00:05:16,820 --> 00:05:18,680
那我们再来看诶

111
00:05:18,680 --> 00:05:20,560
二维数组转存的时候

112
00:05:20,560 --> 00:05:22,810
假设按行来存

113
00:05:22,810 --> 00:05:26,540
那我们首先第一个 A 00

114
00:05:26,540 --> 00:05:30,960
它的元素是不是仍然是我们的 A 

115
00:05:30,960 --> 00:05:33,540
A 00是第一个数据元素

116
00:05:33,540 --> 00:05:36,810
所以我们转存的时候它会放在呢

117
00:05:36,810 --> 00:05:40,830
唉，起始位置 A 00的地址是 A 

118
00:05:40,830 --> 00:05:44,630
那 A 11、 A 10、 A 01

119
00:05:44,630 --> 00:05:48,320
它的地址如果是按行存的话

120
00:05:48,320 --> 00:05:50,600
就放在第一个元素位置吧

121
00:05:50,600 --> 00:05:53,180
所以是 A 加上 L 、 E 、 N 

122
00:05:53,180 --> 00:05:56,530
那我们求 AI 接的话

123
00:06:00,160 --> 00:06:06,360
它的实质是求出在这个元素之

124
00:06:06,360 --> 00:06:08,380
所存储的，诶

125
00:06:08,380 --> 00:06:12,690
所有元素的个数加上偏移量，诶

126
00:06:12,690 --> 00:06:14,810
加上乘乘以我们的长度

127
00:06:14,810 --> 00:06:16,270
加上起始地址吧

128
00:06:16,270 --> 00:06:20,360
那具体前面有多少个元素呢

129
00:06:20,360 --> 00:06:23,020
我们首先按行存考虑

130
00:06:23,020 --> 00:06:26,140
前面完整地存了多少个行

131
00:06:26,140 --> 00:06:30,390
那这里是 AI 接 I 行 J 列

132
00:06:30,390 --> 00:06:34,390
说明前面应该是零到 I 减一

133
00:06:34,390 --> 00:06:38,580
那这里应该是由挨个行

134
00:06:38,580 --> 00:06:42,540
所以前面挨个行全部都存了

135
00:06:42,540 --> 00:06:44,980
每一行有多少个元素呢

136
00:06:44,980 --> 00:06:45,910
注意啊

137
00:06:45,910 --> 00:06:48,430
它有 M 行 N 列

138
00:06:48,430 --> 00:06:52,050
所以垂直一列有 M 行

139
00:06:52,050 --> 00:06:55,010
水平一行有 M 列

140
00:06:55,010 --> 00:06:59,980
所以它的总元素应该是 I 乘以 M 

141
00:06:59,980 --> 00:07:01,470
结束了吗

142
00:07:01,470 --> 00:07:05,450
哎，我们在当前这一行第 I 行

143
00:07:05,450 --> 00:07:08,520
还有一些元素没有处理

144
00:07:08,520 --> 00:07:09,910
这些元素

145
00:07:09,910 --> 00:07:12,730
它的下标应该是 I 

146
00:07:12,730 --> 00:07:14,840
零到接减一吧

147
00:07:14,840 --> 00:07:18,250
所以前面还有接个元素

148
00:07:18,250 --> 00:07:20,300
这就是呢 X 

149
00:07:20,300 --> 00:07:24,110
那我们把前面的元素都求出来之后

150
00:07:24,110 --> 00:07:25,930
下一个位置才是呢

151
00:07:25,930 --> 00:07:28,500
该元素 AIJ 的起始位置吧

152
00:07:28,500 --> 00:07:31,070
所以它的按行存

153
00:07:31,070 --> 00:07:32,870
应该它的地址啊

154
00:07:32,870 --> 00:07:37,270
应该是 A 加上 I 乘以 N 加上 JL 

155
00:07:37,270 --> 00:07:38,910
这里不应该是 M 

156
00:07:38,910 --> 00:07:43,320
因为它应该是每一行有 N 个列

157
00:07:43,320 --> 00:07:45,910
所以这里是 I 乘以 N 

158
00:07:45,910 --> 00:07:48,580
这个地方呢，应该是等于 N 的

159
00:07:48,580 --> 00:07:53,220
那它的整个地址是从起始地址 A 开始

160
00:07:53,220 --> 00:07:55,760
加上偏移量元素个

161
00:07:55,760 --> 00:07:57,760
I 乘以 N 加接

162
00:07:57,760 --> 00:08:02,260
然后呢乘以每一个元素它的长度

163
00:08:02,260 --> 00:08:04,070
这是按行存

164
00:08:04,070 --> 00:08:06,340
那如果按列存呢

165
00:08:06,340 --> 00:08:10,090
唉，我们也可以把数据分两个部分

166
00:08:10,090 --> 00:08:13,530
一个是完整存储的列，有多少列

167
00:08:13,530 --> 00:08:15,290
零到接减一

168
00:08:15,290 --> 00:08:16,970
应该有接个列吧

169
00:08:16,970 --> 00:08:19,020
每一列有 M 行

170
00:08:19,020 --> 00:08:21,600
所以应该是阶乘以 M 

171
00:08:21,600 --> 00:08:24,390
是前面存储的元素总数

172
00:08:24,390 --> 00:08:27,210
那第 J 行存了多少个元素呢

173
00:08:27,210 --> 00:08:30,090
哎，应该是零到 I 减一

174
00:08:30,090 --> 00:08:32,559
所以应该是 I 个元素

175
00:08:32,559 --> 00:08:36,900
那这些元素的长度是乘以 L 1 N 

176
00:08:36,900 --> 00:08:39,440
再加上起始地址 A 

177
00:08:39,440 --> 00:08:43,500
这就是它的按列存储地址标识

178
00:08:43,500 --> 00:08:49,180
注意呢，搞清楚 M 行 N 列它所对应的含义

179
00:08:49,180 --> 00:08:51,730
那下面给了大家一个例子

180
00:08:51,730 --> 00:08:55,350
已知五行五列的二维数组 A 当中

181
00:08:55,350 --> 00:08:58,630
各元素啊是占据两个字节的

182
00:08:58,630 --> 00:09:00,880
那对元素诶

183
00:09:00,880 --> 00:09:04,080
A 2、三按行优先存储的话

184
00:09:04,080 --> 00:09:07,410
它的存储地址应该是多少呢

185
00:09:07,410 --> 00:09:09,970
我们可以简单地画个图

186
00:09:09,970 --> 00:09:14,860
五行五列的元素下标默认从零开始

187
00:09:14,860 --> 00:09:18,850
所以行列分别是0~4

188
00:09:18,850 --> 00:09:23,230
那现在我们采用的是暗行优先

189
00:09:23,230 --> 00:09:28,540
唉， A 2、三在这里按行优先分两部分吧

190
00:09:28,540 --> 00:09:30,880
全部存储的应该呢

191
00:09:30,880 --> 00:09:34,360
诶，是到零到 I 减一

192
00:09:34,360 --> 00:09:36,740
也就是0~2行

193
00:09:36,740 --> 00:09:38,220
0~1行

194
00:09:38,220 --> 00:09:41,110
0~1行一共有两行

195
00:09:41,110 --> 00:09:42,890
每行有多少个

196
00:09:42,890 --> 00:09:44,390
诶，元素呢

197
00:09:44,390 --> 00:09:45,610
五行五列

198
00:09:45,610 --> 00:09:47,270
一行有五个列

199
00:09:47,270 --> 00:09:50,000
所以应该是2×5列

200
00:09:50,000 --> 00:09:53,790
那我们这里的，呃，两行啊

201
00:09:53,790 --> 00:09:56,570
存储的数据元素个数是十个吧

202
00:09:56,570 --> 00:09:59,500
当前行，诶，应该是接

203
00:09:59,500 --> 00:10:03,110
那这里是基零到接减

204
00:10:03,110 --> 00:10:06,410
0~2有三个元素

205
00:10:06,410 --> 00:10:07,480
那这里呢

206
00:10:07,480 --> 00:10:09,600
哎，一共有13个元素

207
00:10:09,600 --> 00:10:12,940
代存长度是两个字节

208
00:10:12,940 --> 00:10:18,910
所以地址是 A 加上十二十六 B 

209
00:10:19,900 --> 00:10:22,900
0+26字节

210
00:10:22,900 --> 00:10:25,560
那我们再延伸一下

211
00:10:25,560 --> 00:10:28,180
如果它是按列来存呢

212
00:10:28,180 --> 00:10:30,800
那我们同样分两部分

213
00:10:30,800 --> 00:10:31,790
这是阶

214
00:10:31,790 --> 00:10:34,130
这是零到阶减一吧

215
00:10:34,130 --> 00:10:36,690
零到3-1，就是0~2

216
00:10:36,690 --> 00:10:38,320
有三个行

217
00:10:38,320 --> 00:10:40,630
每行有多少个元素呢

218
00:10:40,630 --> 00:10:41,990
哎，三个列啊

219
00:10:41,990 --> 00:10:44,100
每列有多少个元素呢

220
00:10:44,100 --> 00:10:47,230
每列都有 M ，行有五个

221
00:10:47,230 --> 00:10:48,830
所以乘以五

222
00:10:48,830 --> 00:10:51,700
再加上当前列，哎

223
00:10:51,700 --> 00:10:53,860
零到 I 减一

224
00:10:54,280 --> 00:10:56,640
那这是呢，第 I 行

225
00:10:56,640 --> 00:10:58,700
应该呢是0~1

226
00:10:58,700 --> 00:11:01,310
也就是呢两个元素

227
00:11:01,310 --> 00:11:06,890
那每个元素占据的空间长度是两个字节

228
00:11:06,890 --> 00:11:10,190
所以它的地址应该是起始地址

229
00:11:10,190 --> 00:11:13,930
A 加上34 B 

230
00:11:14,180 --> 00:11:18,180
那这是呢，按列存储的情况

231
00:11:18,180 --> 00:11:21,170
这就是二维数组它的转存

232
00:11:21,170 --> 00:11:26,560
注意它的下标以及行列它的具体位置

233
00:11:26,560 --> 00:11:28,890
这些细节呢，不要搞错了

234
00:11:28,890 --> 00:11:31,660
那我们来看一下这种，诶

235
00:11:31,660 --> 00:11:33,400
关于数组转存

236
00:11:33,400 --> 00:11:37,550
在我们软件设计师考试真题当中的体现

237
00:11:37,550 --> 00:11:41,150
二维数组 A 1到 N ，一到 N 

238
00:11:41,150 --> 00:11:44,760
注意这里是从一开始编号的

239
00:11:44,760 --> 00:11:48,390
那我们简单画一个二维数组

240
00:11:48,390 --> 00:11:49,930
它的下标

241
00:11:49,930 --> 00:11:51,650
哎，应该是

242
00:11:55,940 --> 00:12:00,260
都是从一开始到 N 结束

243
00:12:00,260 --> 00:12:03,420
一开始到 N 结束

244
00:12:03,420 --> 00:12:05,420
这是它的行列号

245
00:12:05,420 --> 00:12:08,460
那对于 AIJ 来看的话

246
00:12:08,460 --> 00:12:11,210
当谁等于谁的时候

247
00:12:11,210 --> 00:12:14,230
那这两个暗行和按列

248
00:12:14,230 --> 00:12:17,650
两种方式存储偏移量相同呢

249
00:12:17,650 --> 00:12:21,500
那我们首先按行来存的话

250
00:12:23,500 --> 00:12:27,240
起始地址是 AIJ 

251
00:12:27,240 --> 00:12:32,690
它的哎， AI 接的话按行能存来存

252
00:12:32,690 --> 00:12:36,660
前面有一到 I 减一行吧

253
00:12:36,660 --> 00:12:39,730
那一共应该只有 A 减一

254
00:12:39,730 --> 00:12:41,710
唉， I 减一

255
00:12:41,710 --> 00:12:45,050
每一行有多少个元素呢

256
00:12:45,050 --> 00:12:49,320
每一行有一到 NN 个元素

257
00:12:51,100 --> 00:12:56,680
当前未存完的应该是一到阶有阶个元素吧

258
00:12:56,680 --> 00:12:59,000
哎，应该是接减一个元素吧

259
00:12:59,000 --> 00:13:00,800
加上阶减一

260
00:13:00,800 --> 00:13:06,180
那每一个元素乘以它的长度 L 1 N 

261
00:13:06,180 --> 00:13:09,470
那这是按行存储的情况

262
00:13:12,020 --> 00:13:15,020
再来看按列来存

263
00:13:18,320 --> 00:13:21,840
那起始地址 A 加上

264
00:13:24,620 --> 00:13:27,460
我们当前第 J 列吧

265
00:13:27,460 --> 00:13:30,220
前面有一到阶减一

266
00:13:30,220 --> 00:13:32,540
应该是 J 减一个列

267
00:13:32,540 --> 00:13:36,200
每个列它有呢 N 个元素吧

268
00:13:36,200 --> 00:13:39,660
每个列有一到 N 行 N 个元素

269
00:13:39,660 --> 00:13:42,030
当前列没有存完的

270
00:13:42,030 --> 00:13:44,190
应该是 I 减一

271
00:13:44,190 --> 00:13:46,130
那这种情况下

272
00:13:46,130 --> 00:13:49,520
所有的元素个数乘以它的长度

273
00:13:49,520 --> 00:13:53,450
什么时候它们的偏移量相同呢

274
00:13:53,450 --> 00:13:57,250
其实这种题目我们根据它的选项来看的话

275
00:13:57,250 --> 00:13:58,630
I 不等于 J 

276
00:13:58,630 --> 00:13:59,950
简单举个例子

277
00:13:59,950 --> 00:14:00,800
a 12

278
00:14:00,800 --> 00:14:02,750
我们对于 A 12啊

279
00:14:02,750 --> 00:14:04,770
看一看按行存的话

280
00:14:04,770 --> 00:14:06,170
它存了多少行啊

281
00:14:06,170 --> 00:14:08,140
A 12就在这里吧

282
00:14:08,140 --> 00:14:09,460
前面没有存

283
00:14:09,460 --> 00:14:12,520
只是呢存了，哎，第一个元素

284
00:14:12,520 --> 00:14:15,520
所以它其实偏移量只有一个元素长度

285
00:14:15,520 --> 00:14:16,720
按列存的话

286
00:14:16,720 --> 00:14:20,020
前面存了，诶， N 1列 N 个元素了吧

287
00:14:20,020 --> 00:14:22,120
所以它是 N 个元素的长度

288
00:14:22,120 --> 00:14:23,320
这样来看的话

289
00:14:23,320 --> 00:14:25,870
显然偏移量是不一样的

290
00:14:25,870 --> 00:14:28,210
而 B 选项简单举个例子

291
00:14:28,210 --> 00:14:30,310
a00 a a 11

292
00:14:30,310 --> 00:14:34,230
那 A 11肯定是存在当前第一个元素位置吧

293
00:14:34,230 --> 00:14:35,390
不管你怎么存

294
00:14:35,390 --> 00:14:37,900
按行、按列它都是一样的

295
00:14:37,900 --> 00:14:40,050
所以 B 选项当中啊

296
00:14:40,050 --> 00:14:42,930
按行按列当 I 等于 J 的时候

297
00:14:42,930 --> 00:14:44,990
它们的结果是一样的

298
00:14:44,990 --> 00:14:47,900
那我们在这里从表达式的角

299
00:14:47,900 --> 00:14:51,640
把 I 、 J 呢统一作为同一个数值的话

300
00:14:51,640 --> 00:14:54,190
它们呢，仍然是相等的吧

301
00:14:54,190 --> 00:14:55,780
所以这种问题一般呢

302
00:14:55,780 --> 00:14:58,180
可以找特殊的事例去验证

303
00:14:58,180 --> 00:15:02,360
也可以呢从公式的角度来进行分析

304
00:15:02,360 --> 00:15:04,830
那其实 I 不等于 J 

305
00:15:04,830 --> 00:15:05,850
I 大于 J 

306
00:15:05,850 --> 00:15:09,570
I 小于 J 都是呢普遍存在的一种情况

307
00:15:09,570 --> 00:15:14,190
I 等于 J 是相对来说更特殊的数值了

308
00:15:14,190 --> 00:15:18,630
那这是呢，关于二维数组转存的分析过程

309
00:15:18,630 --> 00:15:20,820
大家在做这类问题的时候

310
00:15:20,820 --> 00:15:23,950
一定要注意下标从哪里开始

311
00:15:23,950 --> 00:15:26,340
具体谁是行谁是列

312
00:15:26,340 --> 00:15:28,900
按行和按列又有什么样的区别

313
00:15:28,900 --> 00:15:30,860
这些细节呢，一定要注意到
