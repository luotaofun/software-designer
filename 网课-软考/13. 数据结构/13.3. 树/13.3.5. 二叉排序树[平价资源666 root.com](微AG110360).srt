1
00:00:00,000 --> 00:00:01,560
接下来我们来看呢

2
00:00:01,560 --> 00:00:03,700
一些特殊的二叉树

3
00:00:03,700 --> 00:00:06,560
先来看到呢，二叉排序数

4
00:00:06,560 --> 00:00:09,270
它也叫做呢，查找二叉树

5
00:00:09,270 --> 00:00:11,860
那这个数它有什么特点呢

6
00:00:11,860 --> 00:00:14,360
看名字就是可以用来做排序

7
00:00:14,360 --> 00:00:16,120
还可以用来做查找的吧

8
00:00:16,120 --> 00:00:19,710
那这种涉及到排序和查找的时候

9
00:00:19,710 --> 00:00:23,290
它的节点呀，是有一定的数值含义

10
00:00:23,290 --> 00:00:25,020
才能够进行排序的

11
00:00:25,020 --> 00:00:26,510
所以我们在这里呢

12
00:00:26,510 --> 00:00:29,050
每一个节点上的数字，诶

13
00:00:29,050 --> 00:00:30,970
我们可以叫做呢，关键字

14
00:00:30,970 --> 00:00:34,040
针对关键字来进行排序

15
00:00:34,040 --> 00:00:36,490
那这个节点上的数值啊

16
00:00:36,490 --> 00:00:38,030
其实我们也可以呢

17
00:00:38,030 --> 00:00:40,000
把它叫做全职

18
00:00:40,000 --> 00:00:43,000
那针对关键字来排序的时候

19
00:00:43,000 --> 00:00:45,200
构成的这个查找二叉树啊

20
00:00:45,200 --> 00:00:48,240
左孩子一定是小于根的

21
00:00:48,240 --> 00:00:51,370
右孩子一定是大于根的

22
00:00:51,370 --> 00:00:53,320
那我们先来看一个序列

23
00:00:53,320 --> 00:00:56,200
这些呢，是我们带牌的关键字

24
00:00:56,200 --> 00:00:58,040
或者叫做代排序列

25
00:00:58,040 --> 00:01:01,890
那我们会依次输入相应的字符

26
00:01:01,890 --> 00:01:04,099
首先输入89

27
00:01:04,099 --> 00:01:07,200
哎，我们没有任何的数存在吧

28
00:01:07,200 --> 00:01:10,770
所以89是作为根来存在的

29
00:01:10,770 --> 00:01:14,400
那接下来输入关键字48

30
00:01:14,400 --> 00:01:16,880
那48已经有根了

31
00:01:16,880 --> 00:01:20,030
我们下面应该是放在根的指数位置吧

32
00:01:20,030 --> 00:01:21,190
放哪里呢

33
00:01:21,190 --> 00:01:23,390
哎，应该是左还是右

34
00:01:23,390 --> 00:01:25,210
只有两种选择

35
00:01:25,210 --> 00:01:27,850
左孩子小于跟

36
00:01:28,000 --> 00:01:31,000
所以小于89的48

37
00:01:31,000 --> 00:01:33,410
应该放在左孩子位置

38
00:01:33,410 --> 00:01:35,890
112大于根

39
00:01:35,890 --> 00:01:39,130
它应该放在右孩子位置上

40
00:01:39,130 --> 00:01:42,750
那20，唉，接下来注意了

41
00:01:42,750 --> 00:01:45,950
20这个关键字输入之后

42
00:01:45,950 --> 00:01:48,330
首先与89比较

43
00:01:48,330 --> 00:01:50,690
比89要小

44
00:01:50,690 --> 00:01:53,910
肯定在左侧位置上

45
00:01:53,910 --> 00:01:57,760
那在左子树当中与下一个根比较

46
00:01:57,760 --> 00:02:01,610
唉，下一个它的子树的根是48

47
00:02:01,610 --> 00:02:03,810
那比48要小

48
00:02:03,810 --> 00:02:08,030
应该放在48的左子树位置上

49
00:02:08,030 --> 00:02:13,000
那接下来56同样先与89比，比

50
00:02:13,000 --> 00:02:15,400
89小位于左子树

51
00:02:15,400 --> 00:02:17,240
再与与48比

52
00:02:17,240 --> 00:02:18,680
比48大

53
00:02:18,680 --> 00:02:23,320
所以放在48的柚子树位置上

54
00:02:23,670 --> 00:02:27,190
最后还有一个关键字，51

55
00:02:27,190 --> 00:02:29,410
首先与89比吧

56
00:02:29,410 --> 00:02:31,360
再与与48比

57
00:02:31,360 --> 00:02:33,640
接下来比48要大

58
00:02:33,640 --> 00:02:34,880
应该放在呢

59
00:02:34,880 --> 00:02:36,570
唉，柚子树不分

60
00:02:36,570 --> 00:02:39,410
那柚子树的根是5

61
00:02:39,410 --> 00:02:42,530
与56比比56小

62
00:02:42,530 --> 00:02:45,760
所以放在它的左子树部分

63
00:02:45,760 --> 00:02:48,210
那就是呢，我们根据啊

64
00:02:48,210 --> 00:02:49,470
现在的这个序

65
00:02:49,470 --> 00:02:51,530
可以得出来的一个呢

66
00:02:51,530 --> 00:02:55,560
唉，查找二叉树或者叫做 A 2叉排序数

67
00:02:55,560 --> 00:02:57,860
这是一个排序的过程吧

68
00:02:57,860 --> 00:03:00,560
那我们在查找的时候怎么找啊

69
00:03:00,560 --> 00:03:05,080
如果让大家找关键字5

70
00:03:05,430 --> 00:03:06,870
怎么找呢

71
00:03:06,870 --> 00:03:08,830
首先与根比

72
00:03:08,830 --> 00:03:11,110
然后搜索左子树

73
00:03:11,110 --> 00:03:13,000
与左子树的根比

74
00:03:13,000 --> 00:03:14,970
唉，比48要大

75
00:03:14,970 --> 00:03:18,810
那么接下来与跟56进行比较

76
00:03:18,810 --> 00:03:20,400
所以它也可以呢

77
00:03:20,400 --> 00:03:22,940
用来做二分查找

78
00:03:22,940 --> 00:03:25,920
那它在构建的过程当中

79
00:03:25,920 --> 00:03:29,860
是不是这些关键字构成的数一定长这个样呢

80
00:03:29,860 --> 00:03:31,030
不一定

81
00:03:31,030 --> 00:03:34,190
我们在呀，构建二叉树的时候

82
00:03:34,190 --> 00:03:37,100
构建我们的查找二叉树的时候啊

83
00:03:37,100 --> 00:03:39,750
给出的序列顺序不一样

84
00:03:39,750 --> 00:03:42,540
构造的结果是不一样的

85
00:03:42,540 --> 00:03:44,240
那我们一般认为啊

86
00:03:44,240 --> 00:03:46,770
递增的顺序叫做呢有序

87
00:03:46,770 --> 00:03:50,980
这种呢，反向的顺序递减呢，是无序的

88
00:03:50,980 --> 00:03:52,480
诶，那我们来看一下

89
00:03:52,480 --> 00:03:54,220
针对这种无序的序列

90
00:03:54,220 --> 00:03:57,860
首先给出的关键字是112

91
00:03:57,860 --> 00:04:01,380
89比112要小

92
00:04:01,380 --> 00:04:04,590
我们把它呢，放在左侧位置

93
00:04:05,570 --> 00:04:09,190
那接下来56比112小

94
00:04:09,190 --> 00:04:11,090
比89要小

95
00:04:11,720 --> 00:04:13,860
然后51，哎

96
00:04:13,860 --> 00:04:17,620
比112、89、56都要小

97
00:04:17,620 --> 00:04:20,610
48比51还要小吧

98
00:04:20,610 --> 00:04:23,630
20比48还要小

99
00:04:23,630 --> 00:04:25,530
那这种情况下

100
00:04:25,530 --> 00:04:30,190
同样的关键字只是变换了输入的顺序

101
00:04:30,190 --> 00:04:34,630
它反而形成了一颗只有一个树枝的这种树，诶

102
00:04:34,630 --> 00:04:36,160
叫做单枝树

103
00:04:36,160 --> 00:04:39,090
所以我们在考试当中经常会判断啊

104
00:04:39,090 --> 00:04:40,830
要求大家来判断诶

105
00:04:40,830 --> 00:04:43,690
以下哪一个序列才能构成这棵树

106
00:04:43,690 --> 00:04:46,640
其实序列的关键字都是一样的吧

107
00:04:46,640 --> 00:04:51,110
但是输出顺序会影响最后的这个结构

108
00:04:51,110 --> 00:04:53,880
那我们在构造的过程当中

109
00:04:53,880 --> 00:04:58,140
单只数显然 N 个节点形成的层次

110
00:04:58,140 --> 00:05:00,300
最高是等于 N 的吧

111
00:05:00,300 --> 00:05:01,790
那最低

112
00:05:01,790 --> 00:05:04,870
最低应该是满二叉树

113
00:05:04,870 --> 00:05:07,290
或者说完全二叉树的形式吧

114
00:05:07,290 --> 00:05:09,160
那这是这个时候

115
00:05:09,160 --> 00:05:14,360
它的高度应该是 log 2 NA 加一的

116
00:05:15,060 --> 00:05:16,560
log 2 N 啊

117
00:05:16,560 --> 00:05:19,960
直接写的时候默认是向下取整的

118
00:05:19,960 --> 00:05:22,230
所以我们呢会加一

119
00:05:22,230 --> 00:05:23,320
那这是呢

120
00:05:23,320 --> 00:05:26,300
它在构造二叉排序数的时候

121
00:05:26,300 --> 00:05:29,180
比较特殊的两个高度值

122
00:05:29,180 --> 00:05:30,320
一个是最大

123
00:05:30,320 --> 00:05:31,440
一个是最小

124
00:05:31,440 --> 00:05:33,600
这个高度有什么用处啊

125
00:05:33,600 --> 00:05:37,800
高度是我们在查找某一个关键字的时候

126
00:05:37,800 --> 00:05:39,970
比较次数的最大值

127
00:05:39,970 --> 00:05:42,530
如果给大家一个180

128
00:05:42,860 --> 00:05:44,320
那大家哎

129
00:05:44,320 --> 00:05:47,300
比如说给大家一个52吧

130
00:05:48,000 --> 00:05:50,000
给大家一个关键字

131
00:05:50,000 --> 00:05:51,890
这棵树其实没有吧

132
00:05:51,890 --> 00:05:53,260
没有的情况下

133
00:05:53,260 --> 00:05:56,440
我们会对所有层次来进行比较吧

134
00:05:56,440 --> 00:05:58,280
那所有层次比较

135
00:05:58,280 --> 00:06:02,050
它的高度值就是比较次数的最大值

136
00:06:02,050 --> 00:06:05,980
那这种最大值在构造结果不一样的时候

137
00:06:05,980 --> 00:06:08,910
取值呢，也是有区别的

138
00:06:08,910 --> 00:06:11,990
这是排序二叉树的一个特点

139
00:06:12,360 --> 00:06:15,140
那针对这个排序二叉树啊

140
00:06:15,140 --> 00:06:17,000
这是我们前面的序列，哎

141
00:06:17,000 --> 00:06:18,880
第一个序列构成的数

142
00:06:18,880 --> 00:06:22,530
它在构造过程当中插入节点的话

143
00:06:22,530 --> 00:06:25,130
会先判断是否已存在

144
00:06:25,130 --> 00:06:26,960
如果已经存在的话

145
00:06:26,960 --> 00:06:28,420
就不再插入了

146
00:06:28,420 --> 00:06:30,300
如果说没有存在

147
00:06:30,300 --> 00:06:33,510
我们才会呢，往里面插入新的节点

148
00:06:33,510 --> 00:06:35,500
如果是空数的话

149
00:06:35,500 --> 00:06:37,700
我们就以这个新节点呢

150
00:06:37,700 --> 00:06:39,980
作为一个单一的节点数

151
00:06:39,980 --> 00:06:42,610
那插入的时候与我们的根

152
00:06:42,610 --> 00:06:45,160
或者说呢，与复节点来进行比较

153
00:06:45,160 --> 00:06:49,000
到底是放在左子树还是右子树位置的

154
00:06:49,000 --> 00:06:51,040
这是呢，插入节点

155
00:06:51,040 --> 00:06:54,590
就是我们刚刚讲到的构造排序二叉树

156
00:06:54,590 --> 00:06:55,770
它的顺序

157
00:06:55,770 --> 00:06:59,560
删除节点呢，没有在考试当中出现

158
00:06:59,560 --> 00:07:00,680
了解一下

159
00:07:00,680 --> 00:07:03,240
如果叶子节点可以直接删

160
00:07:03,240 --> 00:07:04,530
中间节点

161
00:07:04,530 --> 00:07:08,700
我们需要呢，调整相应的它的叶子节点的位置

162
00:07:08,700 --> 00:07:12,890
从而呢，仍然满足我们排序二叉树

163
00:07:12,890 --> 00:07:15,100
它的这个顺序就可以了

164
00:07:15,100 --> 00:07:16,890
那这是呢，关于啊

165
00:07:16,890 --> 00:07:18,190
我们二叉树

166
00:07:18,190 --> 00:07:21,290
排序二叉树它的插入和删

167
00:07:21,290 --> 00:07:23,950
在排序二叉树当中呢

168
00:07:23,950 --> 00:07:25,470
它还有一个特点

169
00:07:25,470 --> 00:07:27,750
我们说数它还有操作吧

170
00:07:27,750 --> 00:07:29,210
关于便利

171
00:07:29,210 --> 00:07:32,230
那我们针对这一棵树而言的话

172
00:07:32,230 --> 00:07:39,370
它的层次遍历应该是89、48、112

173
00:07:39,370 --> 00:07:42,400
20、五、16和51吧

174
00:07:42,400 --> 00:07:43,940
这是层次便利

175
00:07:43,940 --> 00:07:47,430
那如果是先序或者叫做呢

176
00:07:47,430 --> 00:07:50,390
前序遍历应该做什么呢

177
00:07:50,390 --> 00:07:53,030
应该是根左右

178
00:07:55,400 --> 00:07:58,640
那我们会访问89

179
00:07:58,640 --> 00:08:01,630
然后左子树、右子树

180
00:08:01,630 --> 00:08:04,470
然后89左子树和右子树

181
00:08:04,470 --> 00:08:08,130
左子树接着访问哎根左

182
00:08:08,130 --> 00:08:10,470
然后右子树

183
00:08:11,570 --> 00:08:15,790
再对呢，它的柚子树进行展开遍历

184
00:08:15,790 --> 00:08:21,050
结果呢，应该是跟左、哎、右以及呢

185
00:08:21,050 --> 00:08:22,890
哎最后一个右节点

186
00:08:22,890 --> 00:08:25,430
所以它的先序遍历序列呀

187
00:08:25,430 --> 00:08:28,800
是89、48、20、

188
00:08:28,800 --> 00:08:32,630
16、51以及112

189
00:08:32,630 --> 00:08:35,080
那它的中序遍历呢

190
00:08:35,080 --> 00:08:36,820
我们再来看一下

191
00:08:36,850 --> 00:08:41,330
大家可以再回顾一下遍历它的过程

192
00:08:42,370 --> 00:08:48,890
中序它的遍历序列应该是左跟右的顺序吧

193
00:08:48,890 --> 00:08:51,740
首先呢，找的是左子树吧

194
00:08:51,740 --> 00:08:53,320
左子树它是一棵树

195
00:08:53,320 --> 00:08:56,750
然后呢，哎，是我们的根和右子树

196
00:08:56,750 --> 00:09:00,480
那针对左子树在进行中序遍历

197
00:09:00,480 --> 00:09:03,980
那接着访问的是左子树的左子树

198
00:09:03,980 --> 00:09:05,250
也就是20

199
00:09:05,250 --> 00:09:09,000
然后呢，访问它的根48

200
00:09:09,000 --> 00:09:11,890
对柚子树进行中序遍历

201
00:09:11,890 --> 00:09:15,970
哎，它的右子树左节点是51

202
00:09:15,970 --> 00:09:17,520
根是56

203
00:09:17,520 --> 00:09:20,010
那左子树全部访问完了吧

204
00:09:20,010 --> 00:09:22,530
返回根节点以及呢

205
00:09:22,530 --> 00:09:25,710
最后访问它的右侧节点

206
00:09:25,710 --> 00:09:30,010
那这种情况下形成的中序遍历序

207
00:09:30,010 --> 00:09:30,850
就是呢

208
00:09:30,850 --> 00:09:33,730
20、四、18、51、56、8

209
00:09:33,730 --> 00:09:35,720
以及呢，112

210
00:09:35,720 --> 00:09:38,600
那它的后序遍历序列的话

211
00:09:38,600 --> 00:09:42,240
哎，应该是左右跟

212
00:09:42,770 --> 00:09:46,690
同样，对左子树先进行后序遍历

213
00:09:46,690 --> 00:09:48,370
那应该呢是左

214
00:09:48,370 --> 00:09:50,890
然后右子树进行后序遍历

215
00:09:50,890 --> 00:09:54,390
哎，左又没有根，是56

216
00:09:54,390 --> 00:09:57,150
那第一棵左子树的根

217
00:09:57,150 --> 00:09:58,850
最后呢，是48

218
00:09:58,850 --> 00:10:00,830
右子树和根

219
00:10:00,830 --> 00:10:03,120
那这是它的后续遍历

220
00:10:03,120 --> 00:10:07,510
20、51、56、48、112和89

221
00:10:07,510 --> 00:10:10,300
那这四个序列有什么特点啊

222
00:10:10,300 --> 00:10:14,700
我们会发现其中有一个序列它是有序的

223
00:10:14,700 --> 00:10:16,320
哎，哪一个序列呢

224
00:10:16,320 --> 00:10:18,650
应该是中序遍历

225
00:10:18,650 --> 00:10:21,120
只有这一个便利结果

226
00:10:21,120 --> 00:10:22,900
它是呢，有序的

227
00:10:22,900 --> 00:10:25,550
所以这个呢，大家要知道一下

228
00:10:25,550 --> 00:10:28,310
对于二叉排序数

229
00:10:28,310 --> 00:10:31,390
它的中序遍历是有序

230
00:10:31,390 --> 00:10:32,890
关键字序列

231
00:10:32,890 --> 00:10:35,650
这也是呢，我们提到的，诶

232
00:10:35,650 --> 00:10:38,540
二叉排序数它的一个呢，特点

233
00:10:38,540 --> 00:10:40,260
接下来我们看到呢

234
00:10:40,260 --> 00:10:41,340
二叉排序数

235
00:10:41,340 --> 00:10:44,680
在我们软件设计师考试真题当中的体现

236
00:10:44,680 --> 00:10:47,980
下面这道题设有二叉排序

237
00:10:47,980 --> 00:10:49,840
或者呢，二叉查找数

238
00:10:49,840 --> 00:10:51,000
如下图所示

239
00:10:51,000 --> 00:10:53,800
那么建立该二叉树的关键字序列

240
00:10:53,800 --> 00:10:55,780
不可能是哪一个呢

241
00:10:55,780 --> 00:11:00,080
唉，大家针对 ABCD 4个选项见一见就可以呢

242
00:11:00,080 --> 00:11:01,360
找到答案

243
00:11:01,360 --> 00:11:04,820
那我们先来看 A 选项这个关键字序列

244
00:11:04,820 --> 00:11:06,520
它的实现过程

245
00:11:06,520 --> 00:11:09,710
首先，插入关键字23

246
00:11:09,710 --> 00:11:12,080
那23找到之后

247
00:11:12,080 --> 00:11:14,420
30一比23要大

248
00:11:14,420 --> 00:11:16,640
放在30、23的右侧

249
00:11:16,640 --> 00:11:18,770
17比23要小

250
00:11:18,770 --> 00:11:20,790
放在它的左侧

251
00:11:20,790 --> 00:11:23,510
19比23要小

252
00:11:23,510 --> 00:11:24,930
比17要大

253
00:11:24,930 --> 00:11:26,830
唉，放在这个位置上

254
00:11:26,830 --> 00:11:29,490
11比27要小

255
00:11:29,490 --> 00:11:31,230
比17要小

256
00:11:31,230 --> 00:11:33,910
放在呢17的左侧

257
00:11:33,910 --> 00:11:36,690
27比23大

258
00:11:36,690 --> 00:11:40,800
比17比23大比31要小

259
00:11:40,800 --> 00:11:43,370
放在31的左侧

260
00:11:43,370 --> 00:11:45,830
13比23小

261
00:11:45,830 --> 00:11:48,490
比17小比11大

262
00:11:48,490 --> 00:11:51,460
放在11的右侧位置

263
00:11:51,460 --> 00:11:55,180
90比23大比31大

264
00:11:55,180 --> 00:11:56,420
哎，然后呢

265
00:11:56,420 --> 00:11:59,590
放在31的右侧位置

266
00:11:59,590 --> 00:12:04,690
60一比23大比31大比90小

267
00:12:04,690 --> 00:12:07,350
放在90的左侧位置

268
00:12:07,350 --> 00:12:12,170
那这棵树它的位置跟我们这里的排序

269
00:12:12,170 --> 00:12:14,520
二叉树是一模一样的吧

270
00:12:14,520 --> 00:12:18,630
所以 A 选项是能够呢构造出来的

271
00:12:18,630 --> 00:12:20,630
再来看 B 选项

272
00:12:20,630 --> 00:12:24,250
还是23号节点先进来作为根

273
00:12:24,250 --> 00:12:27,450
17比23小，哎

274
00:12:27,450 --> 00:12:29,640
19比17小

275
00:12:29,640 --> 00:12:32,360
19比23小比17大

276
00:12:32,360 --> 00:12:35,290
放在17的右节点位置

277
00:12:35,290 --> 00:12:38,320
30一比23要大

278
00:12:38,320 --> 00:12:42,840
27比23大比31要小

279
00:12:42,840 --> 00:12:47,530
90比23大比31要大

280
00:12:47,530 --> 00:12:49,730
60一比23

281
00:12:49,730 --> 00:12:50,810
31要大

282
00:12:50,810 --> 00:12:53,020
比90要小

283
00:12:53,020 --> 00:12:57,300
11比23小比17小

284
00:12:57,300 --> 00:13:00,800
13呢，哎，比二十三十七都小

285
00:13:00,800 --> 00:13:02,040
比11要大

286
00:13:02,040 --> 00:13:04,550
放在11的右侧位置

287
00:13:04,550 --> 00:13:07,200
唉，同样是一模一样的吧

288
00:13:07,200 --> 00:13:11,560
所以这里 B 选项也是能够呢构造成功的

289
00:13:11,560 --> 00:13:14,280
那再来看 C 选项当中

290
00:13:14,280 --> 00:13:17,890
先来呢，输入23号节点

291
00:13:17,890 --> 00:13:22,300
那17比23小，放在它的左侧

292
00:13:22,300 --> 00:13:26,660
27比我们的23要大吧

293
00:13:26,660 --> 00:13:29,320
所以放在23的右侧

294
00:13:29,320 --> 00:13:32,150
哎，到这里其实就不一样了

295
00:13:32,150 --> 00:13:36,300
它的第二个层次应该是17和31

296
00:13:36,300 --> 00:13:38,620
而不是27

297
00:13:38,620 --> 00:13:43,610
所以 C 选项它是不可能构造出这棵树的

298
00:13:43,610 --> 00:13:44,730
D 选项啊

299
00:13:44,730 --> 00:13:47,010
它的构造也是呢，能够

300
00:13:47,010 --> 00:13:49,740
能够成功画出这棵树

301
00:13:49,740 --> 00:13:52,760
大家呢，可以自己试着对 D 选

302
00:13:52,760 --> 00:13:54,640
再来呢，进行构造

303
00:13:54,640 --> 00:13:57,800
我们在这里呢，就不再重复来这个

304
00:13:57,800 --> 00:14:00,160
来进行这个构造的过程了

305
00:14:00,160 --> 00:14:02,120
这是呢，对二叉树

306
00:14:02,120 --> 00:14:05,470
二叉排序数构造过程的考察

307
00:14:05,470 --> 00:14:07,620
再来看下面这道题

308
00:14:07,620 --> 00:14:09,860
以下关于二叉排序数

309
00:14:09,860 --> 00:14:12,820
或者叫做二叉查找树、二叉搜索树

310
00:14:12,820 --> 00:14:15,550
它的叙述当中正确的是谁

311
00:14:15,550 --> 00:14:17,550
要找正确的选项啊

312
00:14:17,550 --> 00:14:19,710
错误的选项是不需要的

313
00:14:19,710 --> 00:14:21,210
那我们现在看到

314
00:14:21,210 --> 00:14:22,450
首先 A 选

315
00:14:22,450 --> 00:14:26,170
对二叉排序数进行先序、中序、后序、遍

316
00:14:26,170 --> 00:14:28,220
都能得到有序序列

317
00:14:28,220 --> 00:14:31,350
我们在这里只有中序可以

318
00:14:31,350 --> 00:14:35,860
先序、后序都无法保证得到它的

319
00:14:35,860 --> 00:14:37,560
诶，有序序列啊

320
00:14:37,560 --> 00:14:41,830
B 选项，含有 N 个节点的二叉排序数

321
00:14:41,830 --> 00:14:43,910
它的高度为，哎

322
00:14:43,910 --> 00:14:45,990
这个高度以二为底

323
00:14:45,990 --> 00:14:49,660
N 的对数加一是它的高度最小值

324
00:14:49,660 --> 00:14:55,150
它的最大值是可能出现高度为 N 的情况

325
00:14:55,150 --> 00:14:58,040
所以这个说法是错误的

326
00:14:58,040 --> 00:15:00,000
它只是可能为

327
00:15:00,000 --> 00:15:03,250
而不是一定是这个数值

328
00:15:03,250 --> 00:15:09,320
C 选项，从根到任意一个叶子节点的路径上

329
00:15:09,320 --> 00:15:12,260
那节点的关键字呈现呢

330
00:15:12,260 --> 00:15:15,000
哎，有序的排列

331
00:15:15,020 --> 00:15:18,860
那我们刚刚呢，给大家构造了几棵树吧

332
00:15:18,860 --> 00:15:21,370
那我们针对这棵树来看

333
00:15:21,370 --> 00:15:25,010
如果说从23~27的话

334
00:15:25,010 --> 00:15:27,270
唉，他选择右子树

335
00:15:27,270 --> 00:15:28,880
再选择左子树

336
00:15:28,880 --> 00:15:32,360
23、31、27是不是有序的

337
00:15:32,360 --> 00:15:34,300
并不是有序的吧

338
00:15:34,300 --> 00:15:38,310
所以他只有选择同一方向上才会有序

339
00:15:38,310 --> 00:15:40,660
有其他方向出现的话

340
00:15:40,660 --> 00:15:43,680
并不会呈现有序的序列

341
00:15:43,680 --> 00:15:48,050
D 选项，从左到右排列同层次节点

342
00:15:48,050 --> 00:15:51,750
那么关键字会呈现有序序列

343
00:15:51,750 --> 00:15:54,720
哎，这个说法呢，它是正确的

344
00:15:54,720 --> 00:15:56,140
我们可以同样呢

345
00:15:56,140 --> 00:15:58,460
以上面的这个图示为例

346
00:15:58,460 --> 00:16:03,830
17、三、11、11、19、27、30都是有序的吧

347
00:16:03,830 --> 00:16:06,500
因为这两个序列来看的话

348
00:16:06,500 --> 00:16:10,980
会针对我们的左侧根呈现一个有序，诶

349
00:16:10,980 --> 00:16:11,940
左侧比它小

350
00:16:11,940 --> 00:16:13,560
右侧比它大吧

351
00:16:13,670 --> 00:16:17,050
那右侧这两个节点也会呢

352
00:16:17,050 --> 00:16:21,250
依据根有比左、比根小、比更大这个排序

353
00:16:21,250 --> 00:16:23,410
那这两个根之间

354
00:16:23,410 --> 00:16:25,130
其实也存在一

355
00:16:25,130 --> 00:16:26,610
左侧较小的问题吧

356
00:16:26,610 --> 00:16:30,110
所以我们在这里呢，是能够找到呢

357
00:16:30,110 --> 00:16:31,470
相应的这个呢

358
00:16:31,470 --> 00:16:33,050
唉，排列顺序的

359
00:16:33,050 --> 00:16:36,100
那同一个层次取下来的关键

360
00:16:36,100 --> 00:16:38,240
一定呢，是有序的

361
00:16:38,240 --> 00:16:40,840
那这个说法呢，是正确

362
00:16:40,840 --> 00:16:41,920
这道题呀

363
00:16:41,920 --> 00:16:46,160
考察的就是呢，对排序二叉树一些特点，诶

364
00:16:46,160 --> 00:16:48,140
它的证物来进行判断

365
00:16:48,140 --> 00:16:49,530
就是对它呢

366
00:16:49,530 --> 00:16:51,930
二叉排序数特点的考察
