1
00:00:00,000 --> 00:00:02,080
接下来我们再来看一些呢

2
00:00:02,080 --> 00:00:04,030
其他特殊的一些二叉树

3
00:00:04,030 --> 00:00:07,790
那首先呢，我们了解一下什么是平衡二叉树

4
00:00:07,790 --> 00:00:11,210
为什么要有平衡二叉树这种说法

5
00:00:11,210 --> 00:00:13,530
我们在前面啊，曾经提到呢

6
00:00:13,530 --> 00:00:15,120
关于排序二叉树

7
00:00:15,120 --> 00:00:17,310
它的构造过程当中啊

8
00:00:17,310 --> 00:00:20,330
如果给的序列顺序不是很好的话

9
00:00:20,330 --> 00:00:23,590
它可能会形成单支数这种情况吧

10
00:00:23,590 --> 00:00:26,340
那它的比较次数会有 N 次

11
00:00:26,340 --> 00:00:29,910
如果形成的是满二叉树的形式

12
00:00:29,910 --> 00:00:30,810
或者说呢

13
00:00:30,810 --> 00:00:32,549
完全二叉树的形式

14
00:00:32,549 --> 00:00:34,470
那它的高度呢

15
00:00:34,470 --> 00:00:38,470
唉，只需要 log 2 N 加一吧

16
00:00:40,180 --> 00:00:44,580
那这两个比较次数其实相差还是蛮大的

17
00:00:44,580 --> 00:00:45,960
那我们在这里呢

18
00:00:45,960 --> 00:00:47,600
可以利用排序二叉树

19
00:00:47,600 --> 00:00:48,580
或者叫做呢

20
00:00:48,580 --> 00:00:50,280
呃，二叉查找

21
00:00:50,280 --> 00:00:53,100
来找一些关键字数值的位置

22
00:00:53,100 --> 00:00:54,360
那这种情况下

23
00:00:54,360 --> 00:00:57,360
我们肯定希望出现的是这种二叉树

24
00:00:57,360 --> 00:01:00,750
而不是左侧这种单质数吧

25
00:01:00,750 --> 00:01:04,000
那这两个的区别在于什么呢

26
00:01:04,000 --> 00:01:07,340
其实右侧这种树相对来说呢

27
00:01:07,340 --> 00:01:09,100
看起来会稳定一些

28
00:01:09,100 --> 00:01:11,680
就叫做呢，平衡二叉树

29
00:01:11,680 --> 00:01:15,310
平衡二叉树它所定、它的定义啊

30
00:01:15,310 --> 00:01:17,770
就是呢，任意一个节点

31
00:01:17,770 --> 00:01:21,580
它的左右子树深度或者叫做高度

32
00:01:21,580 --> 00:01:23,380
相差不超过一

33
00:01:23,380 --> 00:01:27,160
这个高度呢，左侧减右侧，诶

34
00:01:27,160 --> 00:01:28,900
左侧高度

35
00:01:32,720 --> 00:01:35,240
减右侧高度

36
00:01:36,640 --> 00:01:40,680
我们也叫做平衡因子

37
00:01:43,900 --> 00:01:47,880
也就是说它的平衡因子只能呢

38
00:01:47,880 --> 00:01:50,380
等于一、零或者一

39
00:01:50,380 --> 00:01:53,630
那比如说我们左侧这个高度差的话

40
00:01:53,630 --> 00:01:55,190
诶，一侧是零

41
00:01:55,190 --> 00:01:57,060
一侧呢是 N 

42
00:01:57,060 --> 00:01:59,510
那它的一侧是 N 减一啊

43
00:01:59,510 --> 00:02:01,030
除了根节点以外

44
00:02:01,030 --> 00:02:04,000
那它的这个高度差显然，唉

45
00:02:04,000 --> 00:02:05,400
相对来说就是呢

46
00:02:05,400 --> 00:02:06,700
负的 N 减一

47
00:02:06,700 --> 00:02:08,820
这是一个较大的数值了

48
00:02:08,820 --> 00:02:12,900
一般呢，会超过这个一、零或者一的范围

49
00:02:12,900 --> 00:02:16,220
那针对一个完全二叉树来看的话

50
00:02:16,220 --> 00:02:20,170
我们只有最下层会有节点的缺失吧

51
00:02:20,170 --> 00:02:24,070
那这种情况下，没有缺失的高度差都是零

52
00:02:24,070 --> 00:02:26,770
有缺失的也只是缺了一

53
00:02:26,770 --> 00:02:29,510
高度差呢，是等于一或者一的

54
00:02:29,510 --> 00:02:31,410
所以这一类啊，它是呢

55
00:02:31,410 --> 00:02:33,350
哎，平衡的二叉树

56
00:02:33,350 --> 00:02:36,830
那我们在这里只要求大家掌握平衡

57
00:02:36,830 --> 00:02:39,190
二叉树的分析就可以了

58
00:02:39,190 --> 00:02:42,010
它具体的建立过程以及呢

59
00:02:42,010 --> 00:02:43,730
动态平衡的问题呢

60
00:02:43,730 --> 00:02:46,230
是不需要大家呢去掌握的

61
00:02:46,230 --> 00:02:49,850
目前平衡二叉树在我们的软设考试当中

62
00:02:49,850 --> 00:02:51,830
已经呢，多年没有出现了

63
00:02:51,830 --> 00:02:54,660
我们简单看一个它的例题

64
00:02:54,660 --> 00:02:58,850
那在如图所示的平衡二叉树当中啊

65
00:02:58,850 --> 00:03:00,830
树中任意一个节点

66
00:03:00,830 --> 00:03:05,880
左右子树高度差不超过一节点 A 

67
00:03:05,880 --> 00:03:07,780
它的左子树

68
00:03:07,780 --> 00:03:08,160
诶

69
00:03:08,160 --> 00:03:11,330
它的右子树 AAR 高度是 H 

70
00:03:11,330 --> 00:03:15,560
节点 B 它的左子树高度是 H 

71
00:03:15,560 --> 00:03:18,210
右子树 C 它的唉

72
00:03:18,210 --> 00:03:21,490
左子树 cl 高度是 H 减一

73
00:03:21,490 --> 00:03:24,170
CR 的高度也是 H 减一

74
00:03:24,170 --> 00:03:27,670
注意，这种题目在考察的时候

75
00:03:27,670 --> 00:03:31,450
图示会给大家带来一些呢，视觉上的错觉

76
00:03:31,450 --> 00:03:32,660
我们在这里

77
00:03:32,660 --> 00:03:35,800
AAR 的高度和 bl 的高度是一样的吧

78
00:03:35,800 --> 00:03:37,160
那这种情况下

79
00:03:37,160 --> 00:03:39,720
B 的高度是 H 加一

80
00:03:39,720 --> 00:03:43,640
在我们当前层次上又增加了一个层次，诶

81
00:03:43,640 --> 00:03:46,110
显然这个高度是不一样的

82
00:03:46,110 --> 00:03:47,830
看起来在同一层

83
00:03:47,830 --> 00:03:49,530
但是高度不一样

84
00:03:49,530 --> 00:03:51,870
所以一定要注意图示

85
00:03:51,870 --> 00:03:54,480
把相应的参数标清楚

86
00:03:54,480 --> 00:03:59,200
那若在 CR 诶这个地方插入一个节点

87
00:03:59,200 --> 00:04:02,310
使得 CR 它的高度加一

88
00:04:02,310 --> 00:04:04,430
原本是 H 减一

89
00:04:04,430 --> 00:04:07,560
加一之后变成了 H 吧

90
00:04:07,560 --> 00:04:10,540
那么变成 H 之后

91
00:04:10,540 --> 00:04:14,930
C 的高度，哎，从 H 变成了 H 加一

92
00:04:14,930 --> 00:04:17,720
由最高层来决定

93
00:04:17,720 --> 00:04:22,029
所以这里呢，哎，我们有了一个新的高

94
00:04:22,029 --> 00:04:23,490
H 加一

95
00:04:24,110 --> 00:04:27,670
那随之发生变化的还有谁啊

96
00:04:27,670 --> 00:04:30,230
还有 B 的高度要加一吧

97
00:04:30,230 --> 00:04:32,750
变成了 H 加二

98
00:04:32,750 --> 00:04:37,080
那我们在这里以 B 为根的子数，哎

99
00:04:37,080 --> 00:04:38,280
以 B 为根的

100
00:04:38,280 --> 00:04:40,120
那这个一个高度是 H 

101
00:04:40,120 --> 00:04:41,560
一个高度是 H 加一

102
00:04:41,560 --> 00:04:43,990
它的差值仍然是一吧

103
00:04:43,990 --> 00:04:46,590
它仍然是平衡的

104
00:04:46,590 --> 00:04:48,850
以 C 为根的指数

105
00:04:48,850 --> 00:04:50,110
一个 H 减一

106
00:04:50,110 --> 00:04:53,760
一个 H 高度差仍然为一平衡

107
00:04:53,760 --> 00:04:56,210
那以 A 为根的子数

108
00:04:56,210 --> 00:04:57,970
一个呢是 H 加二

109
00:04:57,970 --> 00:04:58,950
一个是 H 

110
00:04:58,950 --> 00:05:01,350
它的高度差是等于二的

111
00:05:01,350 --> 00:05:04,560
所以此时这棵树不平衡

112
00:05:04,560 --> 00:05:07,890
所以正确的说法只有呢， C 选项

113
00:05:07,890 --> 00:05:10,290
那我们把参数带进去之后

114
00:05:10,290 --> 00:05:11,890
验证一下就可以了

115
00:05:11,890 --> 00:05:16,190
这就是呢，对平衡二叉树它的判断过程

116
00:05:16,190 --> 00:05:19,260
我们再来看到呢，线索二叉树

117
00:05:19,260 --> 00:05:22,940
线索二叉树它也是一种呢，特殊的二叉树

118
00:05:22,940 --> 00:05:25,280
那线索二叉树啊

119
00:05:25,280 --> 00:05:27,950
它是与遍历结合起来的

120
00:05:27,950 --> 00:05:30,990
我们在查找一棵二叉树的时候

121
00:05:30,990 --> 00:05:33,700
它可以用二叉链表来存吧

122
00:05:33,700 --> 00:05:35,300
那我们在存的时候

123
00:05:35,300 --> 00:05:39,000
可以根据一个节点的左右孩子指针

124
00:05:39,000 --> 00:05:41,250
去查找它的左右节点

125
00:05:41,250 --> 00:05:44,260
但是根据 B 节点来看的话

126
00:05:44,260 --> 00:05:46,740
我们能不能找到它的父节点呢

127
00:05:46,740 --> 00:05:48,390
其实是找不到的

128
00:05:48,390 --> 00:05:50,120
所以在这个过程当中啊

129
00:05:50,120 --> 00:05:52,220
我们的线索是只能往下找

130
00:05:52,220 --> 00:05:53,960
不能往上找的

131
00:05:53,960 --> 00:05:58,650
那我们如何来找到前驱这样的一个概念呢

132
00:05:58,650 --> 00:06:02,050
哎，它结合我们的便利序列

133
00:06:02,050 --> 00:06:04,470
把我们的这种树形结

134
00:06:04,470 --> 00:06:07,780
同样呢，变成了线性的序列结构

135
00:06:07,780 --> 00:06:09,930
那针对这种序列结构

136
00:06:09,930 --> 00:06:11,130
我们再来看呢

137
00:06:11,130 --> 00:06:15,230
唉，如何把这个序列的前驱和后继给它呢

138
00:06:15,230 --> 00:06:16,200
标清楚

139
00:06:16,200 --> 00:06:17,660
涉及到的就是呢

140
00:06:17,660 --> 00:06:20,610
用线索二叉树来进行表示

141
00:06:20,610 --> 00:06:22,180
那我们在这里呢

142
00:06:22,180 --> 00:06:24,540
首先把这棵二叉树啊

143
00:06:24,540 --> 00:06:28,580
它的先序、中序和后序遍历写出来

144
00:06:28,580 --> 00:06:29,990
这个便利呢

145
00:06:29,990 --> 00:06:33,620
就是我们最终形成的先序线索二叉树

146
00:06:33,620 --> 00:06:36,720
中序线索二叉树和后序线索二叉树

147
00:06:36,720 --> 00:06:38,250
它的形成过程

148
00:06:38,250 --> 00:06:39,900
对于线索二叉树啊

149
00:06:39,900 --> 00:06:42,000
在我们软件设计师考试当中

150
00:06:42,000 --> 00:06:44,150
也已经多年未出现了

151
00:06:44,150 --> 00:06:45,450
所以我们在这里呢

152
00:06:45,450 --> 00:06:47,630
主要是识别一下它的图

153
00:06:47,630 --> 00:06:50,150
大概呢是什么样子的

154
00:06:50,290 --> 00:06:52,030
那我们来看一下

155
00:06:52,030 --> 00:06:54,610
首先看到先序序列

156
00:06:54,930 --> 00:06:58,170
那它的遍历顺序是根

157
00:06:58,170 --> 00:07:00,310
然后左子树的根

158
00:07:00,310 --> 00:07:01,950
然后左子树

159
00:07:01,950 --> 00:07:05,010
它的右子树根左右

160
00:07:05,010 --> 00:07:09,820
以及哎右子树根左右

161
00:07:10,640 --> 00:07:13,780
那这是它的先序遍历序列

162
00:07:13,780 --> 00:07:16,240
根据先序遍历来看的话

163
00:07:16,240 --> 00:07:18,660
哎，我们这棵二叉树当中

164
00:07:18,660 --> 00:07:21,700
A 的所有指针它有左右孩子吧

165
00:07:21,700 --> 00:07:24,800
B 的所有指针有左右孩子，诶

166
00:07:24,800 --> 00:07:27,480
C 的左右指针有左右孩子

167
00:07:27,480 --> 00:07:32,510
那 F 第一它有两个指针是空余的

168
00:07:32,510 --> 00:07:35,030
那这两个指针我们可以呢

169
00:07:35,030 --> 00:07:37,360
把它拿来作为线索

170
00:07:37,360 --> 00:07:39,800
那记录什么样的线索呢

171
00:07:39,800 --> 00:07:44,400
唉，我们对左右孩子指针，它的节点

172
00:07:44,400 --> 00:07:46,140
这是元素 A 

173
00:07:46,140 --> 00:07:49,130
我们可以加上两个 tag 标识

174
00:07:49,130 --> 00:07:53,710
表示我们前面到底是孩子指针还是呢

175
00:07:53,710 --> 00:07:55,120
线索指针

176
00:07:55,120 --> 00:07:58,940
那现在第一，他的两个孩子指针都为空

177
00:07:58,940 --> 00:08:00,740
可以拿来做线索

178
00:08:00,740 --> 00:08:04,940
那它的左孩子可以呢指向前驱

179
00:08:04,940 --> 00:08:07,100
也就是 B 节点

180
00:08:07,590 --> 00:08:11,190
右孩子可以指向他的后继

181
00:08:11,190 --> 00:08:12,970
也就是 E 节点

182
00:08:12,970 --> 00:08:16,520
那添加了两个指针的指向

183
00:08:16,520 --> 00:08:18,970
对于 E 节点来看的话

184
00:08:18,970 --> 00:08:22,200
它的右孩子指针是空余的吧

185
00:08:22,200 --> 00:08:25,910
所以它其实也能够添加一个指针指向

186
00:08:25,910 --> 00:08:27,110
指向谁呢

187
00:08:27,110 --> 00:08:30,080
唉，应该指向的是 H 吧

188
00:08:30,080 --> 00:08:33,710
那在这里 E 他的左孩子是 H 

189
00:08:33,710 --> 00:08:38,460
右后继指针指向的也是 H ，是同一个节点

190
00:08:38,460 --> 00:08:40,870
在这里呢，没有画出来而已

191
00:08:40,870 --> 00:08:44,020
那 H 它有两个线索吧

192
00:08:44,020 --> 00:08:46,960
那 H 它的前驱是 E 

193
00:08:46,960 --> 00:08:48,350
后继是 C 

194
00:08:48,350 --> 00:08:50,600
所以前驱指向 E 

195
00:08:50,600 --> 00:08:53,850
后继呢，右孩子指向了 C 

196
00:08:53,850 --> 00:08:56,530
那接下来再来看 F 节

197
00:08:56,530 --> 00:08:58,450
有两个空孩子指针

198
00:08:58,450 --> 00:09:01,380
那 F 指向 C 和 G 

199
00:09:01,380 --> 00:09:04,870
那我们的 F ，哎，指向了 C 

200
00:09:05,300 --> 00:09:09,380
它的后继诱孩子指向了鸡

201
00:09:09,380 --> 00:09:10,910
那再来看 G 

202
00:09:10,910 --> 00:09:13,170
它缺失了一个左孩子指针

203
00:09:13,170 --> 00:09:14,830
可以有线索指向吧

204
00:09:14,830 --> 00:09:16,940
右孩子已经有数据了

205
00:09:16,940 --> 00:09:19,600
那他的左孩子指向谁呢

206
00:09:19,600 --> 00:09:22,200
唉，他的前驱是 F 

207
00:09:22,200 --> 00:09:24,670
所以指向了 F 

208
00:09:24,670 --> 00:09:26,630
那我们的 I 

209
00:09:26,630 --> 00:09:28,510
它有两个 A 

210
00:09:28,510 --> 00:09:30,510
左右孩子指针都是空的

211
00:09:30,510 --> 00:09:32,430
可以用 I 指针

212
00:09:32,430 --> 00:09:34,090
前驱是基

213
00:09:34,090 --> 00:09:35,650
后继不存在

214
00:09:35,650 --> 00:09:38,750
所以指向为空表示为 N 

215
00:09:38,750 --> 00:09:39,840
这就是呢

216
00:09:39,840 --> 00:09:43,860
先序遍历它的一个二叉树形成的过程

217
00:09:43,860 --> 00:09:46,500
根据遍历序列

218
00:09:46,910 --> 00:09:50,590
利用空孩子指针来指向

219
00:09:50,590 --> 00:09:53,630
便利的前驱元素和后继

220
00:09:53,630 --> 00:09:57,830
哎，元素节点、中序和后序遍历啊

221
00:09:57,830 --> 00:09:59,470
它们的线索二叉树呢

222
00:09:59,470 --> 00:10:01,490
也是这样得出来的

223
00:10:01,490 --> 00:10:05,000
那简单的了解一下它形成的这种思想

224
00:10:05,000 --> 00:10:07,090
以及呢图示就可以了

225
00:10:07,090 --> 00:10:09,860
目前啊，我们的平衡二叉树

226
00:10:09,860 --> 00:10:11,420
还有线索二叉树呢

227
00:10:11,420 --> 00:10:13,410
在软件设计师考试当中

228
00:10:13,410 --> 00:10:15,910
基本上呢，都没有再涉及了

229
00:10:15,910 --> 00:10:18,910
所以也没有呢给大家讲的特别详细

230
00:10:18,910 --> 00:10:21,120
主要呢，是了解即可

231
00:10:21,120 --> 00:10:25,570
也没有呢相应的真题来进行说明了

232
00:10:25,570 --> 00:10:28,330
那这是呢，要求大家了解到的

233
00:10:28,330 --> 00:10:30,750
平衡二叉树和线索二叉树
