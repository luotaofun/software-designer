1
00:00:00,000 --> 00:00:05,080
接下来，我们以真题的形式来看一下

2
00:00:05,080 --> 00:00:10,110
如何利用贪心法的策略来解决背包问题

3
00:00:10,150 --> 00:00:13,160
首先呢，是题干部分

4
00:00:13,160 --> 00:00:14,940
题干告诉我们呢

5
00:00:14,940 --> 00:00:18,360
现在假设有 N 个货物要装入呢

6
00:00:18,360 --> 00:00:21,380
若干个容量为 C 的集装箱

7
00:00:21,380 --> 00:00:22,950
以便运输

8
00:00:22,950 --> 00:00:25,210
那这 N 个货物的体积啊

9
00:00:25,210 --> 00:00:26,370
分别记作呢

10
00:00:26,370 --> 00:00:28,630
s 1、 s 2、 sn 

11
00:00:28,630 --> 00:00:34,900
并且呢，满足 SI 是小于等于集装箱的容量的

12
00:00:34,900 --> 00:00:37,940
那我们呢，在电视上或者呢

13
00:00:37,940 --> 00:00:39,360
一些视频当中啊

14
00:00:39,360 --> 00:00:40,500
都能够看到呢

15
00:00:40,500 --> 00:00:42,580
在码头上有很多啊

16
00:00:42,580 --> 00:00:44,980
大小一致的这样的集装箱

17
00:00:44,980 --> 00:00:47,230
里面呢，会装一些货物

18
00:00:47,230 --> 00:00:49,890
最终以集装箱的形

19
00:00:49,890 --> 00:00:53,090
通过呢，轮船来进行运输

20
00:00:53,090 --> 00:00:57,310
我们现在呢，要用尽可能少的集装

21
00:00:57,310 --> 00:00:59,580
来装运这 N 个货物

22
00:00:59,580 --> 00:01:02,830
那装运的时候有什么样的要求呢

23
00:01:02,830 --> 00:01:03,730
下面呢

24
00:01:03,730 --> 00:01:09,230
可以采用最先适宜策略和最优适宜策略

25
00:01:09,230 --> 00:01:11,700
来求解这个问题

26
00:01:11,700 --> 00:01:14,690
第一种最先适宜策略

27
00:01:14,690 --> 00:01:18,750
它是呢，首先将所有的集装箱啊，都初始化

28
00:01:18,750 --> 00:01:19,450
是空的

29
00:01:19,450 --> 00:01:20,690
里面没有东西

30
00:01:20,690 --> 00:01:22,500
对于所有货物呢

31
00:01:22,500 --> 00:01:24,520
按照给定的次序

32
00:01:24,520 --> 00:01:27,750
每次啊，将一个货物装入呢

33
00:01:27,750 --> 00:01:31,230
第一个能够呢，容纳它的集装箱

34
00:01:31,230 --> 00:01:35,110
那码头上呢，有很多空的集装箱

35
00:01:35,110 --> 00:01:40,020
我们呢，放的时候从一号集装箱开始尝试

36
00:01:40,020 --> 00:01:41,780
看看能不能放进去

37
00:01:41,780 --> 00:01:43,780
能放的就直接放入了

38
00:01:43,780 --> 00:01:46,040
如果一号集装箱不能放

39
00:01:46,040 --> 00:01:49,210
那就看呢，2号集装箱能不能放进去

40
00:01:49,210 --> 00:01:54,840
找到呢，第一个能够容纳他的集装箱就可以了

41
00:01:54,840 --> 00:01:59,300
第二种策略呢，是最优适宜策略

42
00:01:59,300 --> 00:02:01,550
那这种策略啊，其实呢

43
00:02:01,550 --> 00:02:04,170
与最先适宜策略很相似

44
00:02:04,170 --> 00:02:05,510
不同的是啊

45
00:02:05,510 --> 00:02:10,050
不再放入第一个能够容纳它的集装箱了

46
00:02:10,050 --> 00:02:11,910
他考虑的问题呀

47
00:02:11,910 --> 00:02:13,070
多了一步

48
00:02:13,070 --> 00:02:14,890
多了什么样的一步呢

49
00:02:14,890 --> 00:02:16,580
他会考虑啊

50
00:02:16,580 --> 00:02:21,720
剩余的容量最小的集装箱才放进去

51
00:02:21,720 --> 00:02:27,380
那可能我们有一二、三四、567等等多个集装箱

52
00:02:27,380 --> 00:02:30,410
大家都能放入当前这个物品

53
00:02:30,410 --> 00:02:31,990
那是不是都放呢

54
00:02:31,990 --> 00:02:34,800
并不是考虑一下哪一个最小

55
00:02:34,800 --> 00:02:38,350
尽可能的去利用最小的空间来放置

56
00:02:38,350 --> 00:02:43,000
使得呢，这个箱子当中装入当前货物之后

57
00:02:43,000 --> 00:02:45,280
闲置的空间呢，最小

58
00:02:45,280 --> 00:02:46,170
这就是呢

59
00:02:46,170 --> 00:02:48,080
最优适宜策略

60
00:02:48,080 --> 00:02:50,530
那我们呢，后面给大家呢

61
00:02:50,530 --> 00:02:52,010
看到的是一些呢

62
00:02:52,010 --> 00:02:53,290
代码说明

63
00:02:53,290 --> 00:02:55,270
里面呢，有一些变量

64
00:02:55,270 --> 00:02:57,810
分别表示什么样的含义

65
00:02:57,810 --> 00:03:01,370
其次呢，接下来看到的是代码部分

66
00:03:01,370 --> 00:03:03,540
分了两个大部分

67
00:03:03,540 --> 00:03:06,820
一个模块呢，是最先适宜策略

68
00:03:06,820 --> 00:03:11,130
一个模块呢，是最优适宜策略的代码啊

69
00:03:11,130 --> 00:03:13,940
后面啊，是问题部分

70
00:03:13,940 --> 00:03:15,200
问题一呢

71
00:03:15,200 --> 00:03:16,340
代码填空

72
00:03:16,340 --> 00:03:18,620
一共呢，12344个空

73
00:03:18,620 --> 00:03:19,700
每空两分

74
00:03:19,700 --> 00:03:24,080
问题二，根据说明和代码看看呢

75
00:03:24,080 --> 00:03:27,210
最先适宜和最优适宜策略

76
00:03:27,210 --> 00:03:30,970
分别采用了什么样的算法设计策略

77
00:03:30,970 --> 00:03:32,560
虽然是填空题

78
00:03:32,560 --> 00:03:34,830
我们可以当选择题来做嘛

79
00:03:34,830 --> 00:03:37,960
它所考察到的算法设计策略

80
00:03:37,960 --> 00:03:42,830
主要呢，就是贪心法、分治法、动态规划法以及呢

81
00:03:42,830 --> 00:03:44,240
回溯法

82
00:03:44,240 --> 00:03:47,660
最先适宜策略呢，比较明确

83
00:03:47,660 --> 00:03:51,160
放到呢，第一个能放入他的箱子

84
00:03:51,160 --> 00:03:54,520
那此时采用的是贪心法

85
00:03:54,520 --> 00:03:57,470
考虑当前的问题

86
00:03:57,470 --> 00:03:59,650
最优适宜策略

87
00:03:59,650 --> 00:04:02,770
很多同学看到最优两个字啊

88
00:04:02,770 --> 00:04:06,070
就选择了动态规划法

89
00:04:06,070 --> 00:04:10,190
其实呢，本题当中描述的最优策略

90
00:04:10,190 --> 00:04:13,310
放置的是当前情况下

91
00:04:13,310 --> 00:04:15,760
剩余空间最小的箱子

92
00:04:15,760 --> 00:04:19,490
仍然是当前的局部最优

93
00:04:19,490 --> 00:04:20,930
所以这里呢

94
00:04:20,930 --> 00:04:24,620
也是贪心法的设计策略

95
00:04:24,620 --> 00:04:28,840
那他们的时间复杂度分别是多少呢

96
00:04:28,840 --> 00:04:32,100
就需要根据代码来看了

97
00:04:32,100 --> 00:04:36,980
首先看左边的最先适宜策略的代码啊

98
00:04:36,980 --> 00:04:39,440
最先适宜策略的代码呢

99
00:04:39,440 --> 00:04:41,040
对于时间复杂度

100
00:04:41,040 --> 00:04:43,870
我们呢，主要是找循环部分

101
00:04:43,870 --> 00:04:48,250
那第一轮 for 循环是对 B 数组的一个初始化

102
00:04:48,250 --> 00:04:51,520
接下来平行的 for 循环当中啊

103
00:04:51,520 --> 00:04:54,470
它呢，是具体的业务逻辑代码了

104
00:04:54,470 --> 00:04:56,760
第二轮的 for 循环

105
00:04:56,760 --> 00:05:01,130
它是呢， I 变量从零到 N 的循环

106
00:05:01,130 --> 00:05:02,890
在中间呀

107
00:05:02,890 --> 00:05:06,190
还嵌套了一个 while 的循环部分

108
00:05:06,190 --> 00:05:07,610
while 循环呢

109
00:05:07,610 --> 00:05:10,450
针对了变量 J 变量

110
00:05:10,450 --> 00:05:14,850
接呢，在 B 数组当中作为下标变量的话

111
00:05:14,850 --> 00:05:18,290
可以取到零到 N 的范围

112
00:05:18,290 --> 00:05:20,830
所以呢，内层的循环啊

113
00:05:20,830 --> 00:05:22,560
同样是零到 N 

114
00:05:22,560 --> 00:05:24,550
双层嵌套循环

115
00:05:24,550 --> 00:05:25,890
时间复杂度呢

116
00:05:25,890 --> 00:05:29,190
应该是大 O 级的 N 平方

117
00:05:29,190 --> 00:05:33,520
再来看右侧的最优势宜策略部分

118
00:05:33,520 --> 00:05:35,660
最优势一策略啊

119
00:05:35,660 --> 00:05:36,780
这当中呢

120
00:05:36,780 --> 00:05:38,300
同样能够看到呢

121
00:05:38,300 --> 00:05:41,810
第一轮 for 循环是对 B 数组的初始化

122
00:05:41,810 --> 00:05:44,620
其次呢，第二轮 for 循

123
00:05:44,620 --> 00:05:47,480
平行部分是零到 N 

124
00:05:47,480 --> 00:05:49,910
对 I 变量进行循环

125
00:05:49,910 --> 00:05:55,240
中间呢，涉及到第二轮 for 循环的嵌套

126
00:05:55,240 --> 00:05:57,750
内层嵌套的 for 循环啊

127
00:05:57,750 --> 00:06:00,090
它针对的是变量 J 

128
00:06:00,090 --> 00:06:04,310
取值呢，是从零到 K 加一

129
00:06:04,310 --> 00:06:08,240
那这当中对于 J 变量啊

130
00:06:08,240 --> 00:06:12,500
它的整个取值范围同样呢

131
00:06:12,500 --> 00:06:15,200
其实能够取到零到 N 

132
00:06:15,200 --> 00:06:18,410
K 2是我们最终要求的一个数值

133
00:06:18,410 --> 00:06:24,350
那这里呢，可以根据它可以作为 B 数组的下标

134
00:06:24,350 --> 00:06:27,440
所以取值范围能够达到呢，零到 N 

135
00:06:27,440 --> 00:06:31,300
所以啊，这也是一个呢，双层嵌套循环

136
00:06:31,300 --> 00:06:33,540
取值都是零到 N 

137
00:06:33,540 --> 00:06:35,540
那它的时间复杂度呢

138
00:06:35,540 --> 00:06:38,110
就是大 O 级的 N 平方

139
00:06:38,110 --> 00:06:39,240
这就是啊

140
00:06:39,240 --> 00:06:44,250
对于问题二当中的时间复杂度的考察

141
00:06:44,250 --> 00:06:46,310
那如果说这中间啊

142
00:06:46,310 --> 00:06:49,010
涉及到递归等等复杂的函数的话

143
00:06:49,010 --> 00:06:50,460
就比较麻烦了

144
00:06:50,460 --> 00:06:51,670
一般来讲呢

145
00:06:51,670 --> 00:06:55,240
对于这一类代码当中没有复杂函数

146
00:06:55,240 --> 00:06:59,210
主要呢，考虑的就是循环它的时间复杂度

147
00:06:59,210 --> 00:07:02,430
那如果真的出现递归了怎么办呢

148
00:07:02,430 --> 00:07:04,900
对于递归这种形式

149
00:07:04,900 --> 00:07:06,550
在考试当中呢

150
00:07:06,550 --> 00:07:08,410
如果是分治法

151
00:07:08,410 --> 00:07:11,790
主要考察的就是呢，二分等等

152
00:07:11,790 --> 00:07:13,190
那二分这种呢

153
00:07:13,190 --> 00:07:17,060
策略时间复杂度都是与 log 2 N 有关的

154
00:07:17,060 --> 00:07:20,940
看看呢，有没有外层嵌套循环就可以了

155
00:07:20,940 --> 00:07:23,450
如果是动态规划

156
00:07:23,450 --> 00:07:24,850
它的递归式的话

157
00:07:24,850 --> 00:07:29,680
那主要呢可以根据逻辑业务上来判断

158
00:07:29,680 --> 00:07:32,280
它是呢有什么样的循

159
00:07:32,280 --> 00:07:35,430
或者呢递归方式来实现的

160
00:07:35,430 --> 00:07:38,750
如果是自底向上的话

161
00:07:38,750 --> 00:07:42,110
它一般呢是利用嵌套循环来实现

162
00:07:42,110 --> 00:07:45,060
时间复杂度呢，是 N 的 K 次方

163
00:07:45,060 --> 00:07:48,290
看看呢有几层 K 呢就是多少

164
00:07:48,290 --> 00:07:51,620
那如果是自顶向下的话

165
00:07:51,620 --> 00:07:55,750
那这当中呢，一般会利用递归来依次实现

166
00:07:55,750 --> 00:07:57,770
这个时候的时间复杂度啊

167
00:07:57,770 --> 00:08:01,880
主要呢就是二的 N 次方这种形式了

168
00:08:01,880 --> 00:08:05,810
这类考察呢，相对来说要更少了一些

169
00:08:06,320 --> 00:08:08,440
接下来问题三

170
00:08:08,440 --> 00:08:11,340
他考察的是实力问题

171
00:08:11,340 --> 00:08:13,640
考虑呢，有十个物品

172
00:08:13,640 --> 00:08:16,900
集装箱的总容量也是等于十的

173
00:08:16,900 --> 00:08:19,630
各个货物的体积记录如下

174
00:08:19,630 --> 00:08:24,840
那该实例在最先适宜和最优适宜策略下

175
00:08:24,840 --> 00:08:27,800
所需要的集装箱分别是多少呢

176
00:08:27,800 --> 00:08:29,420
考虑一般的情况

177
00:08:29,420 --> 00:08:33,070
这两种策略能不能得到最优解呢

178
00:08:33,070 --> 00:08:36,960
我们来尝试放置一下就知道了

179
00:08:36,960 --> 00:08:38,169
那假设呢

180
00:08:38,169 --> 00:08:40,730
实例 N 等于十，诶

181
00:08:40,730 --> 00:08:43,090
十个物品依次记录如下

182
00:08:43,090 --> 00:08:47,990
然后呢，集装箱总容量是等于十的

183
00:08:47,990 --> 00:08:51,910
我们呢，依次去放置相应的物品

184
00:08:51,910 --> 00:08:53,400
按次序来放

185
00:08:53,400 --> 00:08:56,820
首先呢，放入的是第一个物品

186
00:08:56,820 --> 00:08:58,160
体积为四

187
00:08:58,160 --> 00:09:01,000
那根据最先适宜策略

188
00:09:01,000 --> 00:09:04,350
放入第一个能放下它的集装箱

189
00:09:04,350 --> 00:09:07,120
那0号集装箱应该是可以放得下的

190
00:09:07,120 --> 00:09:08,550
因为现在是空的

191
00:09:08,550 --> 00:09:10,490
接下来物品二

192
00:09:10,490 --> 00:09:15,000
同样呢，第一个能放置在的是集装箱里

193
00:09:15,000 --> 00:09:18,000
物品三体积为七

194
00:09:18,000 --> 00:09:20,820
第一个集装箱放不下，诶

195
00:09:20,820 --> 00:09:24,930
应该呢，放到编号一的集装箱当中

196
00:09:24,930 --> 00:09:27,440
放置之后再来看物品四

197
00:09:27,440 --> 00:09:29,720
容量为三，诶

198
00:09:29,720 --> 00:09:31,940
在集装箱零当中啊

199
00:09:31,940 --> 00:09:33,800
还是呢，能够放下去的

200
00:09:33,800 --> 00:09:35,320
那把4号物品呢

201
00:09:35,320 --> 00:09:38,060
放到0号集装箱

202
00:09:38,060 --> 00:09:41,590
再来看5号物品容量为五

203
00:09:41,590 --> 00:09:43,390
一号放不下

204
00:09:43,390 --> 00:09:45,050
0号也放不下

205
00:09:45,050 --> 00:09:49,230
第一个能放置它的应该是2号集装箱

206
00:09:49,680 --> 00:09:53,240
接下来物品六，体积为四

207
00:09:53,240 --> 00:09:55,750
0号集装箱放不下

208
00:09:55,750 --> 00:09:58,050
一号集装箱放不下

209
00:09:58,050 --> 00:10:01,460
只能呢放到2号集装箱当中去

210
00:10:01,460 --> 00:10:05,130
然后7号物品容量为二

211
00:10:05,130 --> 00:10:07,370
0号集装箱放不下

212
00:10:07,370 --> 00:10:09,090
但是呢，一号物品

213
00:10:09,090 --> 00:10:12,230
一号集装箱能够呢，放下物品

214
00:10:12,230 --> 00:10:16,410
其接下来再来看8号物品的话

215
00:10:16,410 --> 00:10:17,910
能够放在哪里呢

216
00:10:17,910 --> 00:10:19,090
0号放不下

217
00:10:19,090 --> 00:10:20,270
一号放不下

218
00:10:20,270 --> 00:10:22,610
2号同样放不下

219
00:10:22,610 --> 00:10:24,650
虽然它容量较小

220
00:10:24,650 --> 00:10:28,840
但是呢，只能选择一个新的集装箱来放置了

221
00:10:28,840 --> 00:10:32,580
那接下来放到集装箱三当中

222
00:10:32,580 --> 00:10:36,390
9号物品容量为六的话

223
00:10:36,390 --> 00:10:40,210
只能够呢，放到集装箱三当中呢

224
00:10:40,210 --> 00:10:43,460
最后物品十容量呢

225
00:10:43,460 --> 00:10:45,340
体积是等于二的

226
00:10:45,340 --> 00:10:49,520
但是前面零、一、二、三集装箱都放不下

227
00:10:49,520 --> 00:10:52,480
只能呢，重新打开一个箱子

228
00:10:52,480 --> 00:10:55,470
放到集装箱四当中

229
00:10:55,470 --> 00:10:57,730
一共用了几个箱子呢

230
00:10:57,730 --> 00:10:58,910
五个箱子

231
00:10:58,910 --> 00:11:02,300
这是啊，最先适宜策略它的结果

232
00:11:02,300 --> 00:11:05,750
那如果是最优势一策略呢

233
00:11:05,750 --> 00:11:07,950
首先物品一的话

234
00:11:07,950 --> 00:11:10,170
可以放入一个能，诶

235
00:11:10,170 --> 00:11:11,730
能够容纳它

236
00:11:11,730 --> 00:11:14,640
并且剩余体积最小的集装箱

237
00:11:14,640 --> 00:11:16,870
现在集装箱都为空

238
00:11:16,870 --> 00:11:18,790
剩余体积都为零

239
00:11:18,790 --> 00:11:22,190
那我们呢，直接放在0号集装箱

240
00:11:22,190 --> 00:11:23,310
接下来

241
00:11:23,310 --> 00:11:25,470
物品二容

242
00:11:25,470 --> 00:11:29,040
剩余最小的应该是集装箱零

243
00:11:29,040 --> 00:11:30,520
剩余容量为六

244
00:11:30,520 --> 00:11:34,050
其他的集装箱剩余容量都是为十的

245
00:11:34,050 --> 00:11:35,620
所以2号物品啊

246
00:11:35,620 --> 00:11:38,770
放到编号零的集装箱当中

247
00:11:38,770 --> 00:11:40,040
放完之后

248
00:11:40,040 --> 00:11:42,720
3号物品体积为七

249
00:11:42,720 --> 00:11:46,470
集装箱零剩余容量只有四

250
00:11:46,470 --> 00:11:48,870
是剩余容量最小的

251
00:11:48,870 --> 00:11:51,750
但是能不能容纳物品三呢

252
00:11:51,750 --> 00:11:53,900
并不能容纳，会爆掉

253
00:11:53,900 --> 00:11:57,030
所以呢，需要打开一个新的箱子

254
00:11:57,030 --> 00:11:59,230
放置物品三

255
00:11:59,230 --> 00:12:02,730
接下来物品四容量呢

256
00:12:02,730 --> 00:12:05,070
剩余最小的，诶

257
00:12:05,070 --> 00:12:07,750
集装箱零剩余容量为四

258
00:12:07,750 --> 00:12:10,450
集装箱一剩余容量为三

259
00:12:10,450 --> 00:12:11,390
谁更小

260
00:12:11,390 --> 00:12:13,610
编号一的箱子

261
00:12:13,610 --> 00:12:16,770
所以啊，物品四容量为三的话

262
00:12:16,770 --> 00:12:20,730
刚好放到集装箱一当中

263
00:12:21,190 --> 00:12:26,110
集装箱一放完4号物品之后没有容量了

264
00:12:26,110 --> 00:12:27,450
所以剩下的物品啊

265
00:12:27,450 --> 00:12:29,510
不用考虑集装箱一了

266
00:12:29,510 --> 00:12:33,280
那接下来物品五体积为五

267
00:12:33,280 --> 00:12:36,680
集装箱零剩余四的容量放不下

268
00:12:36,680 --> 00:12:39,300
只能呢重新打开一个箱子了

269
00:12:39,300 --> 00:12:42,630
那对于物品六容量为四

270
00:12:42,630 --> 00:12:44,870
如果放在集装箱里

271
00:12:44,870 --> 00:12:46,270
剩余容量为四

272
00:12:46,270 --> 00:12:48,910
集装箱二剩余容量为五

273
00:12:48,910 --> 00:12:50,110
谁更小

274
00:12:50,110 --> 00:12:52,300
0号集装箱更小

275
00:12:52,300 --> 00:12:53,780
所以这里啊

276
00:12:53,780 --> 00:12:57,700
物品六应该放在0号箱子上

277
00:12:57,700 --> 00:13:00,760
这与我们前面的最先适宜策略

278
00:13:00,760 --> 00:13:03,730
就存在一定的区别了啊

279
00:13:03,730 --> 00:13:06,220
那后面再来看物品七

280
00:13:06,220 --> 00:13:09,140
一剩余容量最小的

281
00:13:09,140 --> 00:13:12,420
应该呢，是从集装箱二开始了

282
00:13:12,420 --> 00:13:14,680
零和一都放完了

283
00:13:14,680 --> 00:13:16,970
7号物品体积为二

284
00:13:16,970 --> 00:13:19,590
放在集装箱二当中

285
00:13:19,590 --> 00:13:23,500
然后呢，8号物品体积为三

286
00:13:23,500 --> 00:13:27,380
剩余容量最小的应该呢，是集装箱二

287
00:13:27,380 --> 00:13:29,660
刚刚好能够放进去

288
00:13:29,660 --> 00:13:32,420
那剩下物品酒

289
00:13:32,420 --> 00:13:35,420
前面三个箱子都装满了

290
00:13:35,420 --> 00:13:40,600
所以呢，要重新打开编号三的集装箱

291
00:13:40,600 --> 00:13:42,340
放完之后啊

292
00:13:42,340 --> 00:13:46,860
再把物品十放到呢集装箱三当中

293
00:13:46,860 --> 00:13:50,260
这是剩余容量最小的一个箱子啦

294
00:13:50,560 --> 00:13:52,820
那这样来看的话

295
00:13:52,820 --> 00:13:55,990
最优势一策略需要几个箱子呢

296
00:13:55,990 --> 00:13:58,150
四个箱子就足够了

297
00:13:58,150 --> 00:14:00,930
那很明显我们能够看到呢

298
00:14:00,930 --> 00:14:05,340
最优势一策略它的箱子数会更少一些

299
00:14:05,340 --> 00:14:08,040
那也就是说呢，我们在这里啊

300
00:14:08,040 --> 00:14:09,860
利用贪心法的策略呢

301
00:14:09,860 --> 00:14:13,030
其实并没有得到最优解

302
00:14:13,030 --> 00:14:17,590
所以这道题第11空能否得到最优解呢

303
00:14:17,590 --> 00:14:20,820
哎，不能，应该呢，填写否

304
00:14:20,820 --> 00:14:24,670
后面已经告诉你填写的内容呢

305
00:14:24,670 --> 00:14:26,400
到底是能还是否

306
00:14:26,400 --> 00:14:27,500
既然是否的话

307
00:14:27,500 --> 00:14:30,680
一定呢，要注意填空填的是否

308
00:14:30,680 --> 00:14:32,020
那这是呢

309
00:14:32,020 --> 00:14:34,820
问题三的实例部分

310
00:14:36,140 --> 00:14:39,680
那这是呢，问题三的实例部分

311
00:14:39,680 --> 00:14:45,380
接下来呢，我们再回到代码部分来查看填空

312
00:14:45,530 --> 00:14:48,290
接下来呢，回到代码部分

313
00:14:48,290 --> 00:14:51,630
那我们看到呢，这里缺失了四个填空

314
00:14:51,630 --> 00:14:55,340
首先呢，看一下最先适宜策略声明了

315
00:14:55,340 --> 00:14:56,520
变量 I 和 J 

316
00:14:56,520 --> 00:14:59,010
K 呢，初始赋值等于零

317
00:14:59,010 --> 00:15:01,080
for 循环 I 等于零

318
00:15:01,080 --> 00:15:02,520
I 小于 N ， I 加加

319
00:15:02,520 --> 00:15:06,040
对 B 数组初始赋值大家都为零

320
00:15:06,040 --> 00:15:08,520
接下来 for 循环 I 等于零

321
00:15:08,520 --> 00:15:10,320
I 小于 N ， I 加

322
00:15:10,320 --> 00:15:12,530
缺失了第一个填空

323
00:15:12,530 --> 00:15:18,140
while c 减 B ， J 小于 SI 的时候接加加

324
00:15:18,140 --> 00:15:21,200
那这当中啊，我们会发现呢

325
00:15:21,200 --> 00:15:26,330
J 作为循环变量并没有初始赋值

326
00:15:26,330 --> 00:15:30,850
所以这里缺失的是 J 的初始赋值

327
00:15:30,850 --> 00:15:33,540
J 初始化应该等于多少呢

328
00:15:33,540 --> 00:15:36,820
诶，应该从编号零开始

329
00:15:36,820 --> 00:15:41,450
第一个填空缺失的是 J 等于零

330
00:15:41,480 --> 00:15:46,260
那接着再来看我们呢，在 for 循环当中

331
00:15:46,260 --> 00:15:49,800
嵌套的 while 循环所做的操作是什么呢

332
00:15:49,800 --> 00:15:53,080
C 是箱子的总容量

333
00:15:53,080 --> 00:15:55,260
B 阶呢，是我们啊

334
00:15:55,260 --> 00:15:58,980
在 B 数组当中记录的第七个箱子

335
00:15:58,980 --> 00:16:01,410
已经装入的容量

336
00:16:01,410 --> 00:16:03,510
那剪完之后是什么

337
00:16:03,510 --> 00:16:05,770
是 B 、 J 这个箱子啊

338
00:16:05,770 --> 00:16:08,620
当前能放入多大的物品

339
00:16:08,620 --> 00:16:12,720
如果剩余的容量是小于

340
00:16:12,720 --> 00:16:15,260
第 I 个物品的体积的话

341
00:16:15,260 --> 00:16:16,420
说明放不下

342
00:16:16,420 --> 00:16:17,650
放不下怎么办

343
00:16:17,650 --> 00:16:20,770
接佳佳尝试下一个箱子

344
00:16:20,770 --> 00:16:22,380
直到放置

345
00:16:22,380 --> 00:16:23,990
满足要求的话

346
00:16:23,990 --> 00:16:25,650
说明这是我们啊

347
00:16:25,650 --> 00:16:28,050
放入的这个箱子啦

348
00:16:28,050 --> 00:16:32,030
那放入的如何来表示放置呢

349
00:16:32,030 --> 00:16:35,620
整个箱子的容量 D 

350
00:16:35,620 --> 00:16:40,030
接个箱子已经放置的是 B 阶

351
00:16:40,030 --> 00:16:44,120
然后呢，总容量是等于 C 的

352
00:16:44,120 --> 00:16:47,260
C 减去 BJ 是剩余容量

353
00:16:47,260 --> 00:16:50,340
跟我们要放入的物品 I 

354
00:16:50,340 --> 00:16:54,410
它的体积 SI 进行比较

355
00:16:54,410 --> 00:16:56,570
能够放置的话就放

356
00:16:56,570 --> 00:16:57,810
不能放置的话

357
00:16:57,810 --> 00:16:59,850
尝试下一个箱子

358
00:16:59,850 --> 00:17:02,030
那如果说满足要求

359
00:17:02,030 --> 00:17:04,280
能放第二个填空

360
00:17:04,280 --> 00:17:07,720
缺失的就是放置物品这样的逻辑

361
00:17:07,720 --> 00:17:11,490
那如果说这个物品啊，放进去了

362
00:17:11,490 --> 00:17:13,980
如何来表示放置呢

363
00:17:13,980 --> 00:17:18,040
说明 BJ 现在的容量变得更大了

364
00:17:18,040 --> 00:17:19,099
那里面呢

365
00:17:19,099 --> 00:17:20,839
唉，剩余容量更小了

366
00:17:20,839 --> 00:17:23,020
已放置的物品呢，更大了

367
00:17:23,020 --> 00:17:24,300
大到哪里呢

368
00:17:24,300 --> 00:17:27,020
是当前 BJ 的数值

369
00:17:27,020 --> 00:17:31,970
加上我们放入的物品 I 的体积 SI 

370
00:17:31,970 --> 00:17:33,650
这个放置之后啊

371
00:17:33,650 --> 00:17:38,150
就是我们新的 BJ 的占据容量

372
00:17:38,150 --> 00:17:43,030
剩余容量呢，就是 C 减去新的 BJ 就满足要求了

373
00:17:43,030 --> 00:17:47,890
那这种啊，是尝试放入第一个能放入的箱子

374
00:17:47,890 --> 00:17:50,360
那我们一共用了多少个箱子呢

375
00:17:50,360 --> 00:17:53,710
唉，跟技术 K 来进行比较

376
00:17:53,710 --> 00:17:55,520
K 记录的是啊

377
00:17:55,520 --> 00:17:58,160
我们能够放置的箱子数

378
00:17:58,160 --> 00:18:01,380
如果说放入到 J 当中的话

379
00:18:01,380 --> 00:18:02,440
看一看呢

380
00:18:02,440 --> 00:18:06,260
哎， K 和 J 加一谁比较大

381
00:18:06,420 --> 00:18:08,520
为什么是 J 加一啊

382
00:18:08,520 --> 00:18:11,810
J 的变量是从零开始取值的

383
00:18:11,810 --> 00:18:13,350
箱子的个数呢

384
00:18:13,350 --> 00:18:16,610
应该是编号加一才是满足要求的

385
00:18:16,610 --> 00:18:18,410
那总的个数啊

386
00:18:18,410 --> 00:18:20,530
与之前的 K 来比一比

387
00:18:20,530 --> 00:18:21,870
谁比较大

388
00:18:21,870 --> 00:18:24,690
它呢，就是最终的箱子数

389
00:18:24,690 --> 00:18:29,660
这是啊，返回我们最终箱子的计数值

390
00:18:29,660 --> 00:18:33,230
那第一空和第二空就填写完了

391
00:18:33,230 --> 00:18:36,640
接下来最优势一策略的代码啊

392
00:18:36,640 --> 00:18:39,240
首先呢，声明的变量 I 、 J 

393
00:18:39,240 --> 00:18:41,430
还有呢， mini m 和 temp 

394
00:18:41,430 --> 00:18:43,910
那一般呢， mini 的填空啊

395
00:18:43,910 --> 00:18:45,370
是最小值

396
00:18:45,370 --> 00:18:47,630
如果比最小值还小的话

397
00:18:47,630 --> 00:18:50,080
会要求呢，修改最小值

398
00:18:50,080 --> 00:18:52,780
接下来 K 声明，诶

399
00:18:52,780 --> 00:18:53,760
它的定义啊

400
00:18:53,760 --> 00:18:54,940
K 是等于零的

401
00:18:54,940 --> 00:18:56,960
这里啊，没有对 K 进行声明

402
00:18:56,960 --> 00:18:59,670
其实用起来的话可能会存在问题

403
00:18:59,670 --> 00:19:01,600
我们在考试当中啊

404
00:19:01,600 --> 00:19:03,560
看到的代码很多呢

405
00:19:03,560 --> 00:19:05,460
都是存在瑕疵的

406
00:19:05,460 --> 00:19:08,340
主要呢，还是分析他的逻辑

407
00:19:08,340 --> 00:19:10,040
接下来 for 循环

408
00:19:10,040 --> 00:19:12,840
对 B 数组进行初始赋值

409
00:19:12,840 --> 00:19:15,550
然后第二个 for 循环

410
00:19:15,550 --> 00:19:19,140
那初始就是呢，最小剩余容量

411
00:19:19,140 --> 00:19:22,430
最开始呢，应该是等于箱子容量的

412
00:19:22,430 --> 00:19:25,140
M 呢，表示的是计数值

413
00:19:25,140 --> 00:19:26,960
表示呢，最终箱子啊

414
00:19:26,960 --> 00:19:28,960
它呢到底有多少

415
00:19:29,020 --> 00:19:32,380
接下来的 for 循环对

416
00:19:32,380 --> 00:19:35,450
来进行变量的计数

417
00:19:35,450 --> 00:19:37,290
变量的计数之后啊

418
00:19:37,290 --> 00:19:41,850
temp 值等于 C 减去 BJ 和 SI 

419
00:19:41,850 --> 00:19:43,680
那 B 阶是什么

420
00:19:43,680 --> 00:19:45,840
我们之前说了 BJ 啊

421
00:19:45,840 --> 00:19:48,180
记录的是阶号箱子

422
00:19:48,180 --> 00:19:51,530
它所占据的容量值

423
00:19:51,530 --> 00:19:53,250
这是你的 B 级

424
00:19:54,490 --> 00:20:00,030
SI 呢，是当前想要放置的物品容量

425
00:20:00,030 --> 00:20:04,950
用 C 减去 SI 减去 B 阶表示 temp 

426
00:20:04,950 --> 00:20:11,140
那这个 temp 啊，是尝试放置之后剩余的容量值

427
00:20:11,140 --> 00:20:14,170
剩余的容量找到之后

428
00:20:14,170 --> 00:20:16,910
接下来如果 temp 大于零

429
00:20:16,910 --> 00:20:18,460
说明能放得下

430
00:20:18,460 --> 00:20:20,740
并且呢，这个 temp 应该呢

431
00:20:20,740 --> 00:20:22,660
是小于最小容量的

432
00:20:22,660 --> 00:20:24,130
那说明唉

433
00:20:24,130 --> 00:20:26,490
既然比最小容量还要小

434
00:20:26,490 --> 00:20:28,990
说明啊，最小容量应该变了

435
00:20:28,990 --> 00:20:32,010
把它呢，与 temp 进行交换

436
00:20:32,010 --> 00:20:34,700
这是新的最小容量

437
00:20:34,700 --> 00:20:36,830
找到最小容量之后

438
00:20:36,830 --> 00:20:37,230
诶

439
00:20:37,230 --> 00:20:40,820
剩余容量最小就是我们应该放置的位置

440
00:20:40,820 --> 00:20:44,230
那这个箱子啊，就变成了 M 编号

441
00:20:44,230 --> 00:20:48,610
是我们剩余容量最小的箱子编号

442
00:20:48,610 --> 00:20:51,090
拿来呢，装物品的

443
00:20:51,090 --> 00:20:54,310
那同样填空四

444
00:20:54,310 --> 00:20:57,850
缺失的是放物品的这样的一个呢

445
00:20:57,850 --> 00:20:59,670
业务逻辑的代码

446
00:20:59,670 --> 00:21:03,690
那是不是跟第二空填空内容一样呢

447
00:21:03,690 --> 00:21:04,670
不一样呢

448
00:21:04,670 --> 00:21:05,370
注意啊

449
00:21:05,370 --> 00:21:11,290
我们呢，将内部的接传递给了 M 来作为基数

450
00:21:11,290 --> 00:21:14,380
因为 J 在每一轮循环当中

451
00:21:14,380 --> 00:21:16,560
都会呢重新初始化

452
00:21:16,560 --> 00:21:21,160
并且跳出循环的时候会等于 J 加一

453
00:21:21,160 --> 00:21:22,890
并不满足要求

454
00:21:22,890 --> 00:21:26,740
M 才是我们放置的集装箱编号

455
00:21:26,740 --> 00:21:30,790
所以啊，我们修改的是 BM 的容量

456
00:21:30,790 --> 00:21:34,480
那它呢是原有的 BM 容量

457
00:21:34,480 --> 00:21:39,040
加上当前的 SII 物品体积

458
00:21:39,040 --> 00:21:41,910
这就是呢装箱的过程

459
00:21:41,910 --> 00:21:43,470
装箱之后呢

460
00:21:43,470 --> 00:21:48,660
同样返回 K 作为我们的箱子的计数值

461
00:21:48,660 --> 00:21:51,240
整个函数的返回值

462
00:21:51,240 --> 00:21:53,820
那这就是呢代码填空

463
00:21:53,820 --> 00:21:57,050
不分具体代码的运行

464
00:21:57,050 --> 00:22:01,120
后面呢会给大家展示修整之后的代码

465
00:22:01,120 --> 00:22:03,220
在运行环境之中啊

466
00:22:03,220 --> 00:22:05,460
它的执行结果

467
00:22:05,610 --> 00:22:09,280
下面呢给大家展示的是参考答案

468
00:22:09,280 --> 00:22:10,770
关于呢，问题一

469
00:22:10,770 --> 00:22:12,970
它的代码填空。问题二

470
00:22:12,970 --> 00:22:16,170
算法策略和时间复杂度。问题三

471
00:22:16,170 --> 00:22:18,390
实例的结果

472
00:22:19,640 --> 00:22:23,300
下面我们看到的是修正之后的代码

473
00:22:23,300 --> 00:22:25,380
在运行环境当中啊

474
00:22:25,380 --> 00:22:27,370
它的执行结果

475
00:22:27,370 --> 00:22:30,330
那我们这里呢，是以真题为例

476
00:22:30,330 --> 00:22:32,570
给大家呢介绍的一段代码

477
00:22:32,570 --> 00:22:34,970
这是呢，具体的题干

478
00:22:34,970 --> 00:22:37,080
下面呢，是代码说明

479
00:22:37,080 --> 00:22:39,510
以及呢，给我们的实例

480
00:22:39,510 --> 00:22:41,780
接下来呢，在代码当中啊

481
00:22:41,780 --> 00:22:44,760
我们首先呢，定义了两个全局变量

482
00:22:44,760 --> 00:22:46,480
一个呢，是 N 等于十

483
00:22:46,480 --> 00:22:48,530
一个呢是 C 等于十

484
00:22:48,530 --> 00:22:50,590
N 是物品的个数

485
00:22:50,590 --> 00:22:54,170
C 呢，是箱子的总容量

486
00:22:54,170 --> 00:22:56,810
接下来呢，用一个数组啊

487
00:22:56,810 --> 00:23:00,380
记录了我们的物品体积

488
00:23:00,380 --> 00:23:04,300
然后呢，用 count 1和 count 2来记录呢

489
00:23:04,300 --> 00:23:07,640
我们执行循环的这样的一些过程

490
00:23:07,640 --> 00:23:10,830
下面呢，是声明的两个函数

491
00:23:10,830 --> 00:23:12,890
一个呢是最优，是以

492
00:23:12,890 --> 00:23:15,480
一个呢是最先是以

493
00:23:15,480 --> 00:23:17,740
那具体的代码在后面呢

494
00:23:17,740 --> 00:23:19,510
会有详细的展示

495
00:23:19,510 --> 00:23:21,940
我们增加了一个主函数

496
00:23:21,940 --> 00:23:24,900
来调用后面的两个功能函数

497
00:23:24,900 --> 00:23:28,080
分别呢，是最先是以，一个呢是最优

498
00:23:28,080 --> 00:23:29,220
是以策略

499
00:23:29,220 --> 00:23:30,340
那我们呢

500
00:23:30,340 --> 00:23:32,730
声明两个变量，呃

501
00:23:32,730 --> 00:23:34,330
结果一和结果二

502
00:23:34,330 --> 00:23:39,370
分别来记录我们的函数调用返回值

503
00:23:39,370 --> 00:23:41,700
那调用之后啊

504
00:23:41,700 --> 00:23:43,840
首先呢，调用的是 first 

505
00:23:43,840 --> 00:23:47,530
也就是最先适宜循环的结果

506
00:23:47,530 --> 00:23:50,410
在最先适宜循环当中啊

507
00:23:50,410 --> 00:23:55,990
声明变量 I 、 J 、 A 以及 KK 的初始值是等于零的

508
00:23:55,990 --> 00:23:57,860
然后呢，我们又啊

509
00:23:57,860 --> 00:24:00,760
声明了 S 数组和 B 数组

510
00:24:00,760 --> 00:24:02,760
第一轮 for 循环

511
00:24:02,760 --> 00:24:05,490
对 B 数组初始赋值

512
00:24:05,490 --> 00:24:07,430
大家呢，都等于零

513
00:24:07,430 --> 00:24:12,920
这是将所有集装箱初始化占据的容量为零

514
00:24:12,920 --> 00:24:14,500
里面呢没有东西

515
00:24:14,500 --> 00:24:20,370
那 SI 等于 ti 呢，是将我们全局定义的 T 数组

516
00:24:20,370 --> 00:24:25,300
也就是，呃，物品的体积啊，传递给 SI 数组

517
00:24:25,300 --> 00:24:27,300
接下来 for 循环

518
00:24:27,300 --> 00:24:31,930
首先呢要对变量 J 进行初始赋值

519
00:24:31,930 --> 00:24:36,740
这是我们啊，在 while 循环当中要用到的一个变量

520
00:24:36,740 --> 00:24:40,430
也是呢，代码填空当中的第一个空

521
00:24:40,430 --> 00:24:44,450
接下来缺失了代码填空二的部分

522
00:24:44,450 --> 00:24:47,030
这是一个呢，具体的业务逻辑

523
00:24:47,030 --> 00:24:52,890
那我们呢，对整个集装箱它的这个集合当中啊

524
00:24:52,890 --> 00:24:54,590
一个一个的去尝试

525
00:24:54,590 --> 00:24:58,210
第一个能够放置它的是集装箱接

526
00:24:58,210 --> 00:25:01,730
那对于集装箱接来进行装箱

527
00:25:01,730 --> 00:25:03,330
装箱的过程呢

528
00:25:03,330 --> 00:25:05,360
就是在之前啊

529
00:25:05,360 --> 00:25:08,380
集装箱接的容量基础上呢

530
00:25:08,380 --> 00:25:11,020
加上当前的物品 I 的体积

531
00:25:11,020 --> 00:25:14,240
得到的呢，就是装箱之后的体积了

532
00:25:14,240 --> 00:25:16,160
那装箱之后呢

533
00:25:16,160 --> 00:25:18,060
哎，我们可以啊

534
00:25:18,060 --> 00:25:20,960
对集装箱 B 接尝试输出

535
00:25:20,960 --> 00:25:23,420
去查看一下呢，中间的结果

536
00:25:23,420 --> 00:25:28,090
然后呢，利用技术 count 来进行调

537
00:25:28,090 --> 00:25:29,390
输出格式

538
00:25:29,390 --> 00:25:31,660
每五个啊，进行换行

539
00:25:31,660 --> 00:25:36,200
这是能最先适宜策略 first fit 

540
00:25:36,200 --> 00:25:37,960
那调用之后呢

541
00:25:37,960 --> 00:25:39,740
输出结果一

542
00:25:39,740 --> 00:25:44,310
接下来呢，调用的是最优势与策略 best fit 

543
00:25:44,310 --> 00:25:46,550
然后呢，返回结果 R 

544
00:25:46,550 --> 00:25:49,010
那对于 best fit 呢

545
00:25:49,010 --> 00:25:51,730
它也声明了变量有 IJ 

546
00:25:51,730 --> 00:25:56,410
还有呢， mini m 和 temp k 的初始赋值等于零

547
00:25:56,410 --> 00:26:00,970
对 BN 和 SN 啊来进行初始化

548
00:26:00,970 --> 00:26:02,700
初始化之后

549
00:26:02,700 --> 00:26:07,380
接下来呢，我们要找剩余容量最小的集装箱

550
00:26:07,380 --> 00:26:10,510
那哪一个箱子的剩余容量最小呢

551
00:26:10,510 --> 00:26:15,620
我们用 mini 来记录最小剩余容量

552
00:26:15,620 --> 00:26:17,800
在记录的过程当中呢

553
00:26:17,800 --> 00:26:22,110
可以去遍历整个集装箱的数组

554
00:26:22,110 --> 00:26:24,430
谁最小就把这个取值呢

555
00:26:24,430 --> 00:26:26,400
传递给 min 

556
00:26:26,400 --> 00:26:27,910
传递之后啊

557
00:26:27,910 --> 00:26:29,250
那这个地方呢

558
00:26:29,250 --> 00:26:31,390
传递的过程就是呢

559
00:26:31,390 --> 00:26:34,260
缺失的第三个代码填空

560
00:26:34,260 --> 00:26:36,720
那谁是剩余容量呢

561
00:26:36,720 --> 00:26:41,740
应该是用总容量 C 减去当前的集装箱 B 接

562
00:26:41,740 --> 00:26:43,410
那我们可以看到啊

563
00:26:43,410 --> 00:26:45,190
在题目当中呢

564
00:26:45,190 --> 00:26:48,030
还要看看物品能不能放进去

565
00:26:48,030 --> 00:26:54,580
所以呢，我们同时还减去了当前物品的体积

566
00:26:54,580 --> 00:26:58,180
将这个数值用 temp 记录下来

567
00:26:58,180 --> 00:26:59,950
如果 tap 小于零

568
00:26:59,950 --> 00:27:01,390
说明放不下

569
00:27:01,390 --> 00:27:06,230
那尝试呢，下一个箱子如果大于等于零

570
00:27:06,230 --> 00:27:08,230
说明能够放置

571
00:27:08,230 --> 00:27:09,930
既然能够放置的话

572
00:27:09,930 --> 00:27:13,650
看看呢， temp 和 mini 的值谁比较小

573
00:27:13,650 --> 00:27:16,110
对于最小变量啊

574
00:27:16,110 --> 00:27:18,390
如果它比其他值要大

575
00:27:18,390 --> 00:27:20,510
说明它不再是最小值了

576
00:27:20,510 --> 00:27:23,130
我们需要呢，对它进行调整

577
00:27:23,360 --> 00:27:26,540
那也就是说呢，既然 temp 比它小

578
00:27:26,540 --> 00:27:29,320
那把 temp 呢，传给 mini 就可以了

579
00:27:29,320 --> 00:27:32,170
这是呢，第三个缺失的填空

580
00:27:32,170 --> 00:27:35,500
那当前最小的集装箱

581
00:27:35,500 --> 00:27:36,360
剩余容

582
00:27:36,360 --> 00:27:39,240
最小的集装箱编号传递给 M 

583
00:27:39,240 --> 00:27:42,910
我们呢，利用 M 来进行装箱

584
00:27:42,910 --> 00:27:44,850
那这个 M 装箱啊

585
00:27:44,850 --> 00:27:47,850
就是呢，缺失的第四个代码

586
00:27:47,850 --> 00:27:52,230
那第四个代码填空装箱如何来装呢

587
00:27:52,230 --> 00:27:54,810
同样编号为 M 的箱子

588
00:27:54,810 --> 00:27:59,850
用原本的占据体积加上当前的物品 I 

589
00:27:59,850 --> 00:28:02,820
就是呢，装入物品 I 之后

590
00:28:02,820 --> 00:28:04,880
编号 M 的箱子啊

591
00:28:04,880 --> 00:28:07,390
它所占据的容量

592
00:28:07,390 --> 00:28:10,550
这也是呢，核心的一个呢，代码逻辑

593
00:28:10,550 --> 00:28:13,410
我们同样呢，可以把 BM 呢

594
00:28:13,410 --> 00:28:16,090
依次的输出看一看结果

595
00:28:16,090 --> 00:28:18,220
在这个输出的过程当中呢

596
00:28:18,220 --> 00:28:21,890
可以利用 count 值来调整输出格式

597
00:28:21,890 --> 00:28:25,760
每五个元素来进行换行

598
00:28:25,760 --> 00:28:30,270
最终呢，将集装箱的个数返回给结果二

599
00:28:30,270 --> 00:28:32,430
输出结果二

600
00:28:32,430 --> 00:28:37,630
那我们呢，来看一下执行的结果是什么样的

601
00:28:38,470 --> 00:28:40,250
执行之后啊

602
00:28:40,250 --> 00:28:41,790
我们能够看到呢

603
00:28:41,790 --> 00:28:43,660
最先是一策略

604
00:28:43,660 --> 00:28:46,330
每一个箱子它里面呢

605
00:28:46,330 --> 00:28:48,770
所放置的这样的数值

606
00:28:48,770 --> 00:28:51,140
它中间呢放置的过

607
00:28:51,140 --> 00:28:55,360
以及呢，最终所需要的箱子个数应该是五个

608
00:28:55,360 --> 00:28:58,720
最优势宜策略呢，它的装箱过

609
00:28:58,720 --> 00:29:01,260
以及呢所需要的集装箱个

610
00:29:01,260 --> 00:29:02,780
应该是四个

611
00:29:02,780 --> 00:29:07,870
这个也是呢我们实例三所考察的内容

612
00:29:08,030 --> 00:29:11,770
我们呢，以真题的形式介绍了一下

613
00:29:11,770 --> 00:29:15,290
如何利用贪心法来解决背包问题

614
00:29:15,290 --> 00:29:18,470
也带大家呢看了一下题目的代码啊

615
00:29:18,470 --> 00:29:21,170
修正之后在运行环境当中呢

616
00:29:21,170 --> 00:29:22,710
它的执行过程

617
00:29:22,710 --> 00:29:24,760
感谢大家的聆听

618
00:29:24,760 --> 00:29:28,620
希望本视频能给大家能提供一些帮助
