1
00:00:00,160 --> 00:00:03,260
接下来给大家介绍到的

2
00:00:03,260 --> 00:00:06,720
关于呢，算法当中的背包问题

3
00:00:06,720 --> 00:00:09,860
背包问题在软设考试当中啊

4
00:00:09,860 --> 00:00:12,980
上午题和下午题都有呢出现

5
00:00:12,980 --> 00:00:15,700
很多同学都会呢，好奇地问道

6
00:00:15,700 --> 00:00:17,510
什么是背包

7
00:00:17,510 --> 00:00:22,080
那我们的专题二就是以背包问题为主题

8
00:00:22,080 --> 00:00:24,660
带大家呢，来了解一下

9
00:00:24,660 --> 00:00:26,930
在本视频当中

10
00:00:26,930 --> 00:00:29,810
首先呢，我们简单的看一下

11
00:00:29,810 --> 00:00:33,590
背包问题究竟是怎么回事儿

12
00:00:33,590 --> 00:00:36,490
然后呢，会以真题为例

13
00:00:36,490 --> 00:00:37,870
介绍一下呢

14
00:00:37,870 --> 00:00:42,200
如何利用动态规划法来解决背包问题

15
00:00:42,200 --> 00:00:45,430
如何利用贪心法来解决背包问题

16
00:00:45,430 --> 00:00:51,110
以及呢，如何利用回溯法来解决背包问题

17
00:00:51,110 --> 00:00:52,440
背包问题啊

18
00:00:52,440 --> 00:00:56,730
它是一个呢，问题的情景描述的总结

19
00:00:56,730 --> 00:00:59,030
对于这样的一类问题

20
00:00:59,030 --> 00:01:04,150
我们呢，可以使用不同的算法策略来解决

21
00:01:04,150 --> 00:01:06,830
那究竟什么是背包呢

22
00:01:06,830 --> 00:01:09,500
我们呢，假设现在呢

23
00:01:09,500 --> 00:01:10,820
有一个背包

24
00:01:10,820 --> 00:01:14,340
我们要向背包里面来装东西

25
00:01:14,340 --> 00:01:16,640
在装东西之前呢

26
00:01:16,640 --> 00:01:19,840
假设有 N 个物品

27
00:01:19,840 --> 00:01:21,670
第 I 个物品啊

28
00:01:21,670 --> 00:01:26,730
它的价值和重量分别记作 vi 和 WI 

29
00:01:26,730 --> 00:01:30,830
我们呢，用数组来进行记录就可以了

30
00:01:30,830 --> 00:01:35,470
其中 vi 和 WI 一定呢，是非负数的

31
00:01:35,470 --> 00:01:38,660
背包它有自己的容量限制

32
00:01:38,660 --> 00:01:43,120
不能呢，超过 WW 呢，也是非负数

33
00:01:43,120 --> 00:01:49,030
现在需要考虑如何选择装入背包的物品

34
00:01:49,030 --> 00:01:52,150
使装入背包这样的物品啊

35
00:01:52,150 --> 00:01:54,830
它的总价值最大

36
00:01:54,830 --> 00:01:58,220
那如何来考虑这一类问题呢

37
00:01:58,220 --> 00:02:00,980
背包问题分成两大类

38
00:02:00,980 --> 00:02:03,340
第一类呢，是部分背包

39
00:02:03,340 --> 00:02:07,160
也就是说呢，这个物品啊，它是可分割的

40
00:02:07,160 --> 00:02:11,260
如果说最后一个物品放不进去怎么办呢

41
00:02:11,260 --> 00:02:12,580
把这个物品啊

42
00:02:12,580 --> 00:02:15,660
按剩余的容量切割一

43
00:02:15,660 --> 00:02:17,060
再放进去

44
00:02:17,060 --> 00:02:18,840
那这一类物品啊

45
00:02:18,840 --> 00:02:20,360
我们放入的时

46
00:02:20,360 --> 00:02:24,660
只需要呢，依次选择单位价值最大的

47
00:02:24,660 --> 00:02:26,060
放入之后呢

48
00:02:26,060 --> 00:02:27,860
如果放不下的话

49
00:02:27,860 --> 00:02:29,490
切割放进去

50
00:02:29,490 --> 00:02:33,400
因为啊，依次选择的都是单位价值最大

51
00:02:33,400 --> 00:02:39,200
最终呢，总容量当中对应的价值也是呢，最大值

52
00:02:39,200 --> 00:02:41,550
这时啊，部分背包问题

53
00:02:41,550 --> 00:02:43,430
它的解决相对来说呢

54
00:02:43,430 --> 00:02:45,640
是没有策略可讲

55
00:02:45,640 --> 00:02:48,960
直接呢，选择单位价值最大就可以了

56
00:02:48,960 --> 00:02:51,500
是比较好理解的一个内容

57
00:02:51,500 --> 00:02:56,050
第二类背包问题呢，叫做零一背包

58
00:02:56,050 --> 00:02:58,200
什么是零一背包呢

59
00:02:58,200 --> 00:03:01,240
这个物品啊，是不可分割的

60
00:03:01,240 --> 00:03:03,590
要么呢，你都放进去

61
00:03:03,590 --> 00:03:05,960
要么呢，都不放进去

62
00:03:05,960 --> 00:03:07,070
比如说呢

63
00:03:07,070 --> 00:03:10,430
唉，如果我们在收拾行李箱的时候

64
00:03:10,430 --> 00:03:12,780
你的一件衣服塞不下了

65
00:03:12,780 --> 00:03:15,970
你总不能把这衣服给裁掉吧

66
00:03:15,970 --> 00:03:19,440
那这个衣服放进去也是没有意义的

67
00:03:19,440 --> 00:03:20,690
零一背包啊

68
00:03:20,690 --> 00:03:23,510
就是呢，物品不可分割

69
00:03:23,510 --> 00:03:26,760
那它可以用形式化的语言来描述

70
00:03:26,760 --> 00:03:27,150
唉

71
00:03:27,150 --> 00:03:33,080
我们要求一个单位价值最大的物品放置方案

72
00:03:33,080 --> 00:03:34,970
那每一个物品呢

73
00:03:34,970 --> 00:03:37,860
可以选择放或者不放

74
00:03:37,860 --> 00:03:39,550
如果放的话呢

75
00:03:39,550 --> 00:03:42,310
唉， xi 是等于一的

76
00:03:42,310 --> 00:03:47,440
对应的 vi 呢，会计入到物品总价值当中

77
00:03:47,440 --> 00:03:49,450
如果不放的话

78
00:03:49,450 --> 00:03:51,700
xi 呢等于零

79
00:03:51,700 --> 00:03:55,060
那它对应的这个价值 vi 呀

80
00:03:55,060 --> 00:03:59,480
就不会计入到背包的总价值当中去了

81
00:03:59,480 --> 00:04:01,670
最终呢，可以求出啊

82
00:04:01,670 --> 00:04:05,640
我们的背包物品总价值最大的情况

83
00:04:05,640 --> 00:04:08,940
这里面还要满足约束条件

84
00:04:08,940 --> 00:04:10,440
什么样的条件呢

85
00:04:10,440 --> 00:04:14,070
哎，总容量肯定是不能超过 W 的

86
00:04:14,070 --> 00:04:17,690
同样用 xi 来进行记录

87
00:04:17,690 --> 00:04:20,300
如果 xi 等于一的话

88
00:04:20,300 --> 00:04:23,140
我们呢乘以 WI 表示呢

89
00:04:23,140 --> 00:04:25,450
这个物品计入了总容量

90
00:04:25,450 --> 00:04:27,600
如果 SI 等于零呢

91
00:04:27,600 --> 00:04:29,540
表示这个物品我们没有选

92
00:04:29,540 --> 00:04:31,960
就不用呢计入总容量了

93
00:04:31,960 --> 00:04:35,200
只要满足最终的容量之和

94
00:04:35,200 --> 00:04:38,020
小于等于背包容量 W 

95
00:04:38,020 --> 00:04:40,510
就满足了要求

96
00:04:40,510 --> 00:04:47,580
满足要求之后的这个 xi 就是问题的可行解

97
00:04:47,580 --> 00:04:50,620
当可行解方案当中啊

98
00:04:50,620 --> 00:04:52,120
有一个方案

99
00:04:52,120 --> 00:04:55,760
它的物品总价值是其中最大的

100
00:04:55,760 --> 00:04:56,820
那么就是呢

101
00:04:56,820 --> 00:04:57,920
最优解了

102
00:04:57,920 --> 00:05:01,230
这就是啊，零一背包问题

103
00:05:01,230 --> 00:05:06,750
那下面呢，我们假设有一个容量为17的背包

104
00:05:06,750 --> 00:05:09,690
我们要将呢，物品，诶

105
00:05:09,690 --> 00:05:12,270
1234

106
00:05:12,270 --> 00:05:15,020
放置到这个背包当中去

107
00:05:15,020 --> 00:05:18,520
如果是不分背包问题

108
00:05:18,520 --> 00:05:21,940
那依次选择单位价值最大的

109
00:05:21,940 --> 00:05:25,310
首先呢，把第五个物品放置进去

110
00:05:25,310 --> 00:05:29,550
然后呢，再把第三个物品放置进去

111
00:05:29,550 --> 00:05:34,470
放置的时候验证一下这里的重量

112
00:05:34,470 --> 00:05:39,670
容量求和之后有没有超过背包的容量

113
00:05:39,670 --> 00:05:41,820
那如果说没有超过

114
00:05:41,820 --> 00:05:45,160
它还能够啊，放入一个单位容量

115
00:05:45,160 --> 00:05:49,350
我们呢，接着选择单位容量的最大值

116
00:05:49,350 --> 00:05:50,940
那这其中呢

117
00:05:50,940 --> 00:05:53,720
切一个角放进去就可以了

118
00:05:53,720 --> 00:05:56,930
这就是部分背包问题的求解了

119
00:05:56,930 --> 00:06:01,100
零一背包啊，相对来说比较灵活

120
00:06:01,490 --> 00:06:04,620
它有多种解决方案

121
00:06:04,620 --> 00:06:07,150
那零一背包问题的话

122
00:06:07,150 --> 00:06:09,010
它的放置策略呀

123
00:06:09,010 --> 00:06:09,810
可以呢

124
00:06:09,810 --> 00:06:12,730
将整个求解过程看作呢

125
00:06:12,730 --> 00:06:14,970
一系列的决策过程

126
00:06:14,970 --> 00:06:18,750
我们呢，可以看一看各个物品哪些呢

127
00:06:18,750 --> 00:06:20,130
应该放哪些呢

128
00:06:20,130 --> 00:06:21,290
不应该放

129
00:06:21,290 --> 00:06:24,190
那这里面的策略呢，可以有很多种

130
00:06:24,190 --> 00:06:24,750
嗯

131
00:06:24,750 --> 00:06:27,380
第一种呢，这个价值不太大了

132
00:06:27,380 --> 00:06:32,730
优先呢，放置体积最大的这种呢，可以解决，呃

133
00:06:32,730 --> 00:06:35,770
我们要选择体积最大的物品

134
00:06:35,770 --> 00:06:37,310
这类背包一般呢

135
00:06:37,310 --> 00:06:39,380
出现的并不是很多了

136
00:06:39,380 --> 00:06:45,430
其次第二种呢，就是优先放价值最大的物品

137
00:06:45,430 --> 00:06:46,720
比如说呢

138
00:06:46,720 --> 00:06:48,980
下面的五个物品当中啊

139
00:06:48,980 --> 00:06:51,680
价值最大的是物品五

140
00:06:51,680 --> 00:06:53,860
价值呢，是19

141
00:06:53,860 --> 00:06:55,220
放置之后

142
00:06:55,220 --> 00:06:59,160
接着呢，再找下一步最大的应该是谁呢

143
00:06:59,160 --> 00:07:01,710
哎，应该是物品四

144
00:07:01,710 --> 00:07:03,940
价值是11

145
00:07:03,940 --> 00:07:07,940
那接下来再来放置物品三

146
00:07:07,940 --> 00:07:10,470
这个时候我们会发现啊

147
00:07:10,470 --> 00:07:14,120
已经没有空间去放置了

148
00:07:14,120 --> 00:07:16,790
对于零一背包问题来说

149
00:07:16,790 --> 00:07:20,520
超过背包体积我们是放不下的

150
00:07:20,520 --> 00:07:25,350
此时啊，我们会放弃放入该物品

151
00:07:25,350 --> 00:07:28,950
同样，物品二和物品一也是这样子

152
00:07:28,950 --> 00:07:32,490
那这种策略下，我们放置的容量啊

153
00:07:32,490 --> 00:07:36,230
应该呢，是8+9=17

154
00:07:36,230 --> 00:07:39,900
放置的总价值应该是11+19

155
00:07:39,900 --> 00:07:43,040
也就是总价值30

156
00:07:43,040 --> 00:07:44,220
这是哪

157
00:07:44,220 --> 00:07:48,020
依据优先放价值最大

158
00:07:48,020 --> 00:07:49,870
第三种方案呢

159
00:07:49,870 --> 00:07:53,570
可以优先放置单位价值最大的物品

160
00:07:53,570 --> 00:07:54,110
嗯

161
00:07:54,110 --> 00:07:58,740
单位价值最大的第一个呢，是物品五

162
00:07:58,740 --> 00:08:01,620
其次呢，是物品三

163
00:08:01,620 --> 00:08:03,290
放置之后

164
00:08:03,290 --> 00:08:07,530
接下来物品四能否放进去呢

165
00:08:07,530 --> 00:08:10,810
放置物品三和物品五之后

166
00:08:10,810 --> 00:08:13,930
它占据的总容量是16

167
00:08:13,930 --> 00:08:15,840
剩余的容量还有呢

168
00:08:15,840 --> 00:08:17,450
一个空间的位置

169
00:08:17,450 --> 00:08:18,830
剩下的物品啊

170
00:08:18,830 --> 00:08:21,010
都没有办法再去放了

171
00:08:21,010 --> 00:08:23,670
那这个时候它的总价值呢

172
00:08:23,670 --> 00:08:25,520
是29

173
00:08:25,520 --> 00:08:29,600
这是其中一种的放置策略

174
00:08:29,870 --> 00:08:32,950
那这三种放置策略啊

175
00:08:32,950 --> 00:08:34,429
我们会发现呢

176
00:08:34,429 --> 00:08:37,090
优先放置的选择方案

177
00:08:37,090 --> 00:08:42,720
是依据当前的这个角度来考虑的

178
00:08:42,720 --> 00:08:45,940
那依据当前选择的最优策略

179
00:08:45,940 --> 00:08:49,080
这种思想呢，就是贪心法

180
00:08:49,080 --> 00:08:51,720
他的求取思想

181
00:08:51,890 --> 00:08:53,290
接下来呢

182
00:08:53,290 --> 00:08:55,290
再来看方案四

183
00:08:55,290 --> 00:08:57,970
它是呢，按顺序去放置

184
00:08:57,970 --> 00:09:01,390
不合适呢就退出来重新放置

185
00:09:01,390 --> 00:09:06,830
直到呢，尝试完背包能够放置的所有方案

186
00:09:06,830 --> 00:09:09,680
一个呢，有退出来重新放

187
00:09:09,680 --> 00:09:12,950
一个呢，能够探索到所有方案

188
00:09:12,950 --> 00:09:17,730
这种啊，依据的是回溯法的策略

189
00:09:18,170 --> 00:09:20,970
最后我们啊，可以呢

190
00:09:20,970 --> 00:09:24,870
对零一背包问题来刻画最优解

191
00:09:24,870 --> 00:09:25,500
哎

192
00:09:25,500 --> 00:09:29,990
那么如果啊，一个问题的最优解包含了物品 N 

193
00:09:29,990 --> 00:09:31,430
这个时候啊

194
00:09:31,430 --> 00:09:36,570
它的子问题一二到 N 减一的物品

195
00:09:36,570 --> 00:09:38,010
在容量啊

196
00:09:38,010 --> 00:09:42,650
当前容量除掉物品 N 的重量之后呢

197
00:09:42,650 --> 00:09:45,070
仍然是满足最优解

198
00:09:45,070 --> 00:09:50,250
这种形式呢，我们也称之为最优子结构

199
00:09:50,250 --> 00:09:54,320
那如果说这个最优解不包含物品 N 的话

200
00:09:54,320 --> 00:09:55,840
那此时呢

201
00:09:55,840 --> 00:09:58,820
X 1到 XN 减一

202
00:09:58,820 --> 00:10:02,630
构成的就是整个问题的最优解了

203
00:10:02,630 --> 00:10:04,080
这种方式啊

204
00:10:04,080 --> 00:10:08,890
利用的是动态规划法的解决方案

205
00:10:08,890 --> 00:10:11,530
那对于整个背包问题

206
00:10:11,530 --> 00:10:13,430
它的形式化描述呢

207
00:10:13,430 --> 00:10:16,040
我们之前已经介绍过了

208
00:10:16,040 --> 00:10:18,150
那我们呢，将物品啊

209
00:10:18,150 --> 00:10:20,810
依次的放置到背包当中

210
00:10:20,810 --> 00:10:23,340
那是不是所有物品都能放呢

211
00:10:23,340 --> 00:10:24,980
不一定需要呢

212
00:10:24,980 --> 00:10:26,820
根据题目要求

213
00:10:26,820 --> 00:10:30,780
根据呢题干描述的算法策略

214
00:10:30,780 --> 00:10:33,620
长同事放入背包

215
00:10:33,620 --> 00:10:35,700
如果放不下的话

216
00:10:35,700 --> 00:10:40,200
注意呢，可能会放弃这样的一些物品

217
00:10:41,820 --> 00:10:45,420
这是呢，回溯法它的探索方案

218
00:10:45,420 --> 00:10:48,280
首先呢，哎，物品一、二放进去

219
00:10:48,280 --> 00:10:50,920
再来尝试呢三、四、五能不能放

220
00:10:50,920 --> 00:10:53,840
然后呢，尝试物品一、三等等

221
00:10:53,840 --> 00:10:57,650
依次呢，把所有方案都尝试一遍

222
00:10:57,650 --> 00:11:01,430
下面这里呢，是关于动态规划法

223
00:11:01,430 --> 00:11:04,360
解决背包问题的一个递归式

224
00:11:04,360 --> 00:11:07,290
如果说这个递归式当中啊

225
00:11:07,290 --> 00:11:13,180
我们用 C 、 I 、 W 来依次记录问题当中啊

226
00:11:13,180 --> 00:11:16,860
物品 I 在 W 容量当

227
00:11:16,860 --> 00:11:19,700
它的最优解决方案

228
00:11:19,700 --> 00:11:21,920
如果这个要求啊

229
00:11:21,920 --> 00:11:26,670
能够满足 WI 呢，是大于 W 的

230
00:11:26,670 --> 00:11:29,270
说明放不进去怎么办呢

231
00:11:29,270 --> 00:11:33,480
前面一个规模 I 减一就是问题的最优解

232
00:11:33,480 --> 00:11:35,750
如果能够放置的话

233
00:11:35,750 --> 00:11:40,390
那我们呢，可以用前一个规模 I 减一

234
00:11:40,390 --> 00:11:44,440
与当前物品 I 的价值进行求和

235
00:11:44,440 --> 00:11:48,670
在与呢， I 减一规模问题的

236
00:11:48,670 --> 00:11:52,050
二者呢，对比一下谁更大

237
00:11:52,050 --> 00:11:55,320
谁就是我们当前的最优解

238
00:11:55,320 --> 00:12:00,340
那我们这里给大家所列出来的变量

239
00:12:00,340 --> 00:12:03,100
在具体的题干描述当中啊

240
00:12:03,100 --> 00:12:06,240
是有可能发生变化的

241
00:12:06,240 --> 00:12:08,100
大家呢，做题的时

242
00:12:08,100 --> 00:12:12,770
可以呢，代入一些变量来尝试一下

243
00:12:12,770 --> 00:12:14,820
那对于背包问题啊

244
00:12:14,820 --> 00:12:18,560
我们看到呢，最优解他的描述当中呢

245
00:12:18,560 --> 00:12:23,870
能够发现它是具有最优子结构的解决方案

246
00:12:23,870 --> 00:12:27,490
这个时候啊，给大家呢，补充一个知识

247
00:12:27,490 --> 00:12:28,910
什么知识呢

248
00:12:28,910 --> 00:12:32,550
对于具有最优子结构的问题

249
00:12:32,550 --> 00:12:37,620
如果可以利用贪心法去求解的话

250
00:12:37,620 --> 00:12:39,720
贪心法在此时啊

251
00:12:39,720 --> 00:12:43,300
是能够求出最优解的

252
00:12:43,300 --> 00:12:45,230
我们在考试当中呢

253
00:12:45,230 --> 00:12:47,130
一般碰到的贪心法

254
00:12:47,130 --> 00:12:50,380
他求取的都是满意解

255
00:12:50,380 --> 00:12:56,030
但是呢，当出现最优子结构这种说法的时候

256
00:12:56,030 --> 00:12:58,900
具有最优子结构问题描述啊

257
00:12:58,900 --> 00:13:00,060
这个时候呢

258
00:13:00,060 --> 00:13:01,720
贪心法可以呢

259
00:13:01,720 --> 00:13:04,350
直接求出最优解

260
00:13:04,350 --> 00:13:08,770
所以呀，这里呢，对于背包问题来说呢

261
00:13:08,770 --> 00:13:14,470
如果让我们去求一些实例问题

262
00:13:14,470 --> 00:13:16,010
那此时呢

263
00:13:16,010 --> 00:13:17,950
背包问题都是呢

264
00:13:17,950 --> 00:13:19,630
满足最优子结构的

265
00:13:19,630 --> 00:13:23,360
我们直接呢，利用贪心法去尝试

266
00:13:23,360 --> 00:13:27,990
可以快速地求出实例当中的最优解

267
00:13:27,990 --> 00:13:30,020
这就是啊背包问

268
00:13:30,020 --> 00:13:33,860
以及它的解决方案的介绍
