1
00:00:00,000 --> 00:00:03,340
下面看到 CRSC 与 RSC 

2
00:00:03,340 --> 00:00:07,380
CSC 与 RSC 是我们计算机当中

3
00:00:07,380 --> 00:00:10,870
指令体系的两个发展方向

4
00:00:10,870 --> 00:00:13,630
那在软件设计师考试当中呢

5
00:00:13,630 --> 00:00:15,410
它的考察频率啊

6
00:00:15,410 --> 00:00:17,330
其实是有一定的频率的

7
00:00:17,330 --> 00:00:21,560
所以大家需要掌握这两类方向

8
00:00:21,560 --> 00:00:24,560
它所存在的区别

9
00:00:24,560 --> 00:00:27,740
我们在考试当中经常碰到

10
00:00:27,740 --> 00:00:29,750
给大家一些描述判断

11
00:00:29,750 --> 00:00:33,510
这个描述啊，到底说的是 CSC 还是呢

12
00:00:33,510 --> 00:00:38,950
rs c c r s c 与 rs c 是计算机指令集

13
00:00:38,950 --> 00:00:42,120
它的一个呢，简称 CRSC 

14
00:00:42,120 --> 00:00:44,100
这里的 C 是 complex 

15
00:00:44,100 --> 00:00:45,610
表示复杂

16
00:00:45,610 --> 00:00:50,060
这里的 RISCR 表示的是 reduce 精简

17
00:00:50,060 --> 00:00:55,130
那这两种方式其实都可以存在

18
00:00:55,130 --> 00:00:57,770
它是我们计算机指令体系

19
00:00:57,770 --> 00:01:00,880
发展的两个不同的方向

20
00:01:00,880 --> 00:01:04,890
其中呢， CRSC 的方向指的是呢

21
00:01:04,890 --> 00:01:08,210
我们一旦需要一个新的功能就可以呢

22
00:01:08,210 --> 00:01:09,750
新增一条指令

23
00:01:09,750 --> 00:01:11,540
在这个过程当中

24
00:01:11,540 --> 00:01:13,920
我们需要的功能越来越多

25
00:01:13,920 --> 00:01:16,410
指令的数量呢就会比较多

26
00:01:16,410 --> 00:01:19,210
一些老旧的功能不再用了

27
00:01:19,210 --> 00:01:21,920
诶，新的功能使用比较频繁

28
00:01:21,920 --> 00:01:25,850
所以指令使用的频率差别很大

29
00:01:25,850 --> 00:01:29,300
差别大。唉，这种频率差别大

30
00:01:29,300 --> 00:01:31,880
使用变长格式编

31
00:01:31,880 --> 00:01:34,800
关于变长还是定长

32
00:01:34,800 --> 00:01:37,350
我们在数据结构当中啊

33
00:01:37,350 --> 00:01:39,470
哈夫曼编码会给大家提

34
00:01:39,470 --> 00:01:41,880
为什么变长哎

35
00:01:41,880 --> 00:01:43,220
为什么使用频率大

36
00:01:43,220 --> 00:01:45,060
要使用变长变直

37
00:01:45,060 --> 00:01:48,480
这是 CRSC 指令的特点

38
00:01:49,010 --> 00:01:51,250
复杂指令集啊

39
00:01:51,250 --> 00:01:56,330
它在使用过程当中可以支持多种寻址方式

40
00:01:56,330 --> 00:01:59,960
并且呢，哎，因为一个功能会新增一个指令

41
00:01:59,960 --> 00:02:04,440
而指令具体的执行还要落实到硬件方面吧

42
00:02:04,440 --> 00:02:06,020
那这个过程

43
00:02:06,020 --> 00:02:11,570
一条指令会用一个微程序来控制实现

44
00:02:11,570 --> 00:02:15,360
所谓的微程序也叫做微马

45
00:02:15,360 --> 00:02:17,660
它是不是微信小程序啊

46
00:02:17,660 --> 00:02:21,510
并不是，它指的是一段短小的程序

47
00:02:21,510 --> 00:02:23,640
那这个短小的程

48
00:02:23,640 --> 00:02:27,280
是为了解释我们之前提到

49
00:02:27,280 --> 00:02:28,720
这样的一条指令

50
00:02:28,720 --> 00:02:33,600
那这个过程当中也是属于硬件方向上，诶

51
00:02:33,600 --> 00:02:36,930
他所执，他所做的一个解释执行

52
00:02:36,930 --> 00:02:38,840
因为它的复杂性

53
00:02:38,840 --> 00:02:42,720
研制周期呢，会比较长啊

54
00:02:42,720 --> 00:02:47,420
精简指令集与复杂指令集来对比的话

55
00:02:47,420 --> 00:02:50,410
它的指令数量比较少

56
00:02:50,410 --> 00:02:53,030
那有了新的功能怎么办啊

57
00:02:53,030 --> 00:02:57,700
用我们有限的指令去实现这个新的功能

58
00:02:57,700 --> 00:03:01,760
不需要去，诶，新增指令的这个过程

59
00:03:01,760 --> 00:03:05,570
因为它是一些有限的指令重复去使用

60
00:03:05,570 --> 00:03:08,280
大家的使用频率就接近了

61
00:03:08,280 --> 00:03:11,810
用到的是定长格式的编制

62
00:03:11,810 --> 00:03:15,400
为了让我们的指令啊使用的比较快

63
00:03:15,400 --> 00:03:20,060
大家呢指令基本上都是单周期指令

64
00:03:20,060 --> 00:03:22,450
唉，一个周期就完成一个操作

65
00:03:22,450 --> 00:03:26,130
那它操作的对象主要呢是寄存器

66
00:03:26,130 --> 00:03:30,720
只有加载和存储才会呢去操作我们的内存

67
00:03:30,720 --> 00:03:34,790
所以寄存器寻址方式居多

68
00:03:34,790 --> 00:03:37,990
它所支持的寻址方式很少啊

69
00:03:37,990 --> 00:03:39,920
以寄存器为主

70
00:03:39,920 --> 00:03:44,140
那我们的常规的寄存器不够用怎么办

71
00:03:44,140 --> 00:03:47,570
增加通用寄存器去实现

72
00:03:47,570 --> 00:03:51,040
并且它不需要用微程序去执行了

73
00:03:51,040 --> 00:03:51,900
去解释了

74
00:03:51,900 --> 00:03:55,360
它可以直接呢用电路来解释

75
00:03:55,360 --> 00:03:59,180
也就是硬布线逻辑控制为主

76
00:03:59,180 --> 00:04:02,080
这个硬布线逻辑控制指的就是呢

77
00:04:02,080 --> 00:04:07,440
硬件线路来实现它的等长和单周期

78
00:04:07,440 --> 00:04:08,380
所以呢

79
00:04:08,380 --> 00:04:11,910
可以适合采用流水线执

80
00:04:11,910 --> 00:04:13,590
流水线的内容

81
00:04:13,590 --> 00:04:14,910
我们在后面呢

82
00:04:14,910 --> 00:04:17,970
还会给大家展开介绍

83
00:04:18,480 --> 00:04:21,899
精简指令集还有一部分特点

84
00:04:21,899 --> 00:04:23,940
可以呢优化编译

85
00:04:23,940 --> 00:04:27,000
有效地支持高级程序语言

86
00:04:27,000 --> 00:04:30,860
那从不同的维度来对比

87
00:04:30,860 --> 00:04:34,790
我们会发现复杂指令集和精简指令集

88
00:04:34,790 --> 00:04:36,590
指令数量诶

89
00:04:36,590 --> 00:04:37,890
复杂指令集多

90
00:04:37,890 --> 00:04:39,530
精简指令集少

91
00:04:39,530 --> 00:04:41,940
使用频率 CSC 

92
00:04:41,940 --> 00:04:44,140
复杂指令集频率差别大

93
00:04:44,140 --> 00:04:45,980
变长格式编制

94
00:04:45,980 --> 00:04:47,620
精简指令

95
00:04:47,620 --> 00:04:50,400
它的使用频率接近定长

96
00:04:50,400 --> 00:04:52,970
编制寻址方式

97
00:04:52,970 --> 00:04:54,650
复杂指令集有多种

98
00:04:54,650 --> 00:04:58,210
而精简指令集多寄存器寻址

99
00:04:58,210 --> 00:05:01,560
所以它增加了通用寄存

100
00:05:01,560 --> 00:05:03,450
适合流水线

101
00:05:03,450 --> 00:05:06,180
适合呢高级程序员的支持

102
00:05:06,180 --> 00:05:08,150
可以呢优化编译

103
00:05:08,150 --> 00:05:11,510
从几个维度啊来进行对比

104
00:05:11,510 --> 00:05:14,830
从而呢了解它们的特点区

105
00:05:14,830 --> 00:05:18,160
要求大家能够根据一些描

106
00:05:18,160 --> 00:05:18,820
找到呢

107
00:05:18,820 --> 00:05:23,260
它所描述的到底是哪一类就可以了

108
00:05:23,260 --> 00:05:27,140
复杂指令集和精简指令集的简称

109
00:05:27,140 --> 00:05:29,060
不要呢弄混淆了

110
00:05:29,060 --> 00:05:31,000
到底谁是复

111
00:05:31,000 --> 00:05:32,400
谁是精简

112
00:05:32,400 --> 00:05:34,380
一定要搞清楚

113
00:05:35,190 --> 00:05:39,690
下面我们来看一下关于复杂指令集

114
00:05:39,690 --> 00:05:44,780
精简指令集在软件设计师考试它的体现

115
00:05:44,780 --> 00:05:49,440
以下关于 RSC 精简指令系统

116
00:05:49,440 --> 00:05:52,400
计算机技术的叙述当中

117
00:05:52,400 --> 00:05:53,810
错误的是

118
00:05:53,810 --> 00:05:56,560
这类题目一定要看清楚

119
00:05:56,560 --> 00:06:00,810
我们找的是正确的选项还是错误的选项

120
00:06:00,810 --> 00:06:02,000
A 选项

121
00:06:02,000 --> 00:06:03,970
指令长度固定

122
00:06:03,970 --> 00:06:05,990
指令种类尽量少

123
00:06:05,990 --> 00:06:10,990
哎，指令少定长是精简指令集的特点

124
00:06:11,740 --> 00:06:14,960
B 选项指令功能强大

125
00:06:14,960 --> 00:06:17,280
寻址方式复杂多样

126
00:06:17,280 --> 00:06:19,130
那这是谁的特点啊

127
00:06:19,130 --> 00:06:22,900
寻址方式多是复杂指令集的特点

128
00:06:22,900 --> 00:06:27,090
精简指令集是多寄存器寻址

129
00:06:27,090 --> 00:06:30,040
所以 B 选项是错误的

130
00:06:30,040 --> 00:06:33,700
这道题错误的选项就是呢 B 选项

131
00:06:33,700 --> 00:06:36,780
C 选项增加寄存器数

132
00:06:36,780 --> 00:06:39,280
以减少访存次数

133
00:06:39,280 --> 00:06:42,290
访存就是访问存储器

134
00:06:42,290 --> 00:06:43,760
那我们在这里呢

135
00:06:43,760 --> 00:06:46,420
会增加通用寄存器

136
00:06:46,420 --> 00:06:50,340
因为多寄存器寻址这个说法呢

137
00:06:50,340 --> 00:06:52,190
也是正确的

138
00:06:52,190 --> 00:06:57,590
D 选项用不应布线电路实现指令的解码

139
00:06:57,590 --> 00:06:59,670
快速完成指令译码

140
00:06:59,670 --> 00:07:03,350
这个就是呢硬布线逻辑控制的描述

141
00:07:03,350 --> 00:07:06,710
它也是呢正确的说法

142
00:07:06,960 --> 00:07:12,120
以上呢，就是关于 CSC 与 RSC 的对比

143
00:07:12,120 --> 00:07:16,070
他的考察呢，就集中在一页 PPT 上

144
00:07:16,070 --> 00:07:19,770
大家呢，区分它们之间的特点就可以了
