1
00:00:00,000 --> 00:00:03,630
接下来我们看到流水线计数

2
00:00:03,630 --> 00:00:05,150
流水线技术呢

3
00:00:05,150 --> 00:00:08,550
是我们软件设计师考试第一章当中

4
00:00:08,550 --> 00:00:11,680
一个比较重要的计算题型

5
00:00:11,680 --> 00:00:13,020
流水线呢

6
00:00:13,020 --> 00:00:16,630
本身是指令执行的一种实现过程啊

7
00:00:16,630 --> 00:00:17,850
在这个过程当中

8
00:00:17,850 --> 00:00:19,510
对流水线、对指

9
00:00:19,510 --> 00:00:22,190
它的执行效率、设备的一个利用率呢

10
00:00:22,190 --> 00:00:23,880
有很大的提高

11
00:00:23,880 --> 00:00:26,990
那我们在软件设计师考试当中呢

12
00:00:26,990 --> 00:00:30,350
主要是掌握它的相关参数计算

13
00:00:30,350 --> 00:00:32,890
以及呢，它的一些理论知识

14
00:00:32,890 --> 00:00:36,030
他在我们软件设计师上午题考试当中

15
00:00:36,030 --> 00:00:37,450
经常呢，有考到

16
00:00:37,450 --> 00:00:40,160
一般呢，会考到一到两分

17
00:00:40,160 --> 00:00:42,600
对于流水线技术而言

18
00:00:42,600 --> 00:00:45,590
首先呢，了解一下什么是流水线

19
00:00:45,590 --> 00:00:47,350
在早期的时候

20
00:00:47,350 --> 00:00:48,850
流水线的概念啊

21
00:00:48,850 --> 00:00:51,130
是出现在工业当中的

22
00:00:51,130 --> 00:00:54,880
我们现在经常说到增加一条工业流水线

23
00:00:54,880 --> 00:00:56,640
就是呢这样的一个概念

24
00:00:56,640 --> 00:00:58,120
那我们想一想啊

25
00:00:58,120 --> 00:00:58,940
比如说呢

26
00:00:58,940 --> 00:01:02,720
我们现在日常生活当中用到的一些东西

27
00:01:02,720 --> 00:01:04,670
比如说呢，建造汽车的话

28
00:01:04,670 --> 00:01:06,760
一个汽车它可以呢

29
00:01:06,760 --> 00:01:09,360
分为底盘、车身、轮胎

30
00:01:09,360 --> 00:01:11,690
然后呢，再进行拼装

31
00:01:11,690 --> 00:01:14,110
那么在这个过程当中啊

32
00:01:14,110 --> 00:01:17,870
早期的实现呢，是做轮胎的时

33
00:01:17,870 --> 00:01:19,990
做完再去呢做底盘

34
00:01:19,990 --> 00:01:21,930
底盘做完再去做车身

35
00:01:21,930 --> 00:01:24,000
车身做完再拼装

36
00:01:24,000 --> 00:01:27,620
那很显然在这个过程当中啊

37
00:01:27,620 --> 00:01:33,340
唉，当我们看起来各组人员是依次在执行

38
00:01:33,340 --> 00:01:35,170
没有呢，停下来

39
00:01:35,170 --> 00:01:37,790
然而细节上来看

40
00:01:37,790 --> 00:01:40,550
当轮胎人员工作的时候

41
00:01:40,550 --> 00:01:43,340
其他人员是不是都在休息啊

42
00:01:43,340 --> 00:01:45,940
对于一个资本家来说

43
00:01:45,940 --> 00:01:49,480
这种利用率对他来说是不是就亏本了

44
00:01:49,480 --> 00:01:52,660
所以啊，就提出了流水线的概念

45
00:01:52,880 --> 00:01:56,020
在流水线建立之后

46
00:01:56,020 --> 00:02:00,640
整个流水线是紧密、紧锣密鼓地在进行执行

47
00:02:00,640 --> 00:02:02,860
有一个人替换下来的话

48
00:02:02,860 --> 00:02:05,560
很可能会引起流水线崩溃

49
00:02:05,560 --> 00:02:08,090
所以啊，有一些黑心的资本家

50
00:02:08,090 --> 00:02:09,430
流水线的人员啊

51
00:02:09,430 --> 00:02:12,610
是不允许，诶，下来上厕所这一类的

52
00:02:12,610 --> 00:02:14,330
非常的严格

53
00:02:14,330 --> 00:02:17,110
那在计算机当中来看的话

54
00:02:17,110 --> 00:02:17,970
我们知道啊

55
00:02:17,970 --> 00:02:21,360
机器比人的好处就在于它不用休息

56
00:02:21,360 --> 00:02:23,520
那机器不用休息的

57
00:02:23,520 --> 00:02:26,580
就可以呢，用到流水线来实现了

58
00:02:26,580 --> 00:02:30,840
对于流水线在机器当中的体现

59
00:02:30,840 --> 00:02:34,970
我们首先可以将指令它的执行过

60
00:02:34,970 --> 00:02:37,190
大致呢，分成三个部分

61
00:02:37,190 --> 00:02:39,200
第一个部分，取值

62
00:02:39,200 --> 00:02:41,780
那取直有取值的部件

63
00:02:41,780 --> 00:02:43,920
分析有分析的部件

64
00:02:43,920 --> 00:02:46,190
执行有执行的部件

65
00:02:46,190 --> 00:02:48,040
大家可以回忆一下

66
00:02:48,040 --> 00:02:50,380
在 CPU 的组成当中

67
00:02:50,380 --> 00:02:54,720
我们会用 PC 来读取下一条指令的地址

68
00:02:54,720 --> 00:02:59,420
然后将指令读取到指令寄存器 IR 当中

69
00:02:59,420 --> 00:03:03,940
通过呢，唉，译码器翻译分析一下他做什么

70
00:03:03,940 --> 00:03:05,720
最终呢才去执行

71
00:03:05,720 --> 00:03:08,930
这中间会有不同的分析步骤

72
00:03:08,930 --> 00:03:12,690
哎，有不同的步骤用到不同的硬件

73
00:03:13,090 --> 00:03:16,830
在这里给大家划分的是三个步骤

74
00:03:16,830 --> 00:03:20,090
在有一些流水线计算当中啊

75
00:03:20,090 --> 00:03:24,400
这个步骤可能有四个或者五个都有可能

76
00:03:24,400 --> 00:03:26,960
大家呢，需要去审题

77
00:03:27,180 --> 00:03:29,560
针对指令而言

78
00:03:29,560 --> 00:03:31,340
假设每一个部分

79
00:03:31,340 --> 00:03:34,230
花费的时间都是一毫秒的话

80
00:03:34,230 --> 00:03:37,580
执行三条指令需要多少时间呢

81
00:03:37,580 --> 00:03:39,980
哎，第一条指令0~3

82
00:03:39,980 --> 00:03:41,740
第二条指令3~6

83
00:03:41,740 --> 00:03:44,180
第三条指令6~9

84
00:03:44,180 --> 00:03:48,370
看起来好像没有空隙

85
00:03:48,370 --> 00:03:50,940
大家一直在忙碌

86
00:03:50,940 --> 00:03:55,630
那我们将整个执行过程拉开来看

87
00:03:55,630 --> 00:03:59,380
针对每一个子部件来分析的话

88
00:03:59,380 --> 00:04:00,920
我们会发现

89
00:04:00,920 --> 00:04:03,890
第一条指令取指分析执行

90
00:04:03,890 --> 00:04:06,370
第二条指令取指分析执行

91
00:04:06,370 --> 00:04:09,260
第三条指令取指分析执行

92
00:04:09,260 --> 00:04:13,840
中间多了很多的空闲碎片吧

93
00:04:13,840 --> 00:04:18,490
这种空闲碎片对于子部件的利用率来说

94
00:04:18,490 --> 00:04:21,410
就是很大的一个浪费了

95
00:04:21,410 --> 00:04:23,680
如何去解决呢

96
00:04:23,680 --> 00:04:25,300
根据这个图

97
00:04:25,300 --> 00:04:26,560
我们会发现

98
00:04:26,560 --> 00:04:31,060
将右侧的指令水水平向左移

99
00:04:31,060 --> 00:04:32,220
就可以呢

100
00:04:32,220 --> 00:04:36,440
形成一个新的哎，时间图了吧

101
00:04:36,570 --> 00:04:41,770
这里涉及到时间以及呢空间上的子部件

102
00:04:41,770 --> 00:04:45,410
这种图示啊，我们叫做时空图

103
00:04:48,040 --> 00:04:50,120
在时空图当中

104
00:04:50,120 --> 00:04:52,170
我们移动之后

105
00:04:52,170 --> 00:04:54,670
第一条指令取指完成

106
00:04:54,670 --> 00:04:57,150
立马给第二条指令取指

107
00:04:57,150 --> 00:05:01,330
同时诶，第一条指令在分析阶段

108
00:05:01,330 --> 00:05:05,210
然后第三条指令取指第二条指令分析

109
00:05:05,210 --> 00:05:08,210
第一条指令已经在执行了

110
00:05:08,210 --> 00:05:12,740
也就是说在同一个时刻的时候

111
00:05:12,740 --> 00:05:17,310
可以允许三条指令同时进行吧

112
00:05:17,310 --> 00:05:20,160
只是它的同时进行

113
00:05:20,160 --> 00:05:22,280
针对的是不同指令

114
00:05:22,280 --> 00:05:24,280
在不同的子部

115
00:05:24,280 --> 00:05:26,550
或者说硬件上面的

116
00:05:26,550 --> 00:05:28,330
那这个过程啊

117
00:05:28,330 --> 00:05:32,350
也是呢，多条指令在重叠进行操作

118
00:05:32,350 --> 00:05:36,440
但我们称它是准并行技术

119
00:05:36,440 --> 00:05:38,930
为什么是准并行

120
00:05:38,930 --> 00:05:43,920
所谓的并行技术应该是第一条指令取指

121
00:05:43,920 --> 00:05:45,380
第二条指令

122
00:05:45,380 --> 00:05:49,220
第三条指令同临时去取直

123
00:05:49,220 --> 00:05:50,960
这才是并行

124
00:05:50,960 --> 00:05:56,630
而我们所谓的流水线并没有齐头并进

125
00:05:56,630 --> 00:05:59,270
所以我们叫做准并行

126
00:05:59,270 --> 00:06:01,830
而不是并行基数

127
00:06:04,820 --> 00:06:07,540
与它相类似的哎

128
00:06:07,540 --> 00:06:10,460
还有一个概念呢，叫做串行

129
00:06:11,190 --> 00:06:15,470
串行其实就是顺序执行的过程

130
00:06:15,470 --> 00:06:19,780
也就是我们前面看到的9 ms 的执行过程

131
00:06:19,780 --> 00:06:22,640
就叫做呢串行的过程

132
00:06:22,640 --> 00:06:25,530
流水线它是准并行的

133
00:06:25,530 --> 00:06:30,190
它的并行是不同的部件上有不同的指令

134
00:06:30,190 --> 00:06:31,670
在同时

135
00:06:31,670 --> 00:06:34,410
那在这个过程当中啊

136
00:06:34,410 --> 00:06:37,050
原来三条指令需要9 ms 

137
00:06:37,050 --> 00:06:40,140
现在三条指令需要5 ms 

138
00:06:40,140 --> 00:06:42,390
平均每条指令

139
00:06:42,390 --> 00:06:45,200
它的执行速度是不是就提高了

140
00:06:45,200 --> 00:06:46,830
然后再来看

141
00:06:46,830 --> 00:06:49,210
针对每一个部件而言

142
00:06:49,210 --> 00:06:51,970
原本呢空闲碎片很多

143
00:06:51,970 --> 00:06:54,110
现在呢利用起来了

144
00:06:54,110 --> 00:06:56,730
也就是说对于各部件

145
00:06:56,730 --> 00:06:59,430
它的利用率也提高了

146
00:06:59,430 --> 00:07:02,930
这就是呢流水线它的优势

147
00:07:03,470 --> 00:07:05,500
针对流水线

148
00:07:05,500 --> 00:07:09,070
我们还需要大家掌握相关参数的计算

149
00:07:09,070 --> 00:07:13,710
主要呢就是流水线执行时间和它的吞吐率

150
00:07:13,710 --> 00:07:17,650
流水线加速比以及流水线效率

151
00:07:17,650 --> 00:07:21,960
目前呢，只在软考的高级科目当中出现

152
00:07:21,960 --> 00:07:25,570
我们的软件设计师考试并没有涉及到

153
00:07:25,570 --> 00:07:27,950
所以不需要大家去了解了

154
00:07:27,950 --> 00:07:32,230
那我们先来看流水线它的一些基本参数

155
00:07:32,230 --> 00:07:34,190
根据这个图示

156
00:07:34,190 --> 00:07:35,630
三条指令

157
00:07:35,630 --> 00:07:39,780
我们扩展到通用的 N 条指令来看的话

158
00:07:39,780 --> 00:07:45,770
可以把整个执行时间划分成两个部分

159
00:07:46,460 --> 00:07:52,260
其中第一个部分是第一条指令执行完成

160
00:07:52,260 --> 00:07:54,780
在这个时间之后

161
00:07:54,780 --> 00:07:59,860
每隔一个时间片段就完成了下一条指令吧

162
00:07:59,860 --> 00:08:04,240
所以 N 条指令划分成了一条指令

163
00:08:04,240 --> 00:08:07,500
和 N 减一条指令两个部分

164
00:08:07,500 --> 00:08:10,280
第一条指令的执行时间

165
00:08:10,280 --> 00:08:13,070
唉，就是一条指令的执行时间

166
00:08:13,070 --> 00:08:16,650
我们把这个时间称之为流水线

167
00:08:16,650 --> 00:08:20,490
它的建立时间建立之后

168
00:08:20,490 --> 00:08:22,450
后面呢，我们叫流水线

169
00:08:22,450 --> 00:08:23,950
它的排空时间

170
00:08:23,950 --> 00:08:25,790
N 减一条指令

171
00:08:25,790 --> 00:08:29,040
每每隔一个时间片段就完成

172
00:08:29,040 --> 00:08:30,600
这个时间片段呢

173
00:08:30,600 --> 00:08:34,440
我们叫做流水线周期

174
00:08:34,880 --> 00:08:39,220
在本个在当前这个例子当中啊

175
00:08:39,220 --> 00:08:41,919
是体现不出流水线周期的

176
00:08:41,919 --> 00:08:45,700
这里呢，大家知道流水线周期啊

177
00:08:45,700 --> 00:08:48,540
是我们将指令划分之后

178
00:08:48,540 --> 00:08:52,120
执行时间最长的一段就可以了

179
00:08:52,120 --> 00:08:55,510
那这里的分段就是我们说的哎

180
00:08:55,510 --> 00:08:57,730
取止一毫秒

181
00:09:00,600 --> 00:09:02,720
分析一毫秒

182
00:09:03,840 --> 00:09:06,080
执行一毫秒

183
00:09:07,610 --> 00:09:09,690
那一共分了几段

184
00:09:09,690 --> 00:09:11,120
分了三段

185
00:09:11,120 --> 00:09:13,590
最长的一段大家都是一

186
00:09:13,590 --> 00:09:16,510
所以呢，最长的一段就是呢一毫

187
00:09:16,510 --> 00:09:18,660
作为流水线周期

188
00:09:18,660 --> 00:09:21,160
如果给大家其他的例子

189
00:09:21,160 --> 00:09:22,580
比如说三、四、五

190
00:09:22,580 --> 00:09:26,120
那此时最长段就成了5 ms 

191
00:09:26,120 --> 00:09:29,570
如果分成四段、五段也有可能

192
00:09:29,570 --> 00:09:32,070
大家呢要注意审题

193
00:09:32,600 --> 00:09:36,580
那么整个流水线它的执行时间

194
00:09:36,580 --> 00:09:39,620
就是第 A 条指令的执行时

195
00:09:39,620 --> 00:09:40,990
分成 K 段

196
00:09:40,990 --> 00:09:45,290
每一段的时间分别记作 T 1、 T 2到 T 、 K 

197
00:09:45,290 --> 00:09:46,850
进行累加求和

198
00:09:46,850 --> 00:09:49,520
这是流水线建立时间

199
00:09:49,520 --> 00:09:50,890
建立之后

200
00:09:50,890 --> 00:09:53,150
后面的 N 减一条指令

201
00:09:53,150 --> 00:09:57,950
是每隔一个流水线周期就可以完成的

202
00:09:57,950 --> 00:10:00,470
这个周期时间就是呢

203
00:10:00,470 --> 00:10:02,940
其中最长的一段

204
00:10:02,940 --> 00:10:06,370
前面的 T 1到 TK 找一个最大值

205
00:10:06,370 --> 00:10:08,060
那这个公式呢

206
00:10:08,060 --> 00:10:10,580
我们在考试当中用到

207
00:10:10,580 --> 00:10:13,340
一般都是理论公式

208
00:10:13,340 --> 00:10:15,770
如果大家在做题的时候

209
00:10:15,770 --> 00:10:18,950
发现理论公式没有答案

210
00:10:18,950 --> 00:10:22,500
那这个时候就要考虑实践公式了

211
00:10:22,500 --> 00:10:25,820
我们默认用理论公式

212
00:10:30,500 --> 00:10:34,700
没有答案的时候才考虑实践公式

213
00:10:34,700 --> 00:10:40,060
实践公式是因为理论和实践的差别上

214
00:10:40,060 --> 00:10:43,020
一般理论是比较理想化的

215
00:10:43,020 --> 00:10:44,600
那我们的实践呢

216
00:10:44,600 --> 00:10:47,070
会比理论做一些扩大

217
00:10:47,070 --> 00:10:49,680
他会呢留一些冗余的时间

218
00:10:49,680 --> 00:10:51,700
从哪里来扩大呢

219
00:10:51,700 --> 00:10:55,690
它会对流水线建立时间来扩大

220
00:10:55,690 --> 00:10:59,330
原本每一个部分的时间分别是 T 1

221
00:10:59,330 --> 00:11:00,350
T 2到 TK 

222
00:11:00,350 --> 00:11:02,780
那各个时间段可能不一样

223
00:11:02,780 --> 00:11:05,090
我们的实践公式啊

224
00:11:05,090 --> 00:11:11,050
是将每一段都默认了扩大到最长段

225
00:11:11,130 --> 00:11:13,490
最长段的执行时

226
00:11:13,490 --> 00:11:15,810
我们叫做流水线周期

227
00:11:15,810 --> 00:11:17,690
划分成三个段

228
00:11:17,690 --> 00:11:18,900
K 就等于三

229
00:11:18,900 --> 00:11:21,240
五个段 K 就等于五

230
00:11:21,240 --> 00:11:25,850
从而让每一段的时间用到的都是最大值

231
00:11:25,850 --> 00:11:28,990
然后后面这一部分不变

232
00:11:28,990 --> 00:11:34,380
还是呢每隔一个流水线周期完成下一条指令

233
00:11:34,380 --> 00:11:38,610
直到后面的 N 减一条指令完成

234
00:11:38,610 --> 00:11:40,930
所以它区别的只有呢

235
00:11:40,930 --> 00:11:44,450
第一条指令的建立时间而已

236
00:11:45,090 --> 00:11:50,010
下面我们以一个例子来看一下流水线的计算

237
00:11:50,230 --> 00:11:51,370
假

238
00:11:51,370 --> 00:11:53,250
一条指令执行过

239
00:11:53,250 --> 00:11:57,280
可以分成、取指、分析、执行三个步骤

240
00:11:57,280 --> 00:12:01,500
那这里的三个步骤就表示 K 等于三

241
00:12:02,060 --> 00:12:06,920
在取值的时候花费的时间是三倍贝塔 T 

242
00:12:06,920 --> 00:12:11,530
这里的 data t 可以理解为一个呢单位时间

243
00:12:11,530 --> 00:12:13,440
比如说流水线周期啊

244
00:12:13,440 --> 00:12:17,750
来作为 data tt 单位时间分析时间呢

245
00:12:17,750 --> 00:12:20,790
唉，可以记为两倍贝塔 T 

246
00:12:20,790 --> 00:12:23,820
执行时间四倍德塔 T 

247
00:12:23,820 --> 00:12:26,090
那这个过程当中

248
00:12:26,090 --> 00:12:29,270
若按串行的方式执行

249
00:12:29,270 --> 00:12:33,060
什么是串行顺序执行

250
00:12:36,220 --> 00:12:38,720
它的时间就是呢

251
00:12:38,720 --> 00:12:40,880
3+2加四

252
00:12:40,880 --> 00:12:44,470
哎，一条指令执行十次

253
00:12:44,470 --> 00:12:48,570
十条指令串行的结果就是呢

254
00:12:48,570 --> 00:12:50,760
90倍的贝塔 T 

255
00:12:50,760 --> 00:12:52,320
一条指令是九

256
00:12:52,320 --> 00:12:54,900
十条指令就是呢90

257
00:12:54,900 --> 00:12:56,790
这是串行方式

258
00:12:56,790 --> 00:13:00,920
那如果按照流水线的方式来执行的话

259
00:13:00,920 --> 00:13:03,880
它的流水线周期是多少呢

260
00:13:03,880 --> 00:13:04,540
注意

261
00:13:04,540 --> 00:13:10,320
流水线周期的概念是我们分成三段之后

262
00:13:10,320 --> 00:13:12,090
最长的一段

263
00:13:12,090 --> 00:13:14,050
三、二、四，谁最长

264
00:13:14,050 --> 00:13:17,670
很显然，四倍德塔 T 是最长的

265
00:13:17,670 --> 00:13:22,350
那十条指令全部执行完需要多少呢

266
00:13:22,350 --> 00:13:24,360
很多同学直接啊

267
00:13:24,360 --> 00:13:27,420
哎，第一条指令执行时间是

268
00:13:27,420 --> 00:13:29,880
加上10-1

269
00:13:30,690 --> 00:13:33,930
乘以最长的四倍贝塔 T 

270
00:13:33,930 --> 00:13:37,470
那49316加上九等于45

271
00:13:37,470 --> 00:13:39,870
这个计算还是比较简单的吧

272
00:13:39,870 --> 00:13:41,640
那如果这里是100

273
00:13:41,640 --> 00:13:43,820
大家是不是要算99×4啊

274
00:13:43,820 --> 00:13:45,020
就很麻烦了

275
00:13:45,020 --> 00:13:49,260
我们在这里啊，给大家提供一个呢，计算的思路

276
00:13:49,260 --> 00:13:52,830
前面的九不要呢，先计算

277
00:13:52,830 --> 00:13:56,510
我们将3+2加四写出来

278
00:13:56,510 --> 00:14:00,490
再加上10-1乘以四

279
00:14:00,880 --> 00:14:02,920
我们会发现

280
00:14:02,920 --> 00:14:07,160
这个四在前面是一定会出现的吧

281
00:14:07,160 --> 00:14:12,070
我们可以通过提公因式得到10×4

282
00:14:12,070 --> 00:14:14,530
加上前面的3+2

283
00:14:14,530 --> 00:14:17,540
结果很明显就是45了吧

284
00:14:17,540 --> 00:14:19,000
相对来说呢

285
00:14:19,000 --> 00:14:22,390
如果扩大到100条指令

286
00:14:22,390 --> 00:14:25,150
这里呢，就是405了

287
00:14:25,150 --> 00:14:27,370
不需要算99×4

288
00:14:27,370 --> 00:14:30,160
直接算呢，100×4就可以了

289
00:14:30,160 --> 00:14:33,840
所以啊，可以方便我们计算的过程

290
00:14:33,840 --> 00:14:34,960
这就是呢

291
00:14:34,960 --> 00:14:37,520
流水线执行时间的计算

292
00:14:37,520 --> 00:14:40,970
那如果答案没有45倍的 DT 呢

293
00:14:40,970 --> 00:14:42,570
没有这个选项怎么办

294
00:14:42,570 --> 00:14:45,690
就尝试实践公式

295
00:14:45,690 --> 00:14:50,000
实践公式 K 倍贝塔 T 划分成了三段

296
00:14:50,000 --> 00:14:52,940
K 就是等于三的最长段

297
00:14:52,940 --> 00:14:56,380
作为流水线周期 A 4倍贝塔 T 

298
00:14:56,380 --> 00:15:00,530
加上 N 减10-1乘以流水线周期

299
00:15:00,530 --> 00:15:04,920
四倍贝塔 T 得到的结果就是呢

300
00:15:04,920 --> 00:15:08,120
等于48倍得他提的

301
00:15:08,320 --> 00:15:11,970
这就是呢，实践公式的答案

302
00:15:11,970 --> 00:15:16,760
我们看一看这两个理论公式和实践公式

303
00:15:16,760 --> 00:15:19,040
它们的图示对比

304
00:15:19,040 --> 00:15:21,540
首先，理论公式

305
00:15:21,630 --> 00:15:25,650
第一条指令取指三倍德塔 T 

306
00:15:25,650 --> 00:15:27,430
分析两倍德塔 T 

307
00:15:27,430 --> 00:15:29,680
执行四倍德塔 T 

308
00:15:29,680 --> 00:15:33,980
那当第一条指令取指完成之后

309
00:15:33,980 --> 00:15:37,220
第二条指令可以随之取

310
00:15:37,220 --> 00:15:39,860
第二条指令诶

311
00:15:39,860 --> 00:15:43,080
能不能在第一条指令分析之后

312
00:15:43,080 --> 00:15:44,880
立马开始分析啊

313
00:15:44,880 --> 00:15:47,760
并不能，因为他会收到

314
00:15:47,760 --> 00:15:53,170
会受到自己第二条指令取指时间的限制吧

315
00:15:53,170 --> 00:15:57,360
所以在这里第二条指令的分析过程当中

316
00:15:57,360 --> 00:16:01,230
我们的分析部件会空余一个片段

317
00:16:01,230 --> 00:16:06,650
那第一条指令分析之后去执行第二条指令

318
00:16:06,650 --> 00:16:11,210
能不能在第二条指令分析之后立马执行呢

319
00:16:11,210 --> 00:16:12,500
也不能

320
00:16:12,500 --> 00:16:18,060
因为它会受到第一条指令执行时间的限制

321
00:16:18,060 --> 00:16:21,660
然后呢，再来看第三条指令

322
00:16:21,660 --> 00:16:27,100
随之取值分析以及执行三条指令

323
00:16:27,100 --> 00:16:29,720
看完之后我们就会发现

324
00:16:29,720 --> 00:16:32,890
后面 N 减一条指

325
00:16:32,890 --> 00:16:36,290
是每隔多长时间才完成

326
00:16:36,290 --> 00:16:41,230
由其中最长的四倍 data 塔 T 来决定吧

327
00:16:41,230 --> 00:16:44,180
所以这个四倍贝塔 T 

328
00:16:44,180 --> 00:16:48,840
最长的一段就是流水线周期

329
00:16:53,620 --> 00:16:58,500
这里呢，就可以明显的看出来

330
00:16:58,500 --> 00:17:02,820
流水线周期为什么是最长段呢

331
00:17:02,820 --> 00:17:08,680
它限定了我们下一条指令最终的完成时间

332
00:17:08,680 --> 00:17:11,130
那这是理论公式

333
00:17:11,130 --> 00:17:12,970
实践公式

334
00:17:12,970 --> 00:17:17,530
N 减一条指令是没有发生变化的

335
00:17:17,530 --> 00:17:19,460
跟上面一致

336
00:17:19,460 --> 00:17:21,150
区别的是什么呢

337
00:17:21,150 --> 00:17:23,510
流水线建立时间

338
00:17:23,510 --> 00:17:26,280
第一条指令的执行

339
00:17:26,280 --> 00:17:28,660
他做了一些冗余

340
00:17:28,660 --> 00:17:30,420
冗余在哪里呢

341
00:17:30,420 --> 00:17:33,720
唉，我们划分成了三个段

342
00:17:33,720 --> 00:17:37,710
每一段都以最长段时间为准

343
00:17:37,710 --> 00:17:40,440
原本取值三倍德塔 T 

344
00:17:40,440 --> 00:17:43,640
把它扩大到四倍德塔 T ，有冗余了

345
00:17:43,640 --> 00:17:48,050
分析两倍贝塔 T 也扩大到流水线周期

346
00:17:48,050 --> 00:17:49,670
四倍德塔 T 了

347
00:17:49,670 --> 00:17:52,970
那最后四倍贝塔 T 不变

348
00:17:52,970 --> 00:17:54,530
分成三段

349
00:17:54,530 --> 00:17:59,240
每一段的时间都是最长时间流水线周期

350
00:17:59,240 --> 00:18:02,070
从而形成了实践公式

351
00:18:02,070 --> 00:18:03,370
它的建立时间

352
00:18:03,370 --> 00:18:06,050
最后呢， N 减一条指令

353
00:18:06,050 --> 00:18:08,200
每每隔一个时间片，诶

354
00:18:08,200 --> 00:18:11,680
每隔一个流水线周期完成下一条指令

355
00:18:11,680 --> 00:18:13,870
这就是呢，实践公式

356
00:18:13,870 --> 00:18:17,520
我们在考试当中默认用理论公式

357
00:18:17,520 --> 00:18:19,740
理论公式找不到答案

358
00:18:19,740 --> 00:18:22,980
才用实践公式来计算

359
00:18:23,700 --> 00:18:27,880
下面再来看一下流水线吞吐率的计算

360
00:18:27,880 --> 00:18:30,030
吞吐率指的是什么呢

361
00:18:30,030 --> 00:18:32,070
我们在新闻联播当中啊

362
00:18:32,070 --> 00:18:35,570
经常会听到某一个港口它的年吞吐量

363
00:18:35,570 --> 00:18:38,510
那这里的所谓连吞吐量，唉

364
00:18:38,510 --> 00:18:42,010
我们就知道在一年内完成的吞吐

365
00:18:42,010 --> 00:18:45,210
也就是呢，流通的这个呢数量

366
00:18:45,210 --> 00:18:46,130
所以说啊

367
00:18:46,130 --> 00:18:47,850
所谓的吞吐量

368
00:18:47,850 --> 00:18:51,620
指的是某一个时间段完成的任务数

369
00:18:51,620 --> 00:18:54,010
而涉及到吞吐率

370
00:18:54,010 --> 00:18:58,380
它就是呢单位时间完成的任务量

371
00:18:58,380 --> 00:19:01,190
那所谓的单位时间

372
00:19:01,190 --> 00:19:04,570
我们可以用总任务量除以总时间

373
00:19:04,570 --> 00:19:07,590
求出来单位时间的任务量

374
00:19:07,590 --> 00:19:10,210
总任务量就是指令条数

375
00:19:10,210 --> 00:19:14,510
总时间就是流水线执行时间

376
00:19:14,510 --> 00:19:17,550
所以考大家吞吐率的时候

377
00:19:17,550 --> 00:19:19,690
一般考的还是呢

378
00:19:19,690 --> 00:19:23,270
流水线执行时间的计算

379
00:19:23,530 --> 00:19:26,930
比如说我们前面提到的例子

380
00:19:26,930 --> 00:19:31,950
取值分析和执行时间分别是三倍的大 T 、两

381
00:19:31,950 --> 00:19:33,700
对塔 T 4倍德塔 T 

382
00:19:33,700 --> 00:19:35,680
那十条指令

383
00:19:35,680 --> 00:19:37,940
诶，吞吐率是多少呢

384
00:19:37,940 --> 00:19:40,700
它的指令条数是十

385
00:19:40,700 --> 00:19:42,790
流水线执行时间

386
00:19:42,790 --> 00:19:45,550
注意默认是理论公式啊

387
00:19:45,550 --> 00:19:48,980
我们计算的是45倍德塔 T 

388
00:19:48,980 --> 00:19:52,990
这就是呢，哎，我们的吞吐

389
00:19:53,160 --> 00:19:54,900
有吞吐率

390
00:19:54,900 --> 00:19:57,830
还有一个呢，最大吞吐率

391
00:19:57,830 --> 00:20:00,360
最大吞吐率是一个极限值

392
00:20:00,360 --> 00:20:02,000
一般是取不到的

393
00:20:02,000 --> 00:20:03,000
它是一个啊

394
00:20:03,000 --> 00:20:04,930
极限边界值

395
00:20:04,930 --> 00:20:08,210
那他在求取的过程当中

396
00:20:08,210 --> 00:20:12,230
也会用到指令条数除以流水

397
00:20:12,230 --> 00:20:13,590
执行时间

398
00:20:13,590 --> 00:20:16,020
只是执行时间

399
00:20:16,020 --> 00:20:19,760
在这里是用实践公式来表示了

400
00:20:19,760 --> 00:20:25,370
哎， K 倍 T 加上 K 加 N 减一

401
00:20:27,940 --> 00:20:31,540
加上 N 减一倍的流水线周期

402
00:20:31,540 --> 00:20:35,040
那对下面这一部分提供因式

403
00:20:35,040 --> 00:20:38,620
把流水线周期提取出来

404
00:20:38,620 --> 00:20:41,700
K 加 N 减一乘以 T 

405
00:20:41,700 --> 00:20:44,660
这是我们的实践公式

406
00:20:44,660 --> 00:20:47,200
它的流水线执行时间吧

407
00:20:47,200 --> 00:20:50,600
然后呢，用总数除以总时间

408
00:20:50,600 --> 00:20:53,380
现在这是一个极限值

409
00:20:53,380 --> 00:20:55,240
在极限值当中

410
00:20:55,240 --> 00:20:57,490
我们可以通过求导来求

411
00:20:57,490 --> 00:20:58,530
没有必要

412
00:20:58,530 --> 00:20:59,670
我们在这里啊

413
00:20:59,670 --> 00:21:01,910
从理论上来看的话

414
00:21:01,910 --> 00:21:03,740
K 的取值是多少

415
00:21:03,740 --> 00:21:06,530
一般是三、四、五这样的常数吧

416
00:21:06,530 --> 00:21:09,360
那 K 减一就是一个常

417
00:21:09,360 --> 00:21:11,250
变化的部分是谁呢

418
00:21:11,250 --> 00:21:17,040
N 条指令可以是100、1000、1万

419
00:21:17,040 --> 00:21:20,390
甚至，诶，10万、100万

420
00:21:20,390 --> 00:21:22,250
那在这个过程当中

421
00:21:22,250 --> 00:21:27,150
100万和100万03有没有区别啊

422
00:21:27,150 --> 00:21:28,390
没有区别

423
00:21:28,390 --> 00:21:29,330
所以说啊

424
00:21:29,330 --> 00:21:31,410
当 N 无限大的时候

425
00:21:31,410 --> 00:21:34,360
K 减一可以忽略不计

426
00:21:34,360 --> 00:21:35,980
忽略不计的

427
00:21:35,980 --> 00:21:39,400
就变成了 N 除以 N 倍的 T 

428
00:21:39,400 --> 00:21:41,120
把 N 约分

429
00:21:41,120 --> 00:21:43,900
剩下的就是呢， T 分之一

430
00:21:43,900 --> 00:21:47,740
这是我们极限值求取的过程

431
00:21:47,740 --> 00:21:50,130
将 N 看作无穷大

432
00:21:50,130 --> 00:21:52,840
忽略了其中的常数

433
00:21:52,840 --> 00:21:55,390
那求出极限值之后

434
00:21:55,390 --> 00:21:59,570
这里的化简过程不需要大家了解它的推导

435
00:21:59,570 --> 00:22:02,550
只需要呢知道最终的结果

436
00:22:02,550 --> 00:22:05,130
流水线的最大吞吐率

437
00:22:05,130 --> 00:22:06,190
化繁为简

438
00:22:06,190 --> 00:22:10,290
它就是呢流水线周期的倒数

439
00:22:17,640 --> 00:22:20,880
那同样下面这个例子，哎

440
00:22:20,880 --> 00:22:24,630
432啊、324这三个参数当中

441
00:22:24,630 --> 00:22:27,410
在十条指令的情况下

442
00:22:27,410 --> 00:22:30,330
它的最大吞吐率是多少呢

443
00:22:30,330 --> 00:22:32,220
其实不用十条指令

444
00:22:32,220 --> 00:22:35,050
它这里啊，是将 N 看作无穷大

445
00:22:35,050 --> 00:22:40,080
那它的最大吞吐率就是流水线周期的倒数

446
00:22:40,080 --> 00:22:40,860
四倍

447
00:22:40,860 --> 00:22:42,850
贝塔 T 分之一

448
00:22:42,850 --> 00:22:44,080
所以这里啊

449
00:22:44,080 --> 00:22:47,720
涉及到吞吐率和最大吞吐率的计算

450
00:22:47,720 --> 00:22:50,740
大家呢，也需要去了解

451
00:22:50,960 --> 00:22:53,180
下面我们来看一下

452
00:22:53,180 --> 00:22:55,660
在流水线技术当中

453
00:22:55,660 --> 00:22:58,180
软件设计师考试真题又是呢

454
00:22:58,180 --> 00:23:00,640
如何来考察大家的

455
00:23:01,070 --> 00:23:06,250
下列关于流水线方式执行指令的叙述当中

456
00:23:06,250 --> 00:23:08,110
不正确的是谁

457
00:23:08,110 --> 00:23:12,020
注意，我们找的是不正确的说法

458
00:23:12,020 --> 00:23:15,330
那我们哪些说法是正确的呢

459
00:23:15,330 --> 00:23:16,960
首先， A 选项

460
00:23:16,960 --> 00:23:22,530
流水线方式可提高单条指令它的执行速度

461
00:23:22,530 --> 00:23:26,840
那对于324这样的执行过程

462
00:23:26,840 --> 00:23:28,640
取值三倍德塔 T 

463
00:23:28,640 --> 00:23:31,910
分析两倍德塔 T 执行四倍德塔 T 

464
00:23:31,910 --> 00:23:34,220
如果用流水线的方式

465
00:23:34,220 --> 00:23:35,540
它的总时间是多少

466
00:23:35,540 --> 00:23:36,250
是九

467
00:23:36,250 --> 00:23:38,160
如果是顺序执行方式

468
00:23:38,160 --> 00:23:39,680
它的执行时间是多少

469
00:23:39,680 --> 00:23:40,680
还是九

470
00:23:40,680 --> 00:23:42,180
有没有提高啊

471
00:23:42,180 --> 00:23:43,010
没有

472
00:23:43,010 --> 00:23:45,540
单条指令是无法提高的

473
00:23:45,540 --> 00:23:47,480
这种说法是错误的

474
00:23:47,480 --> 00:23:49,410
所以它不正确

475
00:23:49,410 --> 00:23:50,470
B 选项

476
00:23:50,470 --> 00:23:55,260
流水线方式下可同时执行多条指令

477
00:23:55,260 --> 00:23:57,600
是的，它可以同时执行

478
00:23:57,600 --> 00:23:58,720
但注意啊

479
00:23:58,720 --> 00:24:00,340
它不是并行的

480
00:24:00,340 --> 00:24:02,840
而是准并行的

481
00:24:03,760 --> 00:24:06,940
我们在分析的过程当中提到

482
00:24:06,940 --> 00:24:10,180
在中间一部分执行时间

483
00:24:10,180 --> 00:24:14,420
可以同时进行第一条指令

484
00:24:14,420 --> 00:24:15,720
哎， K 条指

485
00:24:15,720 --> 00:24:18,500
第一条指令到执行

486
00:24:19,440 --> 00:24:21,200
第二条指

487
00:24:21,200 --> 00:24:24,600
K 加一条指令在干嘛在分析

488
00:24:25,020 --> 00:24:26,820
第三条指

489
00:24:26,820 --> 00:24:30,300
K 加二条指令在干嘛在取值

490
00:24:31,110 --> 00:24:32,930
所以这个过程啊

491
00:24:32,930 --> 00:24:34,010
有同学看

492
00:24:34,010 --> 00:24:37,510
K 条指令执行、 K 加一分析、 K 加二取

493
00:24:37,510 --> 00:24:39,210
这种流水线方式

494
00:24:39,210 --> 00:24:40,270
很多同学啊

495
00:24:40,270 --> 00:24:44,060
会把它拓展到是不是超标量流水线等等

496
00:24:44,060 --> 00:24:46,370
但其实没有考这么深入

497
00:24:46,370 --> 00:24:50,910
它的描述就是我们平常所见到的流水线

498
00:24:50,910 --> 00:24:54,960
那这三条指令是同时在进行吧

499
00:24:54,960 --> 00:24:56,810
所以在这个过程当中

500
00:24:56,810 --> 00:25:00,540
流水线可同时去执行多条指令

501
00:25:00,540 --> 00:25:02,750
只是这个执行的过程

502
00:25:02,750 --> 00:25:06,270
是在多个子部件上同时进行的

503
00:25:06,270 --> 00:25:08,730
叫做准并行技术

504
00:25:08,730 --> 00:25:09,830
C 选项

505
00:25:09,830 --> 00:25:12,950
流水线方式提高了各部件的利用率

506
00:25:12,950 --> 00:25:15,980
那我们之前呢，给大家展示过了

507
00:25:15,980 --> 00:25:21,350
唉，因为将中间的碎片时间将它呢利用起来了

508
00:25:21,350 --> 00:25:23,750
所以提高了子部件的，哎

509
00:25:23,750 --> 00:25:25,730
各个部分部件的利用率

510
00:25:25,730 --> 00:25:29,070
然后呢，整体指令啊

511
00:25:29,070 --> 00:25:32,010
每一条指令的平均时间压缩了

512
00:25:32,010 --> 00:25:33,410
平均速度提高了

513
00:25:33,410 --> 00:25:36,580
系统的吞吐率呢，也就提高了

514
00:25:36,580 --> 00:25:39,280
这些说法都是呢正确的

515
00:25:39,280 --> 00:25:40,580
只有 A 选项

516
00:25:40,580 --> 00:25:43,040
他的说法是错误的

517
00:25:44,540 --> 00:25:48,340
接下来看到流水线的计算问题

518
00:25:48,340 --> 00:25:50,110
将一条指令啊

519
00:25:50,110 --> 00:25:54,470
划分成取值、分析和执行三步

520
00:25:54,470 --> 00:25:57,260
按照流水线方式来执行

521
00:25:57,260 --> 00:26:01,090
若取值它的时间是四倍贝塔 T 

522
00:26:01,090 --> 00:26:02,250
分析是两倍

523
00:26:02,250 --> 00:26:05,210
贝塔 T 执行是三倍德塔 T 

524
00:26:05,210 --> 00:26:07,250
完成100条指

525
00:26:07,250 --> 00:26:09,230
需要的时间是多少呢

526
00:26:09,230 --> 00:26:11,750
唉，流水线执行时间

527
00:26:11,750 --> 00:26:14,830
第一条指令的执行时间

528
00:26:14,830 --> 00:26:19,030
加上 N 减一乘以流水线周期

529
00:26:19,030 --> 00:26:22,010
最长段是流水线周期

530
00:26:22,010 --> 00:26:26,320
那提公因式将四归到后面这一部分

531
00:26:26,320 --> 00:26:28,040
就是405

532
00:26:28,040 --> 00:26:29,740
选择 D 选项

533
00:26:29,740 --> 00:26:31,450
在这个过程当中

534
00:26:31,450 --> 00:26:35,340
建议大家前面这一部分不要先求和了

535
00:26:35,340 --> 00:26:39,540
那在这个题目当中描述的内容当中

536
00:26:39,540 --> 00:26:41,300
大家想一想，拓展一下

537
00:26:41,300 --> 00:26:42,280
计算一下呢

538
00:26:42,280 --> 00:26:44,520
它的吞吐率是多少呢

539
00:26:44,520 --> 00:26:51,130
应该是指令总条数除以流水线执行时间

540
00:26:51,130 --> 00:26:53,300
那这是它的吞吐率

541
00:26:53,300 --> 00:26:55,940
最大吞吐率是多少呢

542
00:26:55,940 --> 00:26:58,610
流水线周期的倒数

543
00:26:58,610 --> 00:27:02,020
流水线周期是最长段诶

544
00:27:02,020 --> 00:27:04,320
四倍贝塔 T 分之一

545
00:27:04,320 --> 00:27:05,650
那这就是呢

546
00:27:05,650 --> 00:27:08,570
关于流水线参数的计算

547
00:27:08,570 --> 00:27:12,980
大家需要掌握流水线它的一些基本概念

548
00:27:12,980 --> 00:27:17,110
准并行提高它各子部件的利用率

549
00:27:17,110 --> 00:27:20,840
提高指令的平均执行时间

550
00:27:20,840 --> 00:27:23,880
那在我们提高我们指令啊

551
00:27:23,880 --> 00:27:26,560
平均每条指令执行的效率

552
00:27:26,560 --> 00:27:29,620
压缩了它的平均执行时间

553
00:27:29,620 --> 00:27:31,980
掌握相应参数的计算

554
00:27:31,980 --> 00:27:34,320
什么是流水线建立时间

555
00:27:34,320 --> 00:27:36,070
什么是流水线周期

556
00:27:36,070 --> 00:27:38,420
然后流水线执行时间

557
00:27:38,420 --> 00:27:40,010
默认的理论公式

558
00:27:40,010 --> 00:27:43,550
以及呢额外的它的实践公式

559
00:27:43,550 --> 00:27:47,130
吞吐率和最大吞吐率的计算

560
00:27:47,420 --> 00:27:50,820
计算过程当中的小技巧

561
00:27:50,820 --> 00:27:54,300
流水线建立时间不要直接求和

562
00:27:54,300 --> 00:27:55,940
可以呢展

563
00:27:55,940 --> 00:27:58,630
方便后面的计算过程

564
00:27:58,630 --> 00:28:01,950
那这些呢就是需要大家掌握的内容

565
00:28:01,950 --> 00:28:05,590
希望本视频呢，能给大家带来一些帮助
