1
00:00:00,000 --> 00:00:03,240
接下来我们看到进程资源图

2
00:00:03,240 --> 00:00:08,039
进程资源图是表示资源调度的一种呢方式

3
00:00:08,039 --> 00:00:12,170
那我们呢，需要了解到它当中图示的一些含义

4
00:00:12,170 --> 00:00:13,640
并且呢，知道啊

5
00:00:13,640 --> 00:00:15,940
它在资源分配的过程当中

6
00:00:15,940 --> 00:00:19,720
如何体现死锁这样的一个呢描述

7
00:00:19,720 --> 00:00:22,840
在进程资源图的考察当中

8
00:00:22,840 --> 00:00:26,020
主要呢，就是问大家节点的情况

9
00:00:26,020 --> 00:00:28,820
以及呢，是否会产生思索

10
00:00:28,820 --> 00:00:32,860
我们首先呢，来了解一下进程资源图的图示

11
00:00:32,860 --> 00:00:35,380
在进程资源图当中

12
00:00:35,380 --> 00:00:37,750
节点表示的是进程

13
00:00:37,750 --> 00:00:40,450
这种的圆形节点就是呢，进程

14
00:00:40,450 --> 00:00:43,690
并且中间会写出进程的名称

15
00:00:43,690 --> 00:00:45,730
唉， P 1、 P 2、 P 3、 P 4

16
00:00:45,730 --> 00:00:48,660
资源用矩形圈起来

17
00:00:48,660 --> 00:00:51,050
那里面圆圈的个数啊

18
00:00:51,050 --> 00:00:52,830
就是呢，资源的总数

19
00:00:52,830 --> 00:00:55,220
外面呢，是资源的名称

20
00:00:55,220 --> 00:00:58,980
这里表示呢，系统当中有两个啊

21
00:00:58,980 --> 00:01:00,060
一、资源

22
00:01:00,060 --> 00:01:03,810
那从进程指向资源

23
00:01:03,810 --> 00:01:08,010
资源指向进程分别表示什么样的含义呢

24
00:01:08,010 --> 00:01:10,160
资源指向进程

25
00:01:10,160 --> 00:01:14,170
表示的是资源已经分配给进程了

26
00:01:14,170 --> 00:01:19,910
进程资源图啊，是某一个时刻它的静态状况

27
00:01:19,910 --> 00:01:22,660
所以箭头指向进程的话

28
00:01:22,660 --> 00:01:26,540
表示资源已经分配给进程了

29
00:01:26,540 --> 00:01:29,360
而箭头指向资源

30
00:01:29,360 --> 00:01:34,880
表示当前进程向资源所申请的，诶，资源数

31
00:01:34,880 --> 00:01:37,390
一个箭头表示一个资源

32
00:01:37,390 --> 00:01:41,100
这里表示 R 1向 P 分配了一个资源

33
00:01:41,100 --> 00:01:45,240
这里呢，表示 P 向 R 1申请一个资源

34
00:01:45,240 --> 00:01:46,820
这个申请资源啊

35
00:01:46,820 --> 00:01:49,680
是需要等待 IE 来分配的

36
00:01:49,680 --> 00:01:52,380
那我们在分配的过程当中啊

37
00:01:52,380 --> 00:01:56,540
在这里是需要从某一个静态来考虑

38
00:01:56,540 --> 00:01:59,850
当在当前的图示当中

39
00:01:59,850 --> 00:02:03,120
我们先分析资源的分配情况

40
00:02:03,120 --> 00:02:06,500
然后呢，可以列出剩余的可用资源数

41
00:02:06,500 --> 00:02:07,860
再来判断呢

42
00:02:07,860 --> 00:02:11,480
是否可以呢，支持进程来进行执行

43
00:02:11,480 --> 00:02:13,970
那此时我们现在呢

44
00:02:13,970 --> 00:02:16,130
是有两个 R 1的

45
00:02:16,130 --> 00:02:20,070
这两个 R 1啊，已经分配了一个给 P 进城

46
00:02:20,070 --> 00:02:23,020
剩下一个呢， R 1是可用的

47
00:02:23,020 --> 00:02:25,460
那所有的分配情况

48
00:02:25,460 --> 00:02:28,470
看完之后再来看申请情况

49
00:02:28,470 --> 00:02:30,240
目前的话只有呢

50
00:02:30,240 --> 00:02:31,700
P 1进程需要

51
00:02:31,700 --> 00:02:34,000
向 R 1资源申请一个

52
00:02:34,000 --> 00:02:38,410
而这一个资源当前呢是剩余一个可用的

53
00:02:38,410 --> 00:02:41,220
所以刚好足够分配

54
00:02:41,220 --> 00:02:43,190
那足够分配

55
00:02:43,190 --> 00:02:46,970
也就是说呢，是能够执行下去的

56
00:02:46,970 --> 00:02:50,570
这种情况我们就叫它呢可化简

57
00:02:51,020 --> 00:02:53,380
也就是呢非阻塞节点

58
00:02:53,380 --> 00:02:56,620
这种节点啊，叫做非阻塞节点

59
00:03:02,860 --> 00:03:05,550
当我们的图示当中

60
00:03:05,550 --> 00:03:08,080
所有的节点都能够呢

61
00:03:08,080 --> 00:03:10,660
依次按照某种特定的顺序啊

62
00:03:10,660 --> 00:03:12,070
可以执行完成

63
00:03:12,070 --> 00:03:16,880
只要呢，满足最终将所有的节点都化简的话

64
00:03:16,880 --> 00:03:20,430
那这个图啊，我们就叫它非死所的

65
00:03:20,430 --> 00:03:22,570
如果不能够执行

66
00:03:22,570 --> 00:03:25,270
我们就叫它呢阻塞节点了

67
00:03:25,270 --> 00:03:29,300
这个地方阻塞和非阻塞区分一下

68
00:03:29,300 --> 00:03:32,680
能够有资源支持它完成

69
00:03:32,680 --> 00:03:33,660
就叫做呢

70
00:03:33,660 --> 00:03:37,260
唉，阻非阻塞节点不能够支持它完成的

71
00:03:37,260 --> 00:03:39,060
就叫做呢阻塞节点

72
00:03:39,060 --> 00:03:41,860
只要进程啊，能够完成

73
00:03:41,860 --> 00:03:44,680
我们可以分析完成之

74
00:03:44,680 --> 00:03:46,980
可以将资源释放

75
00:03:46,980 --> 00:03:50,330
所以这个图示最终呢，可以化简

76
00:03:50,330 --> 00:03:52,670
将进程 P 执行完成

77
00:03:52,670 --> 00:03:57,420
并且已经分配的和刚刚申请的资源

78
00:03:57,420 --> 00:03:59,530
都可以呢，释放回去

79
00:03:59,530 --> 00:04:03,670
那此时 R 1的资源就变成了两个了

80
00:04:03,670 --> 00:04:06,860
所以这里啊，我们在后续分析的过程当中

81
00:04:06,860 --> 00:04:11,450
就可以通过两个 R 1接着往下呢，去进行化简

82
00:04:11,450 --> 00:04:15,320
这里我们还需要了解什么是阻塞节点

83
00:04:15,320 --> 00:04:17,120
什么是非阻塞节点

84
00:04:17,120 --> 00:04:19,040
什么是可化简的

85
00:04:19,040 --> 00:04:20,440
什么是死锁

86
00:04:20,440 --> 00:04:24,310
如果化简到最后还有进程没有完成

87
00:04:24,310 --> 00:04:25,940
我们就叫它死锁

88
00:04:25,940 --> 00:04:28,180
如果说化简之后啊

89
00:04:28,180 --> 00:04:31,480
我们的资源是可以呢正常执行的

90
00:04:31,480 --> 00:04:34,980
就叫做，它就叫做呢非死所的情况

91
00:04:34,980 --> 00:04:38,260
那化简就是呢，有进程可以执行完成

92
00:04:38,260 --> 00:04:39,940
从而呢，释放资源

93
00:04:39,940 --> 00:04:43,690
那这个图示呢，就可以进一步的进行化简了

94
00:04:43,690 --> 00:04:48,440
这里呀，就是进程资源图需要我们掌握的内容

95
00:04:48,770 --> 00:04:51,510
下面来看一下进程资源图

96
00:04:51,510 --> 00:04:54,550
它在我们软件设计师的考察情况

97
00:04:54,550 --> 00:04:58,040
如下图所示的进程资源图当中啊

98
00:04:58,040 --> 00:05:01,520
我们将所有的资源呢，先列出来

99
00:05:01,520 --> 00:05:04,620
这里有 R 1、 R 二两类资源吧

100
00:05:04,620 --> 00:05:08,310
那他们初始的总数分别是二和三

101
00:05:08,310 --> 00:05:10,070
分配了多少呢

102
00:05:10,070 --> 00:05:13,050
R 1流出的箭头有两个

103
00:05:13,050 --> 00:05:16,110
说明它分配了两个资源吧

104
00:05:16,110 --> 00:05:18,360
我们用负数表示分配

105
00:05:18,360 --> 00:05:20,980
那 R 3分配 R 2啊

106
00:05:20,980 --> 00:05:23,260
向外流出了两个资源

107
00:05:23,260 --> 00:05:25,160
诶，分配了两个资源

108
00:05:25,160 --> 00:05:28,810
那目前 R 1剩余资源数有多少

109
00:05:28,810 --> 00:05:29,810
没有了

110
00:05:29,810 --> 00:05:32,150
R 2剩余资源数有多少

111
00:05:32,150 --> 00:05:34,170
还有一个可用

112
00:05:34,170 --> 00:05:35,170
那这是呢

113
00:05:35,170 --> 00:05:36,840
资源的情况

114
00:05:36,840 --> 00:05:38,920
我们再来看进程

115
00:05:38,920 --> 00:05:40,970
进程已分配的资

116
00:05:40,970 --> 00:05:42,730
我们刚刚已经分析过了

117
00:05:42,730 --> 00:05:46,550
现在看他所申请待分配的资源

118
00:05:46,550 --> 00:05:52,090
那 P 1节点它需要一个 R 2系统

119
00:05:52,090 --> 00:05:53,190
有没有呢

120
00:05:53,190 --> 00:05:55,670
刚好有一个 R 2可用

121
00:05:55,670 --> 00:05:59,470
所以 P 1它是非阻塞的

122
00:06:01,140 --> 00:06:04,740
说 P 1阻塞的都是呢，错误的

123
00:06:04,740 --> 00:06:05,580
那我们呢

124
00:06:05,580 --> 00:06:08,100
哎， B 选项是错误的

125
00:06:08,100 --> 00:06:11,420
那我们再来看 P 2进程的话

126
00:06:11,420 --> 00:06:14,200
它还需要几个资源呢

127
00:06:14,200 --> 00:06:17,510
哎，它还需要一个 R 1

128
00:06:17,510 --> 00:06:20,120
有没有 I 1给他没有

129
00:06:20,120 --> 00:06:22,440
所以当前情况下

130
00:06:22,440 --> 00:06:25,550
P 2是阻塞节点

131
00:06:25,550 --> 00:06:29,660
说 P 2非阻塞的都是呢，错误的

132
00:06:29,660 --> 00:06:32,960
哎，正确选项只有 D 选项了吧

133
00:06:33,530 --> 00:06:35,370
再来看 P 3

134
00:06:35,370 --> 00:06:38,420
P 3还需要一个 R 2

135
00:06:38,420 --> 00:06:41,300
刚好当前有一个 R 2可用

136
00:06:41,300 --> 00:06:43,740
所以它也是非阻塞的

137
00:06:43,740 --> 00:06:47,280
那非阻塞是可以进行化简的吧

138
00:06:47,280 --> 00:06:50,690
我们在化简的过程当中会发现哎

139
00:06:50,690 --> 00:06:54,570
P 1、 P 3任意选择一个节点给它呢执行

140
00:06:54,570 --> 00:06:57,880
比如说 P 1我们执行之

141
00:06:57,880 --> 00:07:02,660
会将呢它所占据的资源全部释放出去

142
00:07:02,660 --> 00:07:05,540
那 P 1执行完成

143
00:07:08,780 --> 00:07:11,780
释放一个 R 1

144
00:07:15,100 --> 00:07:18,060
此时系统有几个 I 1啊

145
00:07:18,060 --> 00:07:20,160
系统有一个 I 1

146
00:07:20,160 --> 00:07:23,810
这个 R 1能不能给 R 2来用呢

147
00:07:23,810 --> 00:07:25,650
哎，能不能给 P 2用呢

148
00:07:25,650 --> 00:07:29,470
可以，所以 P 2也变成可执行呢

149
00:07:31,700 --> 00:07:33,840
P 2执行之后

150
00:07:33,840 --> 00:07:37,380
它会释放一个 R 2出去

151
00:07:41,420 --> 00:07:44,690
那此时我们系统当

152
00:07:44,690 --> 00:07:47,150
R 2还剩下1+1

153
00:07:47,150 --> 00:07:49,410
两个 R 2资源可用

154
00:07:49,410 --> 00:07:51,510
唉， P 3够不够呢

155
00:07:51,510 --> 00:07:53,680
P 3只需要一个 R 2

156
00:07:53,680 --> 00:07:56,440
所以 P 3也可执行

157
00:07:57,300 --> 00:08:00,240
三个进程都执行完了

158
00:08:00,240 --> 00:08:02,580
这种情况我们就叫它呢

159
00:08:02,580 --> 00:08:04,590
整个图可化解

160
00:08:04,590 --> 00:08:07,480
并且它是非死所得

161
00:08:07,480 --> 00:08:09,120
因为化简之后

162
00:08:09,120 --> 00:08:11,980
所有进程都已经执行完成了

163
00:08:11,980 --> 00:08:13,230
所以它是呢

164
00:08:13,230 --> 00:08:14,920
唉非死所的

165
00:08:14,920 --> 00:08:18,920
那这里涉及到进程资源图的一些识别

166
00:08:18,920 --> 00:08:21,300
大家呢要能够啊记住

167
00:08:21,300 --> 00:08:23,700
可以呢，做题去巩固一下
