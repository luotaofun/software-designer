1
00:00:00,000 --> 00:00:04,620
接下来我们展开来看一下 PV 操作的概念

2
00:00:04,620 --> 00:00:07,630
我们在进程当中啊

3
00:00:07,630 --> 00:00:08,670
有一些呢

4
00:00:08,670 --> 00:00:10,590
特殊的模型

5
00:00:10,590 --> 00:00:13,360
首先看到互斥模型

6
00:00:13,360 --> 00:00:15,300
什么是互斥模型呢

7
00:00:15,300 --> 00:00:16,940
它类似于啊

8
00:00:16,940 --> 00:00:19,430
千军万马过独木桥

9
00:00:19,430 --> 00:00:20,530
那我们呢

10
00:00:20,530 --> 00:00:22,570
像我们霸王渡江的时候

11
00:00:22,570 --> 00:00:24,330
哎，我们有呢，千军万马

12
00:00:24,330 --> 00:00:26,790
但是只有一个独木桥

13
00:00:26,790 --> 00:00:28,820
独木桥有什么特点啊

14
00:00:28,820 --> 00:00:31,060
一次只能通过一个人

15
00:00:31,060 --> 00:00:34,600
而大家最终都要通过这个独木桥吧

16
00:00:34,600 --> 00:00:37,160
在整个全局上来看

17
00:00:37,160 --> 00:00:39,380
大家是共享的这个独木桥

18
00:00:39,380 --> 00:00:42,900
但是呢，从单一的一个时刻来看

19
00:00:42,900 --> 00:00:47,680
同一时刻只允许一个士兵来使用独木桥

20
00:00:47,680 --> 00:00:50,520
所以这些士兵之前之间啊

21
00:00:50,520 --> 00:00:52,610
有互斥的关系

22
00:00:52,610 --> 00:00:54,570
这个独木桥呢

23
00:00:54,570 --> 00:00:57,970
我们就叫做临界资源

24
00:00:57,970 --> 00:01:00,600
临界资源它指的就是呢

25
00:01:00,600 --> 00:01:03,700
进程之间需要用互斥方式来访问

26
00:01:03,700 --> 00:01:04,620
不能同时访问

27
00:01:04,620 --> 00:01:06,780
同一时刻只能让一个进程访问

28
00:01:06,780 --> 00:01:08,160
就叫做互斥

29
00:01:08,160 --> 00:01:10,510
那这个资源全局上来看

30
00:01:10,510 --> 00:01:12,490
他家呢又是共享的

31
00:01:12,490 --> 00:01:14,750
这就是呢，临界资源

32
00:01:14,750 --> 00:01:17,580
常见的我们访问磁盘、磁带

33
00:01:17,580 --> 00:01:22,280
还有呢，像缓冲区也是典型的临界资源

34
00:01:22,280 --> 00:01:25,100
那我们对于进程当中啊

35
00:01:25,100 --> 00:01:27,800
访问临界资源的那段代码

36
00:01:27,800 --> 00:01:29,280
注意是代码

37
00:01:29,280 --> 00:01:31,440
称之为临界区

38
00:01:31,440 --> 00:01:34,200
那我们的临界区不是一个区域

39
00:01:34,200 --> 00:01:36,090
而是一段代码

40
00:01:36,090 --> 00:01:40,010
这种因为资源而产生的限制

41
00:01:40,010 --> 00:01:41,270
我们叫做呢

42
00:01:41,270 --> 00:01:43,380
间接制约关系

43
00:01:43,380 --> 00:01:45,490
这些互斥的进程

44
00:01:45,490 --> 00:01:49,110
相互之间是间接制约的

45
00:01:49,410 --> 00:01:53,530
有间接制约呢，就有直接制约关系

46
00:01:53,530 --> 00:01:57,530
那下面呢，我们再看到同步模型

47
00:01:58,270 --> 00:02:00,990
什么是同步模型呢

48
00:02:00,990 --> 00:02:03,670
那比如说呢，我们现在，唉

49
00:02:03,670 --> 00:02:07,550
你和你的对象约好一起去看电影

50
00:02:07,550 --> 00:02:10,740
那么我们约好的是八点

51
00:02:10,740 --> 00:02:12,920
你10分钟就走到了

52
00:02:12,920 --> 00:02:15,020
而你对象需要呢，哎

53
00:02:15,020 --> 00:02:16,340
半个小时

54
00:02:16,340 --> 00:02:19,600
那请问到达电影院门口

55
00:02:19,600 --> 00:02:21,500
你是直接去看电影呢

56
00:02:21,500 --> 00:02:24,970
还是等你对象一起去看电影呢

57
00:02:24,970 --> 00:02:27,000
唉，很显然应该一起去吧

58
00:02:27,000 --> 00:02:30,560
否则的话，你的对象基本上也就没对象了啊

59
00:02:30,560 --> 00:02:34,230
所以呢，在这里涉及到的同步啊

60
00:02:34,230 --> 00:02:38,670
主要呢，指的是在进程与进程之

61
00:02:38,670 --> 00:02:40,870
它的速度有差异

62
00:02:40,870 --> 00:02:42,980
那速度有差异的话

63
00:02:42,980 --> 00:02:47,020
在一定情况下就比较快的进程而言

64
00:02:47,020 --> 00:02:49,550
它是需要停下来等待的吧

65
00:02:49,550 --> 00:02:54,800
等待其他进程到达之后再开始下一步

66
00:02:54,800 --> 00:02:58,990
那进程由先后顺序产生的制

67
00:02:58,990 --> 00:03:02,280
叫做呢，直接制约关系

68
00:03:02,280 --> 00:03:06,000
这两个模型是是不是非此即彼啊

69
00:03:06,000 --> 00:03:08,060
并不是，它们之间啊

70
00:03:08,060 --> 00:03:10,580
并不是相互排斥的关系啊

71
00:03:10,580 --> 00:03:14,280
我们平常看到的进程调度可以有互斥

72
00:03:14,280 --> 00:03:15,320
可以有同步

73
00:03:15,320 --> 00:03:18,960
也可以两种模型交叉形成

74
00:03:18,960 --> 00:03:24,930
那这是关于同步互斥以及临界资源的概念

75
00:03:24,930 --> 00:03:28,730
那我们啊，在进程调度的过程当中

76
00:03:28,730 --> 00:03:32,600
进程它本身是具有并发的特性

77
00:03:32,600 --> 00:03:36,370
进程与进程之间并发的过程当中

78
00:03:36,370 --> 00:03:41,530
我们如何来限定它们同时访问临界资源

79
00:03:41,530 --> 00:03:41,910
唉

80
00:03:41,910 --> 00:03:44,510
如何来限定多个进程之间

81
00:03:44,510 --> 00:03:47,340
形成协调的同步模型呢

82
00:03:47,340 --> 00:03:49,170
那我们在这个过程当中

83
00:03:49,170 --> 00:03:53,370
会由 PV 操作来控制程序的，诶

84
00:03:53,370 --> 00:03:55,460
进程的并发过程

85
00:03:55,460 --> 00:03:59,730
后面呢，我们会展开给大家介绍 PV 操作

86
00:03:59,730 --> 00:04:02,920
PV 操作具体是什么样的过程呢

87
00:04:02,920 --> 00:04:05,510
我们经常讲到的 PV 啊

88
00:04:05,510 --> 00:04:08,130
会说到呢， p s vs 

89
00:04:08,130 --> 00:04:11,300
那这里的 PV 它是一个呢

90
00:04:11,300 --> 00:04:13,680
操作系统的原语

91
00:04:13,680 --> 00:04:16,360
所谓言语就是呢

92
00:04:16,360 --> 00:04:18,720
原子性质的一段呢描述

93
00:04:18,720 --> 00:04:20,649
或者说一段程序语言

94
00:04:20,649 --> 00:04:23,790
那在这个原语的过程当中呢

95
00:04:23,790 --> 00:04:25,030
要么都做

96
00:04:25,030 --> 00:04:26,780
要么都不做

97
00:04:26,780 --> 00:04:31,170
PE 操作它指的是枷锁的过程

98
00:04:31,170 --> 00:04:34,540
V 操作呢，一般是个解锁的过程

99
00:04:34,540 --> 00:04:36,800
对于 P 操作而言

100
00:04:36,800 --> 00:04:39,060
它包含两个步骤

101
00:04:39,060 --> 00:04:42,940
S 等于 S 减1 S 小于零的判断

102
00:04:42,940 --> 00:04:45,770
那所谓的言语就是这两个步骤

103
00:04:45,770 --> 00:04:46,950
要么都做

104
00:04:46,950 --> 00:04:48,480
要么呢都不做

105
00:04:48,480 --> 00:04:50,960
不会呢，做一半就不管了

106
00:04:50,960 --> 00:04:52,530
这里呢，注意一下

107
00:04:52,530 --> 00:04:55,000
那对于 PV 操作而言

108
00:04:55,000 --> 00:04:58,570
我们会针对 PS vs 来进行 PV 操作

109
00:04:58,570 --> 00:04:59,900
S 是什么呢

110
00:04:59,900 --> 00:05:02,290
S 就是信号量

111
00:05:02,290 --> 00:05:04,420
所谓的信号量啊

112
00:05:04,420 --> 00:05:06,980
它是一种特殊的变量

113
00:05:06,980 --> 00:05:09,980
它在我们啊进程代码当中呢

114
00:05:09,980 --> 00:05:12,600
是一个全局变量

115
00:05:16,160 --> 00:05:19,840
当信号量，诶，进行记录的时候

116
00:05:19,840 --> 00:05:24,100
信号量它可以表示资源的数量

117
00:05:24,100 --> 00:05:25,200
比如说呢

118
00:05:25,200 --> 00:05:29,600
我们对打印机进行 PV 操作的控制

119
00:05:29,600 --> 00:05:32,560
打印机它的台数呢，是三台

120
00:05:32,560 --> 00:05:35,030
那我们在设定信号量的时候

121
00:05:35,030 --> 00:05:36,710
它的初始取值啊

122
00:05:36,710 --> 00:05:38,960
一般呢就是等于三的

123
00:05:38,960 --> 00:05:41,800
当信号量为负数的时候

124
00:05:41,800 --> 00:05:45,260
它还可以呢，表示排队的进程数

125
00:05:45,260 --> 00:05:47,580
我们在后面呢，可以看到

126
00:05:47,580 --> 00:05:49,960
首先我们来想一想

127
00:05:49,960 --> 00:05:54,210
假如啊，我们有一个库存清单，诶

128
00:05:54,210 --> 00:05:57,410
涉及到的一些资源把它记录下来

129
00:05:57,410 --> 00:05:59,630
比如说 A 资源

130
00:05:59,630 --> 00:06:02,890
它的初始值有100个

131
00:06:02,890 --> 00:06:05,150
那我们设定信号量的时候

132
00:06:05,150 --> 00:06:06,630
S 就等于180

133
00:06:06,630 --> 00:06:10,080
我们在取 A 资源的时候

134
00:06:10,080 --> 00:06:12,540
比如说呢，大家在办公室当中

135
00:06:12,540 --> 00:06:15,130
在公司当中申请一个笔记本儿

136
00:06:15,130 --> 00:06:18,560
那申请的时候我们需要提交申请吧

137
00:06:18,560 --> 00:06:20,540
那你提交申之后啊

138
00:06:20,540 --> 00:06:24,080
我们资源的剩余清单就会变成99

139
00:06:24,490 --> 00:06:30,590
所以申请资源在资源数相应的表示情况下

140
00:06:30,590 --> 00:06:31,170
可以呢

141
00:06:31,170 --> 00:06:34,990
通过减一来表示申请资

142
00:06:34,990 --> 00:06:37,180
S 等于 S 减一

143
00:06:37,180 --> 00:06:41,120
它是表示申请锁定资源

144
00:06:41,120 --> 00:06:42,250
那我们呢

145
00:06:42,250 --> 00:06:44,310
锁定之后别人就不能用了

146
00:06:44,310 --> 00:06:47,170
也也不会存在说同时去申请了吧

147
00:06:47,170 --> 00:06:49,150
已经减掉了一

148
00:06:49,150 --> 00:06:53,870
那申请之后我们要看一看资源够不够吧

149
00:06:53,870 --> 00:06:57,420
不够的话就不能来申请吧

150
00:06:57,420 --> 00:07:00,800
那这个过程会检查资源是否足够

151
00:07:00,800 --> 00:07:01,800
怎么检查

152
00:07:01,800 --> 00:07:03,400
看一看够不够啊

153
00:07:03,400 --> 00:07:05,360
什么样的情况下够呢

154
00:07:05,360 --> 00:07:08,120
我们减一之后等于零

155
00:07:08,120 --> 00:07:11,270
说明初始有一个资源可用吧

156
00:07:11,270 --> 00:07:15,130
那注意我们是先做减法再比较的

157
00:07:15,130 --> 00:07:18,700
所以只有小于零的情况下

158
00:07:18,700 --> 00:07:22,440
才表示资源不足等

159
00:07:23,430 --> 00:07:26,090
S 等于零的时候

160
00:07:26,090 --> 00:07:28,960
资源仍然是足够的

161
00:07:28,960 --> 00:07:30,950
这个地方注意区别一下

162
00:07:30,950 --> 00:07:34,530
因为我们先做了减一再做的比较

163
00:07:34,530 --> 00:07:38,830
也就是说我们先申请资源总

164
00:07:38,830 --> 00:07:42,890
已经呢在我们申请的基础上减去了一

165
00:07:42,890 --> 00:07:44,960
比如说 B 资

166
00:07:44,960 --> 00:07:47,680
现在呢总数只有一个

167
00:07:47,680 --> 00:07:49,960
那我们申请之

168
00:07:49,960 --> 00:07:53,460
提交申请 PSSB 之后

169
00:07:53,460 --> 00:08:00,230
信号量会从哎1-1变成了零

170
00:08:00,750 --> 00:08:04,910
那正常来讲，一个资源我们是够用的吧

171
00:08:04,910 --> 00:08:07,550
所以当它等于零的时候

172
00:08:07,550 --> 00:08:09,840
仍然可以正常执行

173
00:08:09,840 --> 00:08:12,710
只有等于小于零的时候

174
00:08:12,710 --> 00:08:14,550
只有它小于零的时候

175
00:08:14,550 --> 00:08:15,790
说明资源不够

176
00:08:15,790 --> 00:08:17,940
资源不够怎么办

177
00:08:17,940 --> 00:08:20,230
我们没有提到 CPU 吧

178
00:08:20,230 --> 00:08:22,190
非 CPU 资源不足

179
00:08:22,190 --> 00:08:25,040
它会进入阻塞队列

180
00:08:25,040 --> 00:08:28,070
那进入组阻塞队列之后

181
00:08:28,070 --> 00:08:32,610
只有呢资源足够的时候才会呢进入就绪队列

182
00:08:32,610 --> 00:08:34,480
这里呢要注意一下啊

183
00:08:34,480 --> 00:08:36,620
那我们这是 P 操作

184
00:08:36,620 --> 00:08:38,700
申请并锁定资源

185
00:08:38,700 --> 00:08:42,120
同时呢还能检查资源是否足够

186
00:08:42,120 --> 00:08:43,750
不够就阻塞

187
00:08:43,750 --> 00:08:44,810
go 的话呢

188
00:08:44,810 --> 00:08:48,400
唉，就执行后面的其他代码

189
00:08:48,400 --> 00:08:53,070
这个矩形的部分都是 PS 的过程

190
00:08:53,880 --> 00:08:56,760
那我们再来看 V 操作

191
00:08:57,300 --> 00:09:00,800
微操作是个资源释放的过程

192
00:09:00,800 --> 00:09:03,550
什么样的情况下资源释放的呢

193
00:09:03,550 --> 00:09:05,770
唉，我们用完了 B 资源

194
00:09:05,770 --> 00:09:07,590
就把资源还回去了

195
00:09:07,590 --> 00:09:08,870
还回去之后

196
00:09:08,870 --> 00:09:13,070
这个资料清单上面资源数是不是要增加了

197
00:09:13,070 --> 00:09:15,890
所以第一步释放资源

198
00:09:15,890 --> 00:09:18,220
S 等于 S 加一

199
00:09:18,220 --> 00:09:22,310
它是一个释放解锁资源的过程

200
00:09:22,310 --> 00:09:24,970
那释放之后

201
00:09:24,970 --> 00:09:28,570
我们的微操作还有一个动作

202
00:09:28,570 --> 00:09:32,030
他需要呢检查有没有人排队

203
00:09:32,030 --> 00:09:35,870
有人排队的话要通知别人

204
00:09:35,870 --> 00:09:36,970
那我们啊

205
00:09:36,970 --> 00:09:40,610
在 S 小于零的情况下

206
00:09:40,610 --> 00:09:44,980
相当于在我们的库管员那里做了一个登记

207
00:09:44,980 --> 00:09:46,830
那你有登记的话

208
00:09:46,830 --> 00:09:48,790
唉，当资源还回来

209
00:09:48,790 --> 00:09:50,410
库管员呢就会告诉你

210
00:09:50,410 --> 00:09:53,570
A ，我们这个地方资源已经回来了

211
00:09:53,570 --> 00:09:54,730
你过来拿吧

212
00:09:54,730 --> 00:09:57,610
那这个过程所做的操作呢

213
00:09:57,610 --> 00:09:59,230
也是微操作

214
00:09:59,230 --> 00:10:00,970
先释放资源

215
00:10:00,970 --> 00:10:03,950
再检查是否有人排队

216
00:10:03,950 --> 00:10:05,690
那有人排队的话

217
00:10:05,690 --> 00:10:10,650
就通知并唤醒我们的阻塞进程

218
00:10:18,880 --> 00:10:21,740
没有人排队就不用通知了吧

219
00:10:21,740 --> 00:10:22,820
直接往下走

220
00:10:22,820 --> 00:10:24,180
有人排队的话

221
00:10:24,180 --> 00:10:26,900
我们有一个通知的动作

222
00:10:26,900 --> 00:10:28,340
那我们在这里

223
00:10:28,340 --> 00:10:33,260
首先第一点注意这个地方是小于等于零

224
00:10:33,260 --> 00:10:34,470
我们说啊

225
00:10:34,470 --> 00:10:38,820
如果 SB 刚刚减一变成了零吧

226
00:10:38,820 --> 00:10:42,420
又来了一个新的人员要申请 SB 

227
00:10:42,420 --> 00:10:44,560
它会变成一

228
00:10:44,560 --> 00:10:47,410
那资源不够了，它会阻塞

229
00:10:47,410 --> 00:10:52,700
所谓的一意味着有一个进程在排队

230
00:10:52,700 --> 00:10:54,650
那在这个过程当中

231
00:10:54,650 --> 00:10:56,710
一旦资源释放

232
00:10:56,710 --> 00:11:00,120
我们先对 S 呢进行加一

233
00:11:00,120 --> 00:11:02,190
它变成了零

234
00:11:02,190 --> 00:11:03,990
唉，这种情况下

235
00:11:03,990 --> 00:11:06,070
先加一再比较

236
00:11:06,070 --> 00:11:09,880
说明等于零的时候就有人排队了

237
00:11:09,880 --> 00:11:14,090
那这里判断的是 S 是否小于等于零

238
00:11:14,090 --> 00:11:16,760
来甄别有没有人排队

239
00:11:16,760 --> 00:11:20,560
等于零的情况下也会有人排队

240
00:11:20,560 --> 00:11:22,620
这里呢，注意区分

241
00:11:22,620 --> 00:11:28,140
其次，我们从组五色队列来通知一个进程的话

242
00:11:28,140 --> 00:11:33,140
大家想一想这个进程会进入哪一个状态呢

243
00:11:33,930 --> 00:11:37,250
应该是进入就绪态

244
00:11:38,450 --> 00:11:40,190
也就是说

245
00:11:40,190 --> 00:11:44,010
当前进程没有执行完的时候

246
00:11:44,010 --> 00:11:48,130
这个唤醒的进程并不会立即执行

247
00:11:48,130 --> 00:11:49,330
它会等呢

248
00:11:49,330 --> 00:11:51,670
哎，我们微操作的这个进程啊

249
00:11:51,670 --> 00:11:52,990
全部完成之后呢

250
00:11:52,990 --> 00:11:54,190
它才会进入

251
00:11:54,190 --> 00:11:56,210
诶，我们的运行态

252
00:11:56,210 --> 00:11:58,470
那我们给大家讲到的

253
00:11:58,470 --> 00:12:02,330
首先，信号量它可以表示资源数

254
00:12:02,330 --> 00:12:04,980
当它小于零的时候

255
00:12:04,980 --> 00:12:08,270
可以呢表示排队的进程数

256
00:12:08,270 --> 00:12:10,520
在 P 操作当中

257
00:12:10,520 --> 00:12:11,680
两个动作

258
00:12:11,680 --> 00:12:12,940
一个申请

259
00:12:12,940 --> 00:12:15,880
一个呢检查资源是否足够

260
00:12:15,880 --> 00:12:21,910
注意这个地方检查是用小于零来进行检查的

261
00:12:21,910 --> 00:12:24,220
小于零才阻塞

262
00:12:24,220 --> 00:12:28,040
其次， V 操作先释放再通知

263
00:12:28,040 --> 00:12:29,860
释放的过程当中

264
00:12:29,860 --> 00:12:35,130
注意这个地方是小于等于零来进行判断的

265
00:12:35,130 --> 00:12:37,110
这两个地方呢，相似

266
00:12:37,110 --> 00:12:40,000
但是呢，不要搞混淆了自己啊

267
00:12:40,000 --> 00:12:43,710
可以试着呢，以一些信号量来推一推

268
00:12:43,710 --> 00:12:48,570
这就是呢，信号量与 PV 操作的一些呢过程

269
00:12:49,280 --> 00:12:51,770
下面我们来看一下

270
00:12:51,770 --> 00:12:55,410
对于我们的 PV 操作的基本概念啊

271
00:12:55,410 --> 00:12:58,110
在我们软件设计师考试当中

272
00:12:58,110 --> 00:13:00,250
具体是如何来考察的

273
00:13:00,250 --> 00:13:01,830
首先下面这道题

274
00:13:01,830 --> 00:13:05,070
PV 操作是操作系统提供的

275
00:13:05,070 --> 00:13:07,490
具有特定功能的原语

276
00:13:07,490 --> 00:13:10,450
那么利用 PV 操作可以做什么呢

277
00:13:10,450 --> 00:13:14,680
唉，我们说 PV 操作是个枷锁解锁的过程

278
00:13:14,680 --> 00:13:18,250
所以它可能会发生死锁

279
00:13:18,250 --> 00:13:20,200
A 选项错误

280
00:13:20,200 --> 00:13:24,720
B 选项实现资源的互斥使用

281
00:13:24,720 --> 00:13:25,630
那我们呢

282
00:13:25,630 --> 00:13:29,330
利用 PV 操作可以控制资源的互斥访问

283
00:13:29,330 --> 00:13:32,130
所以 B 选项是正确的

284
00:13:32,130 --> 00:13:36,870
C 选项提高资源利用率

285
00:13:37,720 --> 00:13:39,800
对于资源来讲

286
00:13:39,800 --> 00:13:41,340
如果给它加锁

287
00:13:41,340 --> 00:13:44,380
我们呢会降低资源的利用率

288
00:13:44,380 --> 00:13:47,160
所以 C 选项是错误的

289
00:13:47,410 --> 00:13:53,000
D 选项推迟进程使用共享资源的时间

290
00:13:53,000 --> 00:13:56,060
那我们对于共享资源而言的话

291
00:13:56,060 --> 00:13:58,560
它们是可以共享使用的

292
00:13:58,560 --> 00:14:00,410
需不需要用 PV 操作呢

293
00:14:00,410 --> 00:14:05,150
不需要，我们是对临界资源来进行控制访问的

294
00:14:05,150 --> 00:14:07,700
所以 D 选项也是错误的

295
00:14:07,700 --> 00:14:08,640
这道题啊

296
00:14:08,640 --> 00:14:10,800
考察的是 PV 操

297
00:14:10,800 --> 00:14:14,960
它的一、具体的应用有什么样的特点

298
00:14:15,730 --> 00:14:17,590
下面这道题

299
00:14:17,590 --> 00:14:22,730
假设系统中有 N 个进程来共享三台打印

300
00:14:22,730 --> 00:14:24,540
三台扫描仪

301
00:14:24,540 --> 00:14:29,380
并采用 PV 操作来实现进程同步与互斥

302
00:14:29,380 --> 00:14:33,900
若系统信号量 S 当前值为一

303
00:14:33,900 --> 00:14:38,690
那么进程 P 1、 P 2分别执行了一次 PS 操作

304
00:14:38,690 --> 00:14:41,700
信号量值应该是多少

305
00:14:41,700 --> 00:14:46,150
首先我们说信号量 S 表示的是什

306
00:14:46,150 --> 00:14:47,610
资源数

307
00:14:48,320 --> 00:14:53,160
所以它的初值应该是等于三的

308
00:14:53,160 --> 00:14:55,360
表示三台扫描仪

309
00:14:55,360 --> 00:14:57,050
那我们现在呢

310
00:14:57,050 --> 00:15:00,070
当前值信号量等于一

311
00:15:00,070 --> 00:15:01,130
说明什么

312
00:15:01,130 --> 00:15:04,600
有一个进程在排队小于零的时候

313
00:15:04,600 --> 00:15:06,970
可以表示排队的进程数

314
00:15:06,970 --> 00:15:08,780
而目前 P 

315
00:15:08,780 --> 00:15:10,980
一又执行了一次 P 

316
00:15:10,980 --> 00:15:13,360
S ，哎， P 1执行 P 

317
00:15:13,360 --> 00:15:14,180
s 

318
00:15:14,710 --> 00:15:16,810
信号量变成多少啊

319
00:15:16,810 --> 00:15:19,190
信号量变成了二

320
00:15:19,190 --> 00:15:21,030
S 等于 S 减一

321
00:15:21,030 --> 00:15:23,930
那 P 2又执行了一次 PS 

322
00:15:23,930 --> 00:15:25,430
信号量变成多少

323
00:15:25,430 --> 00:15:27,490
这是一个全局变量

324
00:15:27,490 --> 00:15:32,020
同样呢，会再次的减一变成了三

325
00:15:32,020 --> 00:15:36,480
所以我们在这里所谓的 PV 操作啊

326
00:15:36,480 --> 00:15:39,480
在执行两次哎 P 操作之后

327
00:15:39,480 --> 00:15:42,250
它的取值变成了三

328
00:15:42,250 --> 00:15:44,970
应该选择 B 选项

329
00:15:44,970 --> 00:15:47,840
它所考察的是信号量

330
00:15:47,840 --> 00:15:52,960
以及 P 操作对信号量所做的减法过程

331
00:15:52,960 --> 00:15:57,990
那这里给大家介绍到了 PV 操作的基本概念

332
00:15:57,990 --> 00:16:02,020
了解互斥、同步模型、临界资源的定义

333
00:16:02,020 --> 00:16:03,880
信号量是什么东西

334
00:16:03,880 --> 00:16:06,030
大于零可以表示资源数

335
00:16:06,030 --> 00:16:08,850
小于零可以表示欠着的资源数

336
00:16:08,850 --> 00:16:12,310
也可以呢，表示进程的排队数

337
00:16:12,310 --> 00:16:13,820
P 操作的过程

338
00:16:13,820 --> 00:16:16,820
微操作的过程又是什么样的一个过程呢

339
00:16:16,820 --> 00:16:19,860
可以自己再去呢，试着推导一下
