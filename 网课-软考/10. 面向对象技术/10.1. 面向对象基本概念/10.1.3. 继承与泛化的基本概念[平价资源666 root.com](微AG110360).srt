1
00:00:00,000 --> 00:00:03,540
接下来，我们看到面向对象基本概念当中

2
00:00:03,540 --> 00:00:06,970
继承与泛化相关的一组概念

3
00:00:06,970 --> 00:00:08,580
那什么是继承

4
00:00:08,580 --> 00:00:09,960
什么是泛化呀

5
00:00:09,960 --> 00:00:13,400
我们在前面给大家举到了一组例子

6
00:00:13,400 --> 00:00:17,770
哎，猫和狗从现实世界抽象出对象

7
00:00:17,770 --> 00:00:20,640
再从对象抽象出类

8
00:00:20,640 --> 00:00:24,240
那对于猫类和狗类而言的话

9
00:00:24,240 --> 00:00:28,790
我们发现它们还有一些共通的一些东西

10
00:00:28,790 --> 00:00:31,480
那共通的这些东西啊

11
00:00:31,480 --> 00:00:36,120
就可以呢，进一步的抽象生成一些模板

12
00:00:36,120 --> 00:00:39,670
方便我们呢，反向来生成这些类

13
00:00:39,670 --> 00:00:42,120
那找出共同点

14
00:00:42,120 --> 00:00:46,120
找出它们的共性来进行抽象的过程

15
00:00:46,120 --> 00:00:48,310
我们叫做呢，泛化

16
00:00:48,310 --> 00:00:51,410
那这个抽象的结果

17
00:00:51,410 --> 00:00:52,590
哎，猫和狗

18
00:00:52,590 --> 00:00:54,530
大家自己呢，可以思考一下

19
00:00:54,530 --> 00:00:56,750
猫和狗都属于什么啊

20
00:00:56,750 --> 00:00:58,890
都属于动物

21
00:00:58,890 --> 00:01:01,980
那我们可以呢，再写一个动物类

22
00:01:01,980 --> 00:01:04,010
它所包含的内容呢

23
00:01:04,010 --> 00:01:07,030
就是猫狗共通的一些内容

24
00:01:07,030 --> 00:01:08,010
比如说呢

25
00:01:08,010 --> 00:01:09,550
哎，大家都有毛色

26
00:01:09,550 --> 00:01:10,820
大家都会叫

27
00:01:10,820 --> 00:01:13,110
那这个过程我们叫做

28
00:01:13,110 --> 00:01:15,210
生成泛化的这个过程呢

29
00:01:15,210 --> 00:01:18,010
这个类我们叫做呢父类

30
00:01:18,330 --> 00:01:23,760
通过父类可以呢继承产生子类

31
00:01:23,760 --> 00:01:26,250
那我们在开发的过程当中

32
00:01:26,250 --> 00:01:28,590
同样是一个相反的方向

33
00:01:28,590 --> 00:01:32,390
我们会先写出动物类的模板

34
00:01:32,390 --> 00:01:34,750
再通过继承

35
00:01:34,750 --> 00:01:37,830
哎，用继承的关键字

36
00:01:38,420 --> 00:01:41,560
从而呢，生成子类

37
00:01:41,560 --> 00:01:43,110
所以这个过程当

38
00:01:43,110 --> 00:01:44,470
可以通过父类呢

39
00:01:44,470 --> 00:01:46,750
创建出一些新的类出来

40
00:01:46,750 --> 00:01:48,240
就是呢，子类

41
00:01:48,240 --> 00:01:51,430
那这个创建的过程当中

42
00:01:51,430 --> 00:01:54,530
我们说父类是子类的泛化

43
00:01:54,530 --> 00:01:57,580
子类是父类的特殊化

44
00:01:57,580 --> 00:01:59,980
它可以继承父类

45
00:01:59,980 --> 00:02:02,640
那继承有什么样的特点啊

46
00:02:02,640 --> 00:02:05,620
比如说呢，我们说张三长得像爸爸

47
00:02:05,620 --> 00:02:08,400
那他跟他爸爸会长得像

48
00:02:08,400 --> 00:02:10,900
因为存在一些共同点吧

49
00:02:10,900 --> 00:02:13,760
二者是不是长得一模一样啊

50
00:02:13,760 --> 00:02:15,730
并不是一模一样

51
00:02:15,730 --> 00:02:19,400
也就是说，子类在继承父类的时候

52
00:02:19,400 --> 00:02:22,410
是继承了父类的一些特性

53
00:02:22,410 --> 00:02:26,580
并且还可以呢，有自己新的一些东西

54
00:02:26,580 --> 00:02:29,470
从而呢，形成它的一个特殊化

55
00:02:29,470 --> 00:02:32,660
比如说猫和狗，虽然都是动物

56
00:02:32,660 --> 00:02:34,680
都有毛色，都会叫

57
00:02:34,680 --> 00:02:37,220
但是猫它可以抓老鼠

58
00:02:37,220 --> 00:02:40,240
狗它还可以呢，做警戒吧

59
00:02:40,240 --> 00:02:42,480
他们可以有不同的行为

60
00:02:42,480 --> 00:02:45,180
甚至呢，有不同的特征

61
00:02:45,180 --> 00:02:46,610
所以要注意

62
00:02:46,610 --> 00:02:48,860
继承不是一模一样

63
00:02:48,860 --> 00:02:51,190
它是可以有新的东西

64
00:02:51,190 --> 00:02:53,850
也可以呢做一些修改

65
00:02:53,850 --> 00:02:58,560
唉，毕竟说长得像爸爸并不是一模一样

66
00:02:58,560 --> 00:03:00,590
那说到长得像爸爸

67
00:03:00,590 --> 00:03:02,190
能不能长得像妈妈呢

68
00:03:02,190 --> 00:03:03,650
诶，我们在这里的话

69
00:03:03,650 --> 00:03:05,960
其实还有一种叫做呢

70
00:03:05,960 --> 00:03:09,740
单重继承和多重继承的区别

71
00:03:10,620 --> 00:03:12,240
单重继承啊

72
00:03:12,240 --> 00:03:14,620
就是说呢，它只有一个负累

73
00:03:14,620 --> 00:03:16,610
那多重继承的话

74
00:03:16,610 --> 00:03:19,660
类似于我们说有爸爸妈妈两个人

75
00:03:19,660 --> 00:03:21,980
那这个时候到底长得像谁呢

76
00:03:21,980 --> 00:03:23,860
唉，不知道就会存在呢

77
00:03:23,860 --> 00:03:25,620
一定的二一性

78
00:03:25,620 --> 00:03:30,640
这里啊，提到的单重多继承和多重继承啊

79
00:03:30,640 --> 00:03:35,000
所对应的一般我们的 java 代码是支持单重

80
00:03:35,000 --> 00:03:36,790
不支持多重继承的

81
00:03:36,790 --> 00:03:40,750
而 C 加加的话是可以支持呢多重继承的

82
00:03:40,750 --> 00:03:43,150
了解了这样的一个特点就行了

83
00:03:43,150 --> 00:03:46,220
那这是继承与泛化

84
00:03:46,220 --> 00:03:48,260
下面呢，我们再来看

85
00:03:48,260 --> 00:03:50,920
在继承和泛化的过程当中

86
00:03:50,920 --> 00:03:53,140
有一个特殊的操作

87
00:03:53,140 --> 00:03:55,620
那我们在动物啊

88
00:03:55,620 --> 00:03:56,860
我们会发

89
00:03:56,860 --> 00:04:02,250
在动物到猫狗这个继承的过程当中

90
00:04:02,250 --> 00:04:06,230
猫和狗继承了父类动物的一些东西吧

91
00:04:06,230 --> 00:04:08,530
那在这个继承的过程当中

92
00:04:08,530 --> 00:04:11,170
还有一个特殊的，哎，过程

93
00:04:11,170 --> 00:04:12,790
那我们发现啊

94
00:04:12,790 --> 00:04:14,490
动物它有毛色

95
00:04:14,490 --> 00:04:16,010
并且也会叫

96
00:04:16,010 --> 00:04:18,339
但是具体的这个动物啊

97
00:04:18,339 --> 00:04:19,740
它到底怎么叫啊

98
00:04:19,740 --> 00:04:21,690
不知道它是什么样的动物

99
00:04:21,690 --> 00:04:23,570
其实我们不知道它怎么叫吧

100
00:04:23,570 --> 00:04:25,890
所以在这里我们写的是空

101
00:04:25,890 --> 00:04:28,950
因为不确定它叫声到底是什么

102
00:04:28,950 --> 00:04:33,150
而猫和狗的叫声呢，是明确的诶

103
00:04:33,150 --> 00:04:34,910
妙或者旺吧

104
00:04:34,910 --> 00:04:37,830
那如果我们以代码的形式来写

105
00:04:37,830 --> 00:04:38,850
会发现呢

106
00:04:38,850 --> 00:04:41,770
如果叫这个动作叫做 call 的话

107
00:04:41,770 --> 00:04:45,980
动物它的扣呢，唉，只有名称叫

108
00:04:45,980 --> 00:04:49,540
以及呢参数列表用括号来表示

109
00:04:49,540 --> 00:04:52,340
有没有具体的实现呢

110
00:04:52,340 --> 00:04:53,090
没有

111
00:04:53,090 --> 00:04:56,070
我们一般啊，在写函数的时候

112
00:04:56,070 --> 00:05:00,390
它的基本框架是函数名称

113
00:05:00,390 --> 00:05:05,280
然后呢，以括号的形式列出它所需要的数据

114
00:05:05,280 --> 00:05:06,820
叫做参数

115
00:05:06,820 --> 00:05:08,330
可以呢，有一个

116
00:05:08,330 --> 00:05:09,470
也可以没有

117
00:05:09,470 --> 00:05:11,840
也可以有多个参数列表

118
00:05:11,840 --> 00:05:14,380
然后以大括号的形式

119
00:05:14,380 --> 00:05:18,400
在这里呢，列举出它的具体内容

120
00:05:18,400 --> 00:05:21,880
这个括括号所列举的具体内容

121
00:05:21,880 --> 00:05:25,120
我们叫做方法的实现

122
00:05:25,930 --> 00:05:29,190
或者呢，叫做函数的实现

123
00:05:29,190 --> 00:05:31,260
那在动物当中

124
00:05:31,260 --> 00:05:33,700
它这个方法其实是不知道

125
00:05:33,700 --> 00:05:35,490
具体实现是什么的吧

126
00:05:35,490 --> 00:05:38,800
所以动物类当中包含的

127
00:05:38,800 --> 00:05:41,040
没有具体实现的方法

128
00:05:41,040 --> 00:05:44,490
我们也可以呢，叫做抽象方法

129
00:05:44,490 --> 00:05:46,900
唉，如何表示抽象方法

130
00:05:46,900 --> 00:05:48,560
我们在代码当中呢

131
00:05:48,560 --> 00:05:51,150
也会给大家来进行说明的

132
00:05:51,150 --> 00:05:52,190
一般来说啊

133
00:05:52,190 --> 00:05:54,570
对于抽象类或者抽象接口

134
00:05:54,570 --> 00:05:56,950
经常会看到这类方法

135
00:05:56,950 --> 00:06:01,370
那猫它所继承到的这个方法的话

136
00:06:01,370 --> 00:06:03,290
相同的函数名

137
00:06:03,290 --> 00:06:06,690
相同的参数列表内容呢

138
00:06:06,690 --> 00:06:09,120
唉，它会输出一个妙

139
00:06:09,120 --> 00:06:12,460
而狗呢，继承相同的名称

140
00:06:12,460 --> 00:06:13,840
相同的列表

141
00:06:13,840 --> 00:06:15,870
然后呢，输出 want 

142
00:06:15,870 --> 00:06:20,960
那从没有实现到不同的实现

143
00:06:21,230 --> 00:06:25,190
它是不是继承了父类的方法

144
00:06:25,190 --> 00:06:29,920
并且对父类方法的实现进行了一个修改啊

145
00:06:29,920 --> 00:06:31,820
那这种过程当中

146
00:06:31,820 --> 00:06:35,070
继承的原有的内容没了

147
00:06:35,070 --> 00:06:36,350
为什么没了呢

148
00:06:36,350 --> 00:06:37,410
被覆盖了

149
00:06:37,410 --> 00:06:40,380
或者说这个方法被重置了

150
00:06:40,380 --> 00:06:43,130
这就是呢，覆盖或者呢

151
00:06:43,130 --> 00:06:45,870
叫做重置的概念

152
00:06:45,870 --> 00:06:51,830
那这个概念呢，它指的是特指父子类当中

153
00:06:52,540 --> 00:06:55,260
子类继承父类的时候

154
00:06:55,260 --> 00:06:57,700
所做的同名的这个方法

155
00:06:57,700 --> 00:06:59,750
先继承再修改

156
00:06:59,750 --> 00:07:02,630
与它相类似的一种说

157
00:07:02,630 --> 00:07:04,030
完全不一样啊

158
00:07:04,030 --> 00:07:07,230
与它类似的还有一种概念呢

159
00:07:07,230 --> 00:07:09,190
叫做重载

160
00:07:10,630 --> 00:07:17,070
重载它指的是一个类，当中存在多个

161
00:07:18,110 --> 00:07:23,500
然后呢，同名但内容不一样的这种方法

162
00:07:23,500 --> 00:07:25,750
常见的就是对一些呢

163
00:07:25,750 --> 00:07:26,210
哎

164
00:07:26,210 --> 00:07:27,150
加减符啊

165
00:07:27,150 --> 00:07:30,610
运算符这样的一些加减方法的一些覆盖

166
00:07:30,610 --> 00:07:31,290
举多

167
00:07:31,290 --> 00:07:33,430
那这是呢，重载的概念

168
00:07:33,430 --> 00:07:37,950
知道呢是同一个类当中存在的就可以了

169
00:07:37,950 --> 00:07:39,530
那这是呢

170
00:07:39,530 --> 00:07:44,060
关于继承与泛化相关的一组概念

171
00:07:44,060 --> 00:07:47,020
下面呢，我们来看一下这组概念

172
00:07:47,020 --> 00:07:51,480
在我们软件设计师考试真题当中的体现

173
00:07:51,480 --> 00:07:52,860
下面这道题

174
00:07:52,860 --> 00:07:55,790
在面向对象的方法当中呢

175
00:07:55,790 --> 00:07:58,970
以下哪一个是父

176
00:07:58,970 --> 00:08:01,140
以及呢，子类之

177
00:08:01,140 --> 00:08:04,610
共享数据和方法的机制

178
00:08:04,610 --> 00:08:06,860
那说到父子类

179
00:08:06,860 --> 00:08:08,200
下面哪一个

180
00:08:08,200 --> 00:08:10,570
哪一些与父子类相关呢

181
00:08:10,570 --> 00:08:14,040
我们说子类与父类之间

182
00:08:14,040 --> 00:08:16,610
子类继承了父类吧

183
00:08:16,610 --> 00:08:20,430
那继承的过程当中

184
00:08:20,430 --> 00:08:22,610
父类的属性和方法

185
00:08:22,610 --> 00:08:25,530
子类呢，是可以直接去用的

186
00:08:25,530 --> 00:08:27,280
这种直接去

187
00:08:27,280 --> 00:08:28,560
其实就是一种呢

188
00:08:28,560 --> 00:08:31,160
典型的复用机制

189
00:08:31,160 --> 00:08:34,840
诶，子类可以复用父类的一些啊，数据

190
00:08:34,840 --> 00:08:36,080
还有呢行为

191
00:08:36,080 --> 00:08:40,190
那这个复用其实就是共享的含义

192
00:08:40,190 --> 00:08:41,429
所以第一空啊

193
00:08:41,429 --> 00:08:43,409
它所考察的就是呢

194
00:08:43,409 --> 00:08:46,750
继承与继承相关的

195
00:08:46,750 --> 00:08:48,550
还有一个呢，覆盖

196
00:08:48,550 --> 00:08:50,540
那什么是覆盖呢

197
00:08:50,540 --> 00:08:54,790
子类在父类啊原有的接口上面呢

198
00:08:54,790 --> 00:08:57,880
用适用于自己要求的实现

199
00:08:57,880 --> 00:09:02,410
诶，适用适合于自己的实践去置换呢

200
00:09:02,410 --> 00:09:04,540
父父类当中的实现

201
00:09:04,540 --> 00:09:08,570
那这个置换的过程它就是呢覆盖

202
00:09:08,570 --> 00:09:10,290
那子类继承之后

203
00:09:10,290 --> 00:09:11,650
父类的方法不合适

204
00:09:11,650 --> 00:09:13,090
自己做了修改吧

205
00:09:13,090 --> 00:09:15,730
将父类原有的方法覆盖掉了

206
00:09:15,730 --> 00:09:17,530
或者说重置了一下

207
00:09:17,530 --> 00:09:19,380
这就是呢覆盖

208
00:09:19,380 --> 00:09:21,350
那其他选项当中

209
00:09:21,350 --> 00:09:26,250
封装它是属于哪一种信息隐蔽技术

210
00:09:26,250 --> 00:09:28,640
我们的对象会将呢

211
00:09:28,640 --> 00:09:31,890
属性和行为进行封装

212
00:09:31,890 --> 00:09:35,130
多肽是另一组概念了

213
00:09:35,130 --> 00:09:36,230
多肽呀

214
00:09:36,230 --> 00:09:39,850
它是我们继承或者说覆盖之后

215
00:09:39,850 --> 00:09:41,880
形成的一种结果

216
00:09:41,880 --> 00:09:47,800
比如说刚刚我们的猫接收到 call 这个方法的话

217
00:09:48,140 --> 00:09:50,620
它所产生的结果

218
00:09:50,620 --> 00:09:52,760
哎，是一个叫

219
00:09:52,760 --> 00:09:54,980
应该呢是喵

220
00:09:55,130 --> 00:09:56,670
而狗

221
00:09:56,670 --> 00:10:00,210
它接收到 call 这个方法的时候

222
00:10:00,210 --> 00:10:02,730
它的结果呢变成了 want 

223
00:10:02,730 --> 00:10:07,260
不同的对象接收到相同的消息

224
00:10:07,260 --> 00:10:09,510
产生不同的结果

225
00:10:09,510 --> 00:10:10,890
就叫做多肽

226
00:10:10,890 --> 00:10:14,410
我们在后面呢，还会给大家介绍到

227
00:10:14,410 --> 00:10:17,500
那这里考察大家的就是呢

228
00:10:17,500 --> 00:10:21,880
继承与覆盖它的相关概念考察啊

229
00:10:21,880 --> 00:10:25,820
以上呢，就是我们给大家讲到的

230
00:10:25,820 --> 00:10:29,240
继承与泛化相关的一组概念
