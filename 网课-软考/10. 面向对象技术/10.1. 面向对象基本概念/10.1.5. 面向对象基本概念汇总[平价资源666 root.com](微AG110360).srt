1
00:00:00,000 --> 00:00:01,880
我们前面的视频当中呢

2
00:00:01,880 --> 00:00:03,500
给大家介绍到了很多

3
00:00:03,500 --> 00:00:05,770
面向对象当中的基本概念

4
00:00:05,770 --> 00:00:08,100
因为涉及到的概念内容比较多

5
00:00:08,100 --> 00:00:09,180
所以我们后面呢

6
00:00:09,180 --> 00:00:11,520
再给大家进行一轮汇总

7
00:00:11,520 --> 00:00:14,090
将基本概念啊，汇总之后呢

8
00:00:14,090 --> 00:00:16,620
再来给大家呢，做一些梳理

9
00:00:16,620 --> 00:00:19,760
首先，面向对象基本概念过程当中啊

10
00:00:19,760 --> 00:00:22,040
我们是以猫狗的例子呢

11
00:00:22,040 --> 00:00:24,610
从现实世界来进行的抽象

12
00:00:24,610 --> 00:00:28,690
那现实世界可以呢，抽象出对象

13
00:00:28,690 --> 00:00:31,600
对象封装的一些属性和行为

14
00:00:31,600 --> 00:00:34,360
还有呢，自己的对象 id 

15
00:00:34,360 --> 00:00:37,790
那对象可以进一步抽象

16
00:00:37,790 --> 00:00:39,530
抽象出类

17
00:00:39,530 --> 00:00:43,950
并且类可以反向的实例化出我们对象

18
00:00:43,950 --> 00:00:45,220
类似于呢

19
00:00:45,220 --> 00:00:47,480
哎，我们抽象出了一个模板

20
00:00:47,480 --> 00:00:48,880
利用这个模板呢

21
00:00:48,880 --> 00:00:51,680
来进行快速的生成对象的过程

22
00:00:51,680 --> 00:00:52,260
嗯

23
00:00:52,260 --> 00:00:55,580
类还可以进一步抽象

24
00:00:55,580 --> 00:00:58,690
它可以泛化成父类

25
00:00:58,690 --> 00:01:04,060
父类与子类之间有继承与泛化的关系

26
00:01:04,060 --> 00:01:05,220
那这是我们呢

27
00:01:05,220 --> 00:01:09,120
一个从现实世界抽象分析的思路

28
00:01:09,120 --> 00:01:11,090
它的实现过程啊

29
00:01:11,090 --> 00:01:14,910
是从上往下先实现父类

30
00:01:14,910 --> 00:01:18,160
再由继承关键字来生成子类

31
00:01:18,160 --> 00:01:19,490
再由子类呢

32
00:01:19,490 --> 00:01:22,020
实例化出对象的过程

33
00:01:22,020 --> 00:01:27,540
那这是对象类以及父类之间的关系

34
00:01:28,040 --> 00:01:31,920
类是对现实世界抽象之后的对象啊

35
00:01:31,920 --> 00:01:34,360
是对对象的抽象

36
00:01:34,360 --> 00:01:36,760
并且类还可以呢

37
00:01:36,760 --> 00:01:38,760
有进一步的分类

38
00:01:38,760 --> 00:01:41,800
它可以有实体类

39
00:01:41,800 --> 00:01:45,350
哎，我们常说的人还有物

40
00:01:45,350 --> 00:01:47,410
就是呢，属于实体类

41
00:01:47,410 --> 00:01:50,340
还有呢，属于边界类

42
00:01:50,340 --> 00:01:52,450
所谓的边界

43
00:01:52,450 --> 00:01:54,960
它是呢人与系统的边界

44
00:01:54,960 --> 00:01:57,140
或者系统与系统的边界

45
00:01:57,140 --> 00:01:59,770
也叫做呢接口类

46
00:01:59,770 --> 00:02:01,270
这一类啊

47
00:02:01,270 --> 00:02:04,750
它主要呢，是提供交互的，哎

48
00:02:04,750 --> 00:02:05,890
人机交互的话

49
00:02:05,890 --> 00:02:08,610
我们操作电脑会用到一些窗口

50
00:02:08,610 --> 00:02:10,430
会用到一些图标

51
00:02:10,430 --> 00:02:11,810
用到一些列表

52
00:02:11,810 --> 00:02:14,830
用到一些表单或者呢一些按钮

53
00:02:14,830 --> 00:02:18,970
这些呢，都可以把它呢，定义为边界类

54
00:02:18,970 --> 00:02:21,930
那具体实现过程当中啊

55
00:02:21,930 --> 00:02:23,830
所有的内容都会呢

56
00:02:23,830 --> 00:02:26,200
变成类来进行定义

57
00:02:26,200 --> 00:02:29,950
我们会发现，比如说一个简单的应用场景

58
00:02:29,950 --> 00:02:33,450
我们在登录某一个系统的时候

59
00:02:33,450 --> 00:02:37,620
用户会登录输入用户名和密码吧

60
00:02:37,620 --> 00:02:40,300
用户就是典型的实体类

61
00:02:40,300 --> 00:02:44,500
我们输入框就是典型的边界类

62
00:02:44,500 --> 00:02:47,530
最终还有一个验证的过程

63
00:02:47,530 --> 00:02:52,590
这种验证过程我们一般会把它写成一个呢

64
00:02:52,590 --> 00:02:54,150
控制类

65
00:02:56,700 --> 00:03:01,280
叫做呢，类似于省份验证器这样的东西

66
00:03:01,280 --> 00:03:04,430
那控制类大家只需要了解到呢

67
00:03:04,430 --> 00:03:09,100
它可以协调实体类与边界类就可以了

68
00:03:09,100 --> 00:03:11,490
这是呢，类的分类

69
00:03:11,490 --> 00:03:13,630
那我们对于类来说

70
00:03:13,630 --> 00:03:16,070
子类继承父类之后啊

71
00:03:16,070 --> 00:03:19,120
可以继承父类一些共性的东西

72
00:03:19,120 --> 00:03:22,660
也可以呢，增加一些自己独有的东西吧

73
00:03:22,660 --> 00:03:24,760
并不是完全的一模一样

74
00:03:24,760 --> 00:03:27,270
并且在继承父类的时候

75
00:03:27,270 --> 00:03:31,170
可以对父类啊，一些方法的具体实现内容呢

76
00:03:31,170 --> 00:03:34,260
哎，做一些适合自己的修改

77
00:03:34,260 --> 00:03:36,020
这种修改之后呢

78
00:03:36,020 --> 00:03:39,960
我们说子类对父类的方法进行了重置

79
00:03:39,960 --> 00:03:41,950
或者呢，叫做覆盖

80
00:03:41,950 --> 00:03:46,210
与它相类似的一种说法呢，叫做重载

81
00:03:46,210 --> 00:03:48,130
不要呢弄混淆了

82
00:03:48,130 --> 00:03:51,730
重载它是特指一个类当中

83
00:03:51,730 --> 00:03:55,940
而重，重制是我们子类继承父类过程

84
00:03:55,940 --> 00:03:58,050
过程当中的重制

85
00:03:58,050 --> 00:04:00,110
在这个过程当中呢

86
00:04:00,110 --> 00:04:04,070
唉，我们有了一些覆盖或者说重置之后啊

87
00:04:04,070 --> 00:04:06,260
我们不同的子类对象

88
00:04:06,260 --> 00:04:09,380
在接收到某一个通用消息的时候

89
00:04:09,380 --> 00:04:12,240
产生的结果可能呢会不一样

90
00:04:12,240 --> 00:04:14,680
那这种就叫做呢，多肽

91
00:04:14,680 --> 00:04:17,480
多肽还有细节上的分类

92
00:04:17,480 --> 00:04:22,260
我们目前呢，只会涉及到过载多肽

93
00:04:24,060 --> 00:04:26,520
所谓过载多态

94
00:04:26,520 --> 00:04:27,940
它的定义呀

95
00:04:27,940 --> 00:04:35,050
就是呢，同一个名字在不同的上下文当

96
00:04:35,050 --> 00:04:36,890
会产生呢

97
00:04:36,890 --> 00:04:39,170
不同的含义，诶

98
00:04:39,170 --> 00:04:40,870
含义有所不同

99
00:04:40,870 --> 00:04:41,950
这就是呢

100
00:04:41,950 --> 00:04:43,870
过载多态的定义

101
00:04:43,870 --> 00:04:45,770
大家呢，注意一下

102
00:04:45,770 --> 00:04:51,400
那具体到底什么时候接收到的对象是猫

103
00:04:51,400 --> 00:04:53,150
什么时候是狗呢

104
00:04:53,150 --> 00:04:57,130
唉，我们在编译时决定的话就叫做静态绑定

105
00:04:57,130 --> 00:05:01,360
运行时决定的话就叫做呢动态绑定

106
00:05:01,360 --> 00:05:03,410
对象与对象之间呢

107
00:05:03,410 --> 00:05:06,770
会通过消息来传递信息，诶

108
00:05:06,770 --> 00:05:08,190
来进行交互

109
00:05:08,190 --> 00:05:10,080
并且啊，消息一般呢

110
00:05:10,080 --> 00:05:12,480
是接收之后会给一定反馈

111
00:05:12,480 --> 00:05:15,820
我们认为呢，消息一般是异步的

112
00:05:15,820 --> 00:05:20,260
目前消息在软社当中的考察呢，并不多

113
00:05:20,260 --> 00:05:22,100
大家呢，了解一下

114
00:05:22,100 --> 00:05:25,990
那这些概念它的具体文字描述，诶

115
00:05:25,990 --> 00:05:27,010
如何来看呢

116
00:05:27,010 --> 00:05:30,070
我们在后面给大家进行了一轮汇总

117
00:05:30,070 --> 00:05:31,800
关于对象

118
00:05:31,800 --> 00:05:36,860
它的一些概念、封装类以及接口继承重置

119
00:05:36,860 --> 00:05:37,900
或者叫做覆

120
00:05:37,900 --> 00:05:41,640
重载多态、过载多态、动态绑

121
00:05:41,640 --> 00:05:43,840
以及消息和消息通信

122
00:05:43,840 --> 00:05:45,780
那这一页 PPT 呢

123
00:05:45,780 --> 00:05:49,210
我们就不再呢，针对性的去进行啊

124
00:05:49,210 --> 00:05:51,550
读 PPT 给大家呢，去赘述了

125
00:05:51,550 --> 00:05:52,810
大家可以自己啊

126
00:05:52,810 --> 00:05:54,960
再去呢详细的看一看

127
00:05:54,960 --> 00:05:57,840
那这一些内容的考

128
00:05:57,840 --> 00:06:02,290
就是呢，将概念与相应的描述进行匹配

129
00:06:02,290 --> 00:06:06,660
以及呢，一些特殊概念进行一些呢识别

130
00:06:06,660 --> 00:06:09,450
了解了它的特点即可

131
00:06:09,450 --> 00:06:11,570
下面呢，我们再来看一下

132
00:06:11,570 --> 00:06:14,880
一些综合性的概念的考察内容

133
00:06:14,880 --> 00:06:18,460
这一部分呢，在我们软件设计师真题当中啊

134
00:06:18,460 --> 00:06:20,720
大家可以看一看它的具体体现

135
00:06:20,720 --> 00:06:22,220
下面这道题

136
00:06:22,220 --> 00:06:25,160
在某销售系统当中啊

137
00:06:25,160 --> 00:06:30,110
客户采用了扫描二维码来进行支付

138
00:06:30,110 --> 00:06:33,380
若采用面向对象开发的话

139
00:06:33,380 --> 00:06:36,060
客户类属于什么类

140
00:06:36,060 --> 00:06:38,710
二维码属于什么类

141
00:06:38,710 --> 00:06:42,870
那这里提到的接口实体控制

142
00:06:42,870 --> 00:06:45,610
其实就是我们的实体类

143
00:06:45,610 --> 00:06:48,790
边界类以及呢控制类

144
00:06:51,450 --> 00:06:56,750
动态是我们对象当中属性的另一种呢，说法

145
00:06:56,750 --> 00:07:00,260
一组属性啊，就可以体现对象的状态了

146
00:07:00,260 --> 00:07:02,870
那在这里，客户属于什么类呢

147
00:07:02,870 --> 00:07:05,620
它是典型的实体类

148
00:07:05,620 --> 00:07:09,620
实体类对象可以表示现实世界当中的实体

149
00:07:09,620 --> 00:07:10,480
比如说呢

150
00:07:10,480 --> 00:07:11,900
人和物，唉

151
00:07:11,900 --> 00:07:13,020
或者呢，你的电脑

152
00:07:13,020 --> 00:07:15,320
你的手机都可以作为实体类

153
00:07:15,320 --> 00:07:18,400
那二维码属于什么类呢

154
00:07:18,400 --> 00:07:21,000
二维码其实它很特殊

155
00:07:21,250 --> 00:07:23,150
二维码技术啊

156
00:07:23,150 --> 00:07:26,510
它是物联网技术当中的一种呢，应用

157
00:07:26,510 --> 00:07:29,560
那它应用的是什么样的一个过程呢

158
00:07:29,560 --> 00:07:32,040
我们比如说买一个商品

159
00:07:32,040 --> 00:07:36,000
大家买一本书会发现书后面有条码吧

160
00:07:36,000 --> 00:07:37,400
大家呢，寄快递

161
00:07:37,400 --> 00:07:39,400
快递单上面有二维码吧

162
00:07:39,400 --> 00:07:42,730
这种码是用来做什么的呢

163
00:07:42,730 --> 00:07:45,170
我们在扫描的过程当中

164
00:07:45,170 --> 00:07:48,600
可以识别二维码记录的信息

165
00:07:48,600 --> 00:07:53,150
将相应的物品与我们的系统联系起来

166
00:07:53,150 --> 00:07:56,740
那我们的物体现实世界诶

167
00:07:56,740 --> 00:07:59,220
物体与系统的交互

168
00:07:59,220 --> 00:08:01,800
它是典型的边界类

169
00:08:01,800 --> 00:08:04,430
或者叫做呢接口类

170
00:08:04,430 --> 00:08:07,240
它类似于我们说人机交互的话

171
00:08:07,240 --> 00:08:09,360
是人去使用系统

172
00:08:09,360 --> 00:08:12,100
而对于这种物流方面

173
00:08:12,100 --> 00:08:13,520
物联网方面的话

174
00:08:13,520 --> 00:08:17,220
是物体与我们的网络来进行

175
00:08:17,220 --> 00:08:19,470
与信息系统来进行交互的

176
00:08:19,470 --> 00:08:21,840
那这是典型的边界类

177
00:08:21,840 --> 00:08:23,860
或者呢叫做接口类

178
00:08:23,860 --> 00:08:27,330
它主要呢分为人与系统

179
00:08:27,330 --> 00:08:30,530
以及呢，系统与系统之间的交互

180
00:08:30,530 --> 00:08:33,789
那其中典型的就是我们提到的像啊

181
00:08:33,789 --> 00:08:36,850
比如说呢操作系统、操作电脑的时候

182
00:08:36,850 --> 00:08:39,230
诶，大家用到的显示器、窗口

183
00:08:39,230 --> 00:08:43,320
还有呢一些诶，对话框、列表、菜单等等

184
00:08:43,320 --> 00:08:46,900
还有呢就是相应的一些二维码

185
00:08:46,900 --> 00:08:47,720
条形码

186
00:08:47,720 --> 00:08:50,630
也是属于呢典型的边界类

187
00:08:50,630 --> 00:08:52,640
控制类呢，了解套

188
00:08:52,640 --> 00:08:58,020
它主要啊是协调边界类与实体类的就可以了

189
00:08:58,020 --> 00:09:01,280
那这是对类的分类的考察

190
00:09:01,950 --> 00:09:04,130
再来看下面这道题

191
00:09:04,130 --> 00:09:06,890
在面向对象方法当中

192
00:09:06,890 --> 00:09:08,830
继承用于什么

193
00:09:08,830 --> 00:09:12,100
继承？我们在前面提到继承啊

194
00:09:12,100 --> 00:09:14,900
子类会继承父类的一些东西

195
00:09:14,900 --> 00:09:16,910
并且可以有自己的一些东西

196
00:09:16,910 --> 00:09:18,690
那继承的过程当中

197
00:09:18,690 --> 00:09:21,870
它会涉及到复用的机制

198
00:09:23,340 --> 00:09:24,800
也就是说

199
00:09:24,800 --> 00:09:28,100
子类在继承父类的时候是可以啊

200
00:09:28,100 --> 00:09:30,960
直接呢，使用子类、父类当中呢

201
00:09:30,960 --> 00:09:32,360
给出的一些内容

202
00:09:32,360 --> 00:09:34,030
那我们只需要呢

203
00:09:34,030 --> 00:09:38,230
用相应的关键字去进行继承

204
00:09:38,230 --> 00:09:39,770
继承之后

205
00:09:39,770 --> 00:09:43,410
哎，我们就有了一个新的类出现

206
00:09:43,410 --> 00:09:44,940
那这种方式呢

207
00:09:44,940 --> 00:09:50,170
是在已有的父类基础上来创建新的类

208
00:09:50,170 --> 00:09:52,070
所以继承啊，可以呢

209
00:09:52,070 --> 00:09:58,190
唉，用于在已存在的类的基础上来创建新类

210
00:09:58,190 --> 00:10:00,560
如果不确定的话啊

211
00:10:00,560 --> 00:10:03,460
我们可以对比四个选项来看

212
00:10:03,460 --> 00:10:07,540
在本题的四个选项当中继

213
00:10:07,540 --> 00:10:11,420
可以在已存在的类当中添加新方法

214
00:10:11,420 --> 00:10:12,950
这个说法是正确的

215
00:10:12,950 --> 00:10:17,800
可以呢，唉，在已存在的类当中添加新属性

216
00:10:17,800 --> 00:10:19,410
唉，也是正确的吧

217
00:10:19,410 --> 00:10:21,220
那多个选项是正确的

218
00:10:21,220 --> 00:10:23,580
说明我们不会选到这两个

219
00:10:23,580 --> 00:10:25,340
诶，对等的选项吧

220
00:10:25,340 --> 00:10:26,340
那我们呢

221
00:10:26,340 --> 00:10:27,830
其实是一个更开

222
00:10:27,830 --> 00:10:30,560
更概括性的一个选项内容

223
00:10:30,560 --> 00:10:31,620
也就是呢

224
00:10:31,620 --> 00:10:33,620
创建了一个新的类

225
00:10:33,620 --> 00:10:35,260
这里呢，注意一下

226
00:10:35,260 --> 00:10:38,430
那状态本身的话是对象的一组属性

227
00:10:38,430 --> 00:10:42,110
我们在类当中并没有提到状态的概念

228
00:10:42,110 --> 00:10:44,570
接下来看到下面这道题

229
00:10:44,570 --> 00:10:46,790
哪一种多肽诶

230
00:10:46,790 --> 00:10:50,620
是指呢，操作方法具有相同的名称

231
00:10:50,620 --> 00:10:56,350
然后在不同的上下文当中代表的含义不同

232
00:10:56,350 --> 00:11:00,850
那这里描述的是多肽的某一种分类

233
00:11:00,850 --> 00:11:02,750
就是呢，过载多态

234
00:11:02,750 --> 00:11:04,670
如果你不确定，记住呢

235
00:11:04,670 --> 00:11:07,970
我们目前只考到过过载多肽

236
00:11:07,970 --> 00:11:11,070
其他多肽大概是什么样的含义呢

237
00:11:11,070 --> 00:11:12,830
大家可以自己看一看

238
00:11:12,830 --> 00:11:16,670
参数多态呢，指的是我们在多肽过程当中啊

239
00:11:16,670 --> 00:11:18,730
它主要体现在参数类型

240
00:11:18,730 --> 00:11:20,480
或者参数列表不一样

241
00:11:20,480 --> 00:11:24,060
那这里的相对来说应用是比较广泛的

242
00:11:24,060 --> 00:11:27,870
包含多肽呢，主要是涉及到子类型化，诶

243
00:11:27,870 --> 00:11:30,150
它呢，是作用于一个类型

244
00:11:30,150 --> 00:11:33,050
可以呢，包含相应的一些子类型

245
00:11:33,050 --> 00:11:34,480
强制多

246
00:11:34,480 --> 00:11:39,180
可以理解为呢，对一些类型来进行强制转换

247
00:11:39,180 --> 00:11:43,230
过载多态呢，就是我们前面提到的同一个名字

248
00:11:43,230 --> 00:11:44,750
在不同的上下文

249
00:11:44,750 --> 00:11:47,070
它的含义不一样

250
00:11:47,070 --> 00:11:50,160
那这些呢，就是需要大家掌握到的

251
00:11:50,160 --> 00:11:52,700
与面向对象相关的一些呢

252
00:11:52,700 --> 00:11:55,040
基本概念的考察内容

253
00:11:55,040 --> 00:11:56,260
这一部分啊

254
00:11:56,260 --> 00:11:59,120
是我们整个染色考试当中

255
00:11:59,120 --> 00:12:01,380
比较难得的得分点

256
00:12:01,380 --> 00:12:04,220
大家呢，自己啊，要去呢，注意巩固
