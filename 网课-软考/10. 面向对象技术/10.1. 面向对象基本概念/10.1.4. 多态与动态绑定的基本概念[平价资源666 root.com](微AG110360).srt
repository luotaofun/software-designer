1
00:00:00,000 --> 00:00:03,840
接下来我们看到面向对象基本概念当中

2
00:00:03,840 --> 00:00:07,300
多态与动态绑定相关的概念

3
00:00:07,300 --> 00:00:09,280
那这一组概念的话

4
00:00:09,280 --> 00:00:14,050
在我们的软件设计师考试当中考察较多

5
00:00:14,050 --> 00:00:17,950
大家呢，要注意它的概念定义

6
00:00:17,950 --> 00:00:20,510
多态与动态绑定

7
00:00:20,510 --> 00:00:24,150
它其实呢，是我们继承与泛化之

8
00:00:24,150 --> 00:00:26,710
产生的一些呢结果

9
00:00:26,710 --> 00:00:29,140
那什么是多肽呢

10
00:00:29,140 --> 00:00:32,580
比如说我们在前面讲覆盖的时候

11
00:00:32,580 --> 00:00:35,340
猫和狗啊，继承了动物

12
00:00:35,340 --> 00:00:37,140
它靠的这个方法

13
00:00:37,140 --> 00:00:40,050
但具体的实现发生变化了吧

14
00:00:40,050 --> 00:00:41,530
那也就是说

15
00:00:41,530 --> 00:00:47,130
如果现在一只猫接收到 call 这个消息的话

16
00:00:47,130 --> 00:00:52,910
我们说对象与对象之间是通过消息来通信的

17
00:00:52,910 --> 00:00:55,190
并且这个消息的实质啊

18
00:00:55,190 --> 00:00:58,320
其实就是呢，与方法调用相关的

19
00:00:58,320 --> 00:00:59,550
那我们想一想

20
00:00:59,550 --> 00:01:02,770
猫接收到 call 的消息会产生什么结果啊

21
00:01:02,770 --> 00:01:04,459
唉，会喵喵叫吧

22
00:01:04,459 --> 00:01:07,000
如果是一只狗呢

23
00:01:07,000 --> 00:01:10,950
唉，这只小黄他收到 call 的消息的话

24
00:01:10,950 --> 00:01:12,670
会产生什么结果呢

25
00:01:12,670 --> 00:01:14,200
唉，会 war 

26
00:01:14,200 --> 00:01:21,250
那我们不同的猫狗对象接收到相同的消息

27
00:01:21,250 --> 00:01:24,840
call 产生的结果相同吗

28
00:01:24,840 --> 00:01:25,990
不一样

29
00:01:25,990 --> 00:01:31,120
多种不同的结果形成了我们的多肽

30
00:01:31,120 --> 00:01:34,460
这就是呢多肽的概念

31
00:01:34,460 --> 00:01:39,250
那到底猫响应的还是狗响应的

32
00:01:39,250 --> 00:01:41,750
如果知道是谁响应

33
00:01:41,750 --> 00:01:44,150
我们就知道最终的结果了吧

34
00:01:44,150 --> 00:01:47,650
但我们在进行代码编写的时候

35
00:01:47,650 --> 00:01:52,410
是可以直接把消息发给父类的

36
00:01:52,410 --> 00:01:57,190
那比如说我们现在直接对一个动物类的对象

37
00:01:57,190 --> 00:01:59,280
发出 call 的消息

38
00:01:59,280 --> 00:02:04,030
那到底这个动物类的对象是猫还是狗

39
00:02:04,030 --> 00:02:05,780
来进行响应的

40
00:02:05,780 --> 00:02:09,139
我们啊，会有一个确定的过程

41
00:02:09,139 --> 00:02:11,120
这个确定的过程呢

42
00:02:11,120 --> 00:02:17,200
一般会在我们的运行过程当中来决定

43
00:02:17,320 --> 00:02:23,180
运行时来决定到底是喵喵叫还是汪汪叫

44
00:02:23,180 --> 00:02:25,290
这个运行我们呢

45
00:02:25,290 --> 00:02:27,310
认为它是一个动态的过程

46
00:02:27,310 --> 00:02:31,190
所以它是呢，称之为动态绑定

47
00:02:31,190 --> 00:02:33,600
又与它类似的一个概念

48
00:02:33,600 --> 00:02:36,280
还有一个呢，静态绑定

49
00:02:37,190 --> 00:02:39,810
所谓的静态绑定啊

50
00:02:39,810 --> 00:02:43,150
它所对应的是编译时决定

51
00:02:43,150 --> 00:02:45,850
那我们在开发的过程当中

52
00:02:45,850 --> 00:02:47,790
大家也许没做过开发啊

53
00:02:47,790 --> 00:02:49,130
那开发的时候呢

54
00:02:49,130 --> 00:02:52,370
一般会在一个编译器里面写一大段的代码

55
00:02:52,370 --> 00:02:54,170
然后呢，编译

56
00:02:54,170 --> 00:02:55,480
编译通过之

57
00:02:55,480 --> 00:02:56,680
再生成一些呢

58
00:02:56,680 --> 00:03:00,200
中间代码或者可执行程序来进行执行

59
00:03:00,200 --> 00:03:01,910
或者说呢，运行

60
00:03:01,910 --> 00:03:04,420
那我们在编译的过程当中

61
00:03:04,420 --> 00:03:07,160
编译器内部就能够呢

62
00:03:07,160 --> 00:03:10,150
编译确定的就叫静态绑定

63
00:03:10,150 --> 00:03:14,700
那我们生成的程序去执行的过程当中

64
00:03:14,700 --> 00:03:16,880
才确定的就叫做呢

65
00:03:16,880 --> 00:03:19,660
运行时的动态绑定

66
00:03:19,660 --> 00:03:24,270
区分呢，这一组相对的概念就可以了

67
00:03:24,270 --> 00:03:28,760
下面呢，来看一下多态与动态绑定

68
00:03:28,760 --> 00:03:33,060
在软件设计师考试真题当中的考察

69
00:03:33,060 --> 00:03:36,750
在面向对象方法当中啊

70
00:03:36,750 --> 00:03:40,090
不同的对象，注意是不同的对象啊

71
00:03:40,090 --> 00:03:42,630
收到相同的消息

72
00:03:42,630 --> 00:03:46,590
那可以产生完全不同的结果

73
00:03:46,590 --> 00:03:48,750
那这个现象是什么

74
00:03:48,750 --> 00:03:51,420
指的就是多肽

75
00:03:52,260 --> 00:03:57,250
多肽它所对应的就是我们不同的猫和狗

76
00:03:57,250 --> 00:03:59,010
收到相同的 call 

77
00:03:59,010 --> 00:04:02,370
产生不同的喵或者汪的结果

78
00:04:02,370 --> 00:04:04,720
这就是呢对多肽的定义

79
00:04:04,720 --> 00:04:06,480
在使用的时候呢

80
00:04:06,480 --> 00:04:09,300
用户可以呀发送一个通用的消息

81
00:04:09,300 --> 00:04:10,940
实现的细节呢

82
00:04:10,940 --> 00:04:14,750
由接收的对象自行决定

83
00:04:14,750 --> 00:04:18,750
那这个决定又有什么样的区别呢

84
00:04:18,750 --> 00:04:20,079
大家想一想

85
00:04:20,079 --> 00:04:23,780
我们讲到运行时来决定的话

86
00:04:23,780 --> 00:04:25,400
它是什么样的绑定

87
00:04:25,400 --> 00:04:27,610
叫做动态绑定

88
00:04:27,610 --> 00:04:29,800
编译时决定的话

89
00:04:29,800 --> 00:04:31,200
我们就叫做呢

90
00:04:31,200 --> 00:04:33,240
静态绑定

91
00:04:36,360 --> 00:04:39,390
这是关于多肽的考察

92
00:04:39,390 --> 00:04:41,590
其他选项当中

93
00:04:41,590 --> 00:04:45,740
A 选项接口它是一种呢特殊的类

94
00:04:45,740 --> 00:04:49,620
那类它可以呢有实体类、边界类

95
00:04:49,620 --> 00:04:51,390
还有呢控制类

96
00:04:51,390 --> 00:04:54,990
其中边界类也可以叫做接口类

97
00:04:54,990 --> 00:04:56,590
接口类的方法呀

98
00:04:56,590 --> 00:04:58,430
里面都是抽象的方法

99
00:04:58,430 --> 00:05:00,110
就是我们前面提到的

100
00:05:00,110 --> 00:05:03,060
只有方法名和参数列表

101
00:05:03,060 --> 00:05:06,120
没有后括号的具体实现

102
00:05:06,120 --> 00:05:09,040
继承指的是父子类的关系

103
00:05:09,040 --> 00:05:10,580
子类继承父类

104
00:05:10,580 --> 00:05:13,320
父类是子类的泛化覆盖

105
00:05:13,320 --> 00:05:15,450
是继承过程当中

106
00:05:15,450 --> 00:05:18,620
子类对父类方法继承之后呢

107
00:05:18,620 --> 00:05:21,340
它的实现内容啊，进行了，诶

108
00:05:21,340 --> 00:05:23,380
自适应的这种修改调整

109
00:05:23,380 --> 00:05:27,720
就叫做呢，对父类方法进行了覆盖或者呢重置

110
00:05:27,720 --> 00:05:30,450
这是呢，关于多肽的考察

111
00:05:30,450 --> 00:05:32,610
再来看下面这道题

112
00:05:32,610 --> 00:05:34,370
在下列机制当中

113
00:05:34,370 --> 00:05:39,020
以下哪一个是指过程调用和响应调用呢

114
00:05:39,020 --> 00:05:44,190
所需要执行的代码在运行时加以结合

115
00:05:44,190 --> 00:05:48,620
而以下哪一个选项是过程调用和响应调用

116
00:05:48,620 --> 00:05:50,340
所需执行的代码

117
00:05:50,340 --> 00:05:52,830
在编译时加以结合

118
00:05:52,830 --> 00:05:55,930
这两空啊，很显然是一个对比的

119
00:05:55,930 --> 00:05:57,150
哎，一个选项吧

120
00:05:57,150 --> 00:05:59,520
我们会发现前者是运行

121
00:05:59,520 --> 00:06:01,040
后者呢是编译

122
00:06:01,040 --> 00:06:03,340
这两个关键字找到之后

123
00:06:03,340 --> 00:06:05,880
大家是不是会觉得很熟悉啊

124
00:06:05,880 --> 00:06:08,790
这就是我们前面给大家提到的

125
00:06:08,790 --> 00:06:12,070
动态绑定和静态绑定的概念

126
00:06:12,070 --> 00:06:16,670
只是呢，它将我们口语化的这种描述，诶

127
00:06:16,670 --> 00:06:18,950
什么时候决定把它呢

128
00:06:18,950 --> 00:06:21,760
归结到了专业性的描述当中

129
00:06:21,760 --> 00:06:27,060
过程调用和响应调用来进行结合的过程

130
00:06:27,060 --> 00:06:30,300
那运行时是什么样的绑定呢

131
00:06:30,300 --> 00:06:33,060
我们提到叫做呢，动态绑定

132
00:06:33,060 --> 00:06:35,980
那编译时是什么样的绑定呢

133
00:06:35,980 --> 00:06:39,450
与之对应的就是静态绑定

134
00:06:39,450 --> 00:06:41,490
其他选项当中

135
00:06:41,490 --> 00:06:45,750
消息传递是对象与对象进行交互的一种

136
00:06:45,750 --> 00:06:47,450
消息传递的机制

137
00:06:47,450 --> 00:06:51,090
类型检查是我们在编译过程当中啊

138
00:06:51,090 --> 00:06:52,610
会进行的一个动作

139
00:06:52,610 --> 00:06:55,100
检查代码的一个正确性

140
00:06:55,100 --> 00:06:56,860
那这道题主要呢

141
00:06:56,860 --> 00:07:02,020
是考察大家对静态绑定和动态绑定的区分
