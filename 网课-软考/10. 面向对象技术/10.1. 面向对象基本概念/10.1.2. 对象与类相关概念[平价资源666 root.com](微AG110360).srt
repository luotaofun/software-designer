1
00:00:00,000 --> 00:00:03,980
首先呢，我们看到的是面向对象当中

2
00:00:03,980 --> 00:00:07,930
对象与类相关的一些概念内容

3
00:00:07,930 --> 00:00:09,700
那什么是对象

4
00:00:09,700 --> 00:00:11,130
什么是类呢

5
00:00:11,130 --> 00:00:13,200
其实说整个面向对象啊

6
00:00:13,200 --> 00:00:16,640
它对比而言呢，是对比面向过程

7
00:00:16,640 --> 00:00:18,930
也就是结构化开发来说的

8
00:00:18,930 --> 00:00:22,030
结构化的开发就是呢，面向过程

9
00:00:22,030 --> 00:00:23,670
我们知道解题过程

10
00:00:23,670 --> 00:00:25,530
把步骤一步一步写出来

11
00:00:25,530 --> 00:00:27,770
从而呢，得到了一个应用程序

12
00:00:27,770 --> 00:00:29,440
而面向对象

13
00:00:29,440 --> 00:00:31,680
它所针对的开发过程

14
00:00:31,680 --> 00:00:34,920
就不再呢，去思考解题过程了

15
00:00:34,920 --> 00:00:38,240
而是把我们解题所需要的东西呢

16
00:00:38,240 --> 00:00:39,960
都给它开发出来

17
00:00:39,960 --> 00:00:41,950
让它们呢运行起来

18
00:00:41,950 --> 00:00:43,690
那在这个过程当中

19
00:00:43,690 --> 00:00:45,510
有很核心的一个概念

20
00:00:45,510 --> 00:00:46,550
就是对象

21
00:00:46,550 --> 00:00:49,060
到底什么是对象呢

22
00:00:49,060 --> 00:00:52,040
在面向对象的整个啊

23
00:00:52,040 --> 00:00:53,540
这样的领域当中

24
00:00:53,540 --> 00:00:55,040
有一句很出名的

25
00:00:55,040 --> 00:00:57,520
叫做呢，万物皆对象

26
00:00:57,520 --> 00:00:58,440
也就是说

27
00:00:58,440 --> 00:01:02,640
世界上所有的东西都可以给它呢

28
00:01:02,640 --> 00:01:04,090
抽象成对象

29
00:01:04,090 --> 00:01:07,890
那我们现在呢，以现实生活中的例子

30
00:01:07,890 --> 00:01:11,690
简单给大家介绍一下对象它的由来

31
00:01:11,690 --> 00:01:13,920
那假如说呢，我们现在啊

32
00:01:13,920 --> 00:01:15,840
在现实生活中，诶

33
00:01:15,840 --> 00:01:17,410
经常提到对象的话

34
00:01:17,410 --> 00:01:18,630
可能会想到找对象

35
00:01:18,630 --> 00:01:19,590
找不到怎么办

36
00:01:19,590 --> 00:01:21,970
哎，我们找不到对象可以养宠物

37
00:01:21,970 --> 00:01:24,580
那养宠物的话

38
00:01:24,580 --> 00:01:26,700
一般只会养一个吧

39
00:01:26,700 --> 00:01:28,780
我要想养很多个

40
00:01:28,780 --> 00:01:29,620
很显然呢

41
00:01:29,620 --> 00:01:33,520
一般是在玩游戏的时候才会养很多宠物吧

42
00:01:33,520 --> 00:01:37,140
这些宠物一般都是电子宠物

43
00:01:37,140 --> 00:01:39,430
这样的一些电子宠物啊

44
00:01:39,430 --> 00:01:41,730
它是如何开发出来的呢

45
00:01:41,730 --> 00:01:45,980
首先它是基于现实世界来开发的

46
00:01:45,980 --> 00:01:50,100
那假设我们现在呢，想要养几只猫

47
00:01:50,100 --> 00:01:51,810
那在养猫的时候

48
00:01:51,810 --> 00:01:56,570
现实世界当中猫它有一个大概的形状吧

49
00:01:56,570 --> 00:01:59,970
我们知道呢，大概这个体型指的就是猫

50
00:01:59,970 --> 00:02:02,180
并且猫还有一些特点

51
00:02:02,180 --> 00:02:04,520
想到猫大家会想到什么呢

52
00:02:04,520 --> 00:02:05,980
唉，比较软萌

53
00:02:05,980 --> 00:02:07,990
叫起来喵喵喵的

54
00:02:07,990 --> 00:02:09,330
那这就是呢

55
00:02:09,330 --> 00:02:11,200
猫的一些特点

56
00:02:11,200 --> 00:02:13,410
那这些特点呀

57
00:02:13,410 --> 00:02:16,780
我们如何把它开发成程序呢

58
00:02:16,780 --> 00:02:20,950
就需要从三维世界抽象成数据

59
00:02:20,950 --> 00:02:24,500
那这个抽象的过程当中

60
00:02:24,500 --> 00:02:26,510
这些抽象的数据啊

61
00:02:26,510 --> 00:02:29,010
其实可以分成两大类

62
00:02:29,010 --> 00:02:32,820
一类呢，是静态的一些特征

63
00:02:32,820 --> 00:02:36,590
一类呢，是动态的一些行为

64
00:02:36,590 --> 00:02:39,430
静态特征呢，就是猫长什么样

65
00:02:39,430 --> 00:02:43,160
动态特征呢，就是猫能够呢，做什么

66
00:02:43,160 --> 00:02:47,010
把这些呢抽象出来得到的呢

67
00:02:47,010 --> 00:02:49,510
哎，比如说我们简单抽象一下

68
00:02:49,510 --> 00:02:50,250
这只猫

69
00:02:50,250 --> 00:02:52,200
它是白色的，会叫

70
00:02:52,200 --> 00:02:55,040
这只猫呢，它也是白色的，会叫

71
00:02:55,040 --> 00:02:57,800
然后这只猫呢，它是灰色的

72
00:02:57,800 --> 00:03:00,040
也会呢喵喵叫

73
00:03:00,040 --> 00:03:01,800
把这样的一些呀

74
00:03:01,800 --> 00:03:04,160
静态和动态的特征

75
00:03:04,160 --> 00:03:06,400
把它呢作为一个整体

76
00:03:06,400 --> 00:03:09,340
就可以呢，象征这样一只猫了

77
00:03:09,340 --> 00:03:11,940
那这个过程就是呢

78
00:03:11,940 --> 00:03:14,940
抽象成对象的过程

79
00:03:15,320 --> 00:03:17,680
对象它是一个整体

80
00:03:17,680 --> 00:03:22,010
它封装了我们的这样的一个对象啊

81
00:03:22,010 --> 00:03:25,710
它相关的属性和行为属性

82
00:03:25,710 --> 00:03:27,650
就是它的静态特征

83
00:03:27,650 --> 00:03:29,650
也可以叫做数据

84
00:03:29,650 --> 00:03:32,870
行为呢，就是它的动态特征

85
00:03:32,870 --> 00:03:35,710
也可以呢，叫做操作

86
00:03:35,710 --> 00:03:37,050
那就是呢

87
00:03:37,050 --> 00:03:40,280
现实世界抽象出对象

88
00:03:40,280 --> 00:03:41,950
抽象之后

89
00:03:41,950 --> 00:03:44,130
为了识别出，哎

90
00:03:44,130 --> 00:03:47,290
它是我们家唯一确定的一只猫

91
00:03:47,290 --> 00:03:48,950
大家会给我们的小猫

92
00:03:48,950 --> 00:03:51,450
来起一个唯一确定的名字

93
00:03:51,450 --> 00:03:53,420
或者有一个动物的编号吧

94
00:03:53,420 --> 00:03:57,710
那这种唯一确定的就是呢，对象名

95
00:03:57,710 --> 00:04:00,760
或者呢叫做对象 id 

96
00:04:00,760 --> 00:04:03,110
有了 id 有了属性

97
00:04:03,110 --> 00:04:04,410
有了行为

98
00:04:04,410 --> 00:04:10,670
把他们打包形成的一个整体就是对象

99
00:04:10,670 --> 00:04:16,810
那对象当中封装就意味着里面的内部细节

100
00:04:16,810 --> 00:04:18,829
对外呢，是看不到的

101
00:04:18,829 --> 00:04:20,810
这就是呢，封装

102
00:04:20,810 --> 00:04:23,410
类似于呢，我们在寄快递的时候

103
00:04:23,410 --> 00:04:25,220
打包一个包裹

104
00:04:25,220 --> 00:04:27,680
会将呢所有的东西塞进去

105
00:04:27,680 --> 00:04:30,040
对外只会保留一张快递单

106
00:04:30,040 --> 00:04:32,620
这也是呢，封装的含义

107
00:04:32,620 --> 00:04:36,290
它主要是将信息隐藏起来

108
00:04:36,290 --> 00:04:38,480
具有一定的安全性

109
00:04:38,480 --> 00:04:39,820
那这是啊

110
00:04:39,820 --> 00:04:43,520
对现实世界抽象出对象

111
00:04:43,870 --> 00:04:45,610
那抽象之后

112
00:04:45,610 --> 00:04:47,930
三只猫我觉得不够

113
00:04:47,930 --> 00:04:50,190
我还要养更多的猫

114
00:04:50,190 --> 00:04:53,850
我们是不是每想要一只猫的时候

115
00:04:53,850 --> 00:04:55,490
就画出一只猫呢

116
00:04:55,490 --> 00:04:57,360
其实并不是

117
00:04:57,360 --> 00:05:00,560
我们在创建猫的时候啊

118
00:05:00,560 --> 00:05:05,850
会将猫它所特有的一些呢，东西，诶

119
00:05:05,850 --> 00:05:08,860
把它呢做成一个模具

120
00:05:08,860 --> 00:05:12,590
下一次想要生成一个新的猫的时候

121
00:05:12,590 --> 00:05:17,500
直接呢，拿模具来套用一下就可以了

122
00:05:17,500 --> 00:05:20,920
那这种模具的生成就是呢

123
00:05:20,920 --> 00:05:24,700
将对象它所共有的一些东西

124
00:05:24,700 --> 00:05:27,160
进一步的进行抽象

125
00:05:27,160 --> 00:05:30,030
这个抽象的过程当中

126
00:05:30,030 --> 00:05:33,730
我们生成的就是呢类

127
00:05:33,730 --> 00:05:36,280
那这个抽象过程的话

128
00:05:36,280 --> 00:05:39,380
我们会发现大家都有毛色

129
00:05:39,380 --> 00:05:43,810
虽然毛色的具体表现可能不一样

130
00:05:43,810 --> 00:05:46,720
但是呢，确实都有毛色

131
00:05:46,720 --> 00:05:47,700
那我们呢

132
00:05:47,700 --> 00:05:51,220
唉，就画一只大致猫的形状

133
00:05:51,220 --> 00:05:53,600
只是呢，没有再涂颜色了

134
00:05:53,600 --> 00:05:56,470
具体它是什么样的一只猫

135
00:05:56,470 --> 00:06:00,550
我们在呀，利用这个模具生成的时

136
00:06:00,550 --> 00:06:02,120
再去呢涂色

137
00:06:02,120 --> 00:06:06,080
其次呢，所有的猫都能够喵喵叫

138
00:06:06,080 --> 00:06:08,230
那这种动态的行为啊

139
00:06:08,230 --> 00:06:10,230
一般呢是一致的

140
00:06:10,230 --> 00:06:14,090
我们呢都会保留在模具当中

141
00:06:14,320 --> 00:06:18,650
这种模具生成的我们叫做呢类

142
00:06:18,650 --> 00:06:23,200
那我们对于对象的属性和行为进行抽象

143
00:06:23,200 --> 00:06:27,900
在类当中同样会有这样的属性和行为吧

144
00:06:27,900 --> 00:06:29,310
这个过程当中

145
00:06:29,310 --> 00:06:32,830
属性对应的就是数据成员

146
00:06:32,830 --> 00:06:35,490
它是哪一些静态的特征

147
00:06:35,490 --> 00:06:40,960
还有呢，动态的行为叫做呢，成员函数

148
00:06:40,960 --> 00:06:42,790
这些行为啊

149
00:06:42,790 --> 00:06:49,180
最终会通过函数或者叫做方法来进行体现

150
00:06:49,180 --> 00:06:51,550
那这就是呢类

151
00:06:51,550 --> 00:06:53,930
类也会有自己的名字

152
00:06:53,930 --> 00:06:58,540
唉，我们一般取一个框架式的名字，猫类

153
00:06:58,540 --> 00:07:02,980
那我们从对象可以抽象出类

154
00:07:02,980 --> 00:07:06,240
其次呢，通过类可以呢

155
00:07:06,240 --> 00:07:08,900
反向生成具体的对象

156
00:07:08,900 --> 00:07:10,140
这个过程呀

157
00:07:10,140 --> 00:07:12,900
我们叫做实例化的过程

158
00:07:12,900 --> 00:07:15,340
一般呢，在 java 代码当中啊

159
00:07:15,340 --> 00:07:17,980
会以 new 呢，来进行实例化

160
00:07:17,980 --> 00:07:22,230
那具体的代码应用呢，我们再讲，呃

161
00:07:22,230 --> 00:07:23,950
相应的开发的时候呢

162
00:07:23,950 --> 00:07:27,650
再会呢，给大家进行一些简单的说明

163
00:07:27,650 --> 00:07:29,860
那我们会发现

164
00:07:29,860 --> 00:07:33,330
现实世界可以抽象出对象

165
00:07:33,330 --> 00:07:35,390
对象可以抽象出类

166
00:07:35,390 --> 00:07:40,980
类可以呢，通过类反向的实例画出我们的对象

167
00:07:40,980 --> 00:07:46,360
那整个过程看起来是从现实世界出发

168
00:07:46,360 --> 00:07:49,770
一步一步地走到累吧

169
00:07:49,770 --> 00:07:53,230
但我们在实际开发的过程当中

170
00:07:53,230 --> 00:07:55,080
它其实是相反的

171
00:07:55,080 --> 00:07:57,710
这里呢，又以狗为例

172
00:07:57,710 --> 00:08:00,030
简单的给大家展示了一下

173
00:08:00,030 --> 00:08:02,460
好，如果我养了猫

174
00:08:02,460 --> 00:08:03,720
我还想养狗

175
00:08:03,720 --> 00:08:07,340
那狗怎么来进行诶，设计呢

176
00:08:07,340 --> 00:08:10,440
同样从现实世界出发

177
00:08:10,440 --> 00:08:14,770
抽象出它的属性和行为

178
00:08:14,770 --> 00:08:16,710
加上对象 id 

179
00:08:16,710 --> 00:08:19,670
把它呢，封装成为对象

180
00:08:19,670 --> 00:08:25,160
再从对象进一步找相似的部分进行抽象

181
00:08:25,160 --> 00:08:27,540
从而呢，得出类

182
00:08:27,540 --> 00:08:31,500
类同样呢，包含我们的数据、成员

183
00:08:31,500 --> 00:08:33,750
还有呢，成员函数

184
00:08:33,750 --> 00:08:36,900
对应的就是属性和行为

185
00:08:36,900 --> 00:08:41,280
类还可以反向实例化生成对象

186
00:08:41,280 --> 00:08:45,730
那我们对于面向对象开发的过程当中

187
00:08:45,730 --> 00:08:49,820
分析的思路是从现实世界到对象

188
00:08:49,820 --> 00:08:50,820
再到类

189
00:08:50,820 --> 00:08:54,050
但实际写代码的时候

190
00:08:54,050 --> 00:08:56,980
我们是从类开始写

191
00:08:56,980 --> 00:09:01,700
然后再从类实际的实例化出对象

192
00:09:01,700 --> 00:09:05,350
再将呢实例化的对象展示出来

193
00:09:05,350 --> 00:09:08,350
是一个呢反向的实现过程

194
00:09:08,350 --> 00:09:12,070
了解呢，有这样的一个方向即可

195
00:09:12,070 --> 00:09:16,040
那这是对象与类以及呢

196
00:09:16,040 --> 00:09:18,220
封装这样的一组概念

197
00:09:18,220 --> 00:09:20,570
大家呢，稍微消化一下

198
00:09:20,570 --> 00:09:23,010
接下来我们看到这组概念

199
00:09:23,010 --> 00:09:26,940
在软件设计师考试真题当中的体现

200
00:09:26,940 --> 00:09:28,250
下面这道题

201
00:09:28,250 --> 00:09:30,970
在面向对象的系统当中呢

202
00:09:30,970 --> 00:09:33,690
对象它是呢运行时的实体

203
00:09:33,690 --> 00:09:36,430
它的组成部分不包括什么

204
00:09:36,430 --> 00:09:40,270
那我们会发现这里包含的内容关键字是什么

205
00:09:40,270 --> 00:09:45,350
对象以及呢，它组成部分当中不包括什么

206
00:09:45,350 --> 00:09:46,770
这里一定要注意

207
00:09:46,770 --> 00:09:50,560
很多同学啊，在考试的时候有惯性思维

208
00:09:50,560 --> 00:09:53,600
哎，基本上呢都看不到这个步子啊

209
00:09:53,600 --> 00:09:56,280
我们这里考的不是面向对象的组成

210
00:09:56,280 --> 00:09:58,100
而是它不包括

211
00:09:58,100 --> 00:10:00,890
那我们能干到对象

212
00:10:00,890 --> 00:10:02,670
它包含哪些内容呢

213
00:10:02,670 --> 00:10:09,590
我们前面讲的对象是对属性和行为的封装

214
00:10:10,450 --> 00:10:13,930
或者叫做呢，对数据

215
00:10:15,320 --> 00:10:17,660
和操作的封装

216
00:10:17,660 --> 00:10:20,300
这两个呢是相同的概念

217
00:10:20,300 --> 00:10:25,570
并且还要呢拼接上一个什么对象 id 

218
00:10:25,570 --> 00:10:28,700
这是对象它所包含的内容

219
00:10:28,700 --> 00:10:31,630
在下面的四个选项当

220
00:10:31,630 --> 00:10:33,170
不包括哪些呢

221
00:10:33,170 --> 00:10:35,790
首先，排除熟悉的选项

222
00:10:35,790 --> 00:10:39,790
操作和行为肯定是 A 对象的组成部分

223
00:10:39,790 --> 00:10:43,150
其次，对象 id 也叫做对象名

224
00:10:43,150 --> 00:10:45,670
所以呢也是它的组成部分

225
00:10:45,670 --> 00:10:47,390
肯定是包括在内的

226
00:10:47,390 --> 00:10:49,910
剩下还有两个选项

227
00:10:49,910 --> 00:10:51,890
A 选项和 D 选项

228
00:10:51,890 --> 00:10:53,570
表示什么含义呢

229
00:10:53,570 --> 00:10:57,070
唉，首先 A 选项消息

230
00:10:57,070 --> 00:11:01,800
它所体现的是对象与对象之间

231
00:11:01,800 --> 00:11:03,500
它们的通信呢

232
00:11:03,500 --> 00:11:07,180
是通过消息来进行交互的

233
00:11:07,180 --> 00:11:11,340
那消息它的实质其实就是呢

234
00:11:11,340 --> 00:11:14,030
方法的调用或者函数的调用

235
00:11:14,030 --> 00:11:15,960
那这个过程当中

236
00:11:15,960 --> 00:11:19,260
它所体现的是一个动态

237
00:11:21,560 --> 00:11:24,760
交互的过程 D 选项

238
00:11:24,760 --> 00:11:25,580
状态

239
00:11:25,580 --> 00:11:29,670
这是我们在前面并没有提到的一组概念

240
00:11:29,670 --> 00:11:32,030
那什么是状态呢

241
00:11:32,030 --> 00:11:33,660
唉，我们会发现

242
00:11:33,660 --> 00:11:37,360
当某一个东西可以体现状态的话

243
00:11:37,360 --> 00:11:40,790
一定是一个静态的界面吧

244
00:11:40,790 --> 00:11:43,020
比如说我们有一只猫

245
00:11:43,020 --> 00:11:46,850
它处在生长良好、生长健康的状态

246
00:11:46,850 --> 00:11:51,350
那它一定有一组健康的数据与之对应

247
00:11:51,350 --> 00:11:53,440
那这种状态呀

248
00:11:53,440 --> 00:11:56,300
它指的是一组数据

249
00:11:56,300 --> 00:11:59,140
或者说一组属性

250
00:12:00,140 --> 00:12:03,140
对应确定取值的时候

251
00:12:03,140 --> 00:12:05,180
哎，对应确定值了

252
00:12:05,180 --> 00:12:06,360
我们就说呢

253
00:12:06,360 --> 00:12:08,720
它确定的一个状态

254
00:12:08,720 --> 00:12:13,550
那我们会发现在对象的组成部分当中

255
00:12:13,550 --> 00:12:16,240
属性与谁更接近呢

256
00:12:16,240 --> 00:12:19,250
应该是与状态更接近

257
00:12:19,250 --> 00:12:21,170
那这个过程当中

258
00:12:21,170 --> 00:12:26,730
剩下哪个选项不包含在我们的对象当中呢

259
00:12:26,730 --> 00:12:29,050
应该是消息

260
00:12:29,050 --> 00:12:32,790
消息它体现的是对象与对象

261
00:12:32,790 --> 00:12:35,310
它们之间的一个交互

262
00:12:35,310 --> 00:12:37,890
所以并不是属于呢

263
00:12:37,890 --> 00:12:41,570
诶，我们对象当中的组成部分

264
00:12:41,570 --> 00:12:43,700
这里呢，区分一下

265
00:12:43,700 --> 00:12:46,490
那如果在考试当中

266
00:12:46,490 --> 00:12:49,170
你发现四个选项出现了一些

267
00:12:49,170 --> 00:12:52,210
你不不熟悉的一些概念

268
00:12:52,210 --> 00:12:53,060
怎么办呢

269
00:12:53,060 --> 00:12:57,110
诶，找类似的一些概念去进行对比

270
00:12:57,110 --> 00:13:00,680
从而呢，找到一些相近的规律

271
00:13:00,680 --> 00:13:02,890
那再来看第二空

272
00:13:03,130 --> 00:13:04,630
一个类

273
00:13:04,630 --> 00:13:09,030
它定义了一组大体相似的对象

274
00:13:09,030 --> 00:13:09,970
那这是呢

275
00:13:09,970 --> 00:13:10,940
什么是类

276
00:13:10,940 --> 00:13:14,560
那这些对象可以共享什么

277
00:13:14,560 --> 00:13:17,630
哎，类生成实例化对象

278
00:13:17,630 --> 00:13:20,250
比如说刚刚猫类可以实例化呢

279
00:13:20,250 --> 00:13:21,190
不同的猫

280
00:13:21,190 --> 00:13:23,750
这些猫共享了什么

281
00:13:23,750 --> 00:13:27,830
共享了猫它的一些属性特征和行为吧

282
00:13:27,830 --> 00:13:30,910
所以这里面类定义的对象

283
00:13:30,910 --> 00:13:35,480
这些对象会共享属性和行为

284
00:13:35,480 --> 00:13:38,530
那其他的选项当中

285
00:13:38,530 --> 00:13:40,310
属性和状

286
00:13:40,310 --> 00:13:41,710
我们刚刚解释了

287
00:13:41,710 --> 00:13:43,780
是一组相近的概念

288
00:13:43,780 --> 00:13:45,790
对象名和状态

289
00:13:45,790 --> 00:13:48,360
对象名就是呢，对象 id 

290
00:13:48,360 --> 00:13:51,820
对象名是唯一确定的

291
00:13:51,820 --> 00:13:53,920
它是啊，不能够重复

292
00:13:53,920 --> 00:13:58,200
它是可以标识出我们的对象的 C 选项

293
00:13:58,200 --> 00:14:00,350
行为和多重度

294
00:14:00,350 --> 00:14:04,210
那多重度又是一个呢，陌生的概念

295
00:14:04,210 --> 00:14:07,550
它是啊，我们在讲，呃

296
00:14:07,550 --> 00:14:11,530
例如说呢，一二图当中粘性的类型的时候

297
00:14:11,530 --> 00:14:13,490
那你的一对多这种呢

298
00:14:13,490 --> 00:14:15,440
都是属于多重度

299
00:14:15,440 --> 00:14:18,910
包括呢，我们在后面讲 email 图的时候

300
00:14:18,910 --> 00:14:19,870
类图啊

301
00:14:19,870 --> 00:14:22,010
里面的多重度也是呢

302
00:14:22,010 --> 00:14:24,230
一个相关的概念内容

303
00:14:24,230 --> 00:14:26,840
那与我们这里的对象诶

304
00:14:26,840 --> 00:14:28,960
或者说类封装的内容

305
00:14:28,960 --> 00:14:30,900
对象共享的内容呢

306
00:14:30,900 --> 00:14:32,540
关系并不大

307
00:14:32,540 --> 00:14:36,910
那这道题第一空考察的是对象的组成

308
00:14:36,910 --> 00:14:40,810
第二空考察的是类的组成

309
00:14:41,110 --> 00:14:43,750
对象共享的就是呢

310
00:14:43,750 --> 00:14:47,190
类当中提供的属性和行为

311
00:14:47,190 --> 00:14:52,040
那这道题呢，是关于类与对象的考察

312
00:14:52,200 --> 00:14:56,630
下面这道题在面向对象方法当中啊

313
00:14:56,630 --> 00:15:00,070
将逻辑上相关的一些数

314
00:15:00,070 --> 00:15:03,110
以及呢，行为绑定在一起

315
00:15:03,110 --> 00:15:05,970
那有了数据以及行为

316
00:15:05,970 --> 00:15:07,440
使信息啊

317
00:15:07,440 --> 00:15:10,410
对使用者隐蔽

318
00:15:10,410 --> 00:15:12,550
注意关键字隐蔽

319
00:15:12,550 --> 00:15:14,770
哎，把东西藏起来

320
00:15:14,770 --> 00:15:16,190
大家想到什么

321
00:15:16,190 --> 00:15:23,370
封装对象会将属性和行为打包藏起来

322
00:15:23,370 --> 00:15:26,090
是一种呢，信息隐藏技术

323
00:15:26,090 --> 00:15:29,250
或者叫做呢，信息隐蔽技术

324
00:15:29,250 --> 00:15:31,250
它只会呢，它会将啊

325
00:15:31,250 --> 00:15:33,210
对象的细节藏起来

326
00:15:33,210 --> 00:15:36,130
只对外呢，公开一个接口

327
00:15:36,130 --> 00:15:39,560
那这是封装的含义

328
00:15:39,560 --> 00:15:41,850
对于封装而言啊

329
00:15:41,850 --> 00:15:44,590
它会体现在代码当中

330
00:15:44,590 --> 00:15:49,070
下面这道题所考察的就是面向对象

331
00:15:49,070 --> 00:15:52,210
程序实现过程当中的代码了

332
00:15:52,210 --> 00:15:54,270
那当类当中

333
00:15:54,270 --> 00:16:00,090
它的属性或者方法被设计为私有的时候

334
00:16:00,700 --> 00:16:03,040
这是修饰符

335
00:16:03,040 --> 00:16:06,960
私有谁可以对它进行访问呢

336
00:16:06,960 --> 00:16:10,860
这是我们在课堂上并没有讲到的概念

337
00:16:10,860 --> 00:16:14,880
需要大家呢掌握一定的代码基础

338
00:16:14,880 --> 00:16:18,210
那针对私有而言的话

339
00:16:18,210 --> 00:16:20,290
这里的修饰符啊

340
00:16:20,290 --> 00:16:22,830
大致呢分成两个极端

341
00:16:22,830 --> 00:16:24,160
一个是私有

342
00:16:24,160 --> 00:16:26,480
一个呢是公有

343
00:16:30,180 --> 00:16:34,630
私有的这些属性或者方法

344
00:16:34,630 --> 00:16:37,240
它是呢需要被藏起来的

345
00:16:37,240 --> 00:16:40,100
大家可以结合信息隐蔽来看的话

346
00:16:40,100 --> 00:16:41,320
封装来看的话

347
00:16:41,320 --> 00:16:43,630
他不希望别人去用

348
00:16:43,630 --> 00:16:45,550
那除了别人以外

349
00:16:45,550 --> 00:16:47,130
自己可以用诶

350
00:16:47,130 --> 00:16:49,160
自己的隐私自己可以看

351
00:16:49,160 --> 00:16:52,520
那这个过程当中谁是自己啊

352
00:16:52,520 --> 00:16:55,900
也就是此类当中的方法

353
00:16:55,900 --> 00:16:58,080
类自己当中的方法

354
00:16:58,080 --> 00:17:02,020
可以去使用的是死有方法

355
00:17:02,460 --> 00:17:07,060
那如果定义为公有 public 之后呢

356
00:17:07,060 --> 00:17:10,880
所所有的方法都可以去访问它了

357
00:17:10,880 --> 00:17:12,800
应用程序当

358
00:17:12,800 --> 00:17:16,359
所有方法可访问的是 public 

359
00:17:16,359 --> 00:17:21,119
那此类当中只有 public 定义的方法才能访问吗

360
00:17:21,119 --> 00:17:24,970
并不是，只要是这个类当中都可以访问它

361
00:17:24,970 --> 00:17:27,329
在这二者之间啊

362
00:17:27,329 --> 00:17:30,280
还有一个呢，修饰符

363
00:17:30,280 --> 00:17:32,980
它是属于呢默认的

364
00:17:32,980 --> 00:17:36,080
如果有缺省的话

365
00:17:37,250 --> 00:17:40,010
如果是缺省状态的话

366
00:17:40,010 --> 00:17:44,740
我们就认为呢，它是默认的诶，一个保护状态

367
00:17:44,740 --> 00:17:48,060
同一个包当中呢，可以使用

368
00:17:48,060 --> 00:17:50,580
那这个呢，是属于 D 选项

369
00:17:50,580 --> 00:17:55,820
一个包当中方法可使用的是保护修饰的诶

370
00:17:55,820 --> 00:17:59,110
PROPUBLIC 这样的一个呢，唉，修饰符

371
00:17:59,110 --> 00:18:01,570
了解到这里之后啊

372
00:18:01,570 --> 00:18:04,740
只要呢大家有一定的代码基础

373
00:18:04,740 --> 00:18:08,780
这里呢，我们在后面的代码填空地方啊

374
00:18:08,780 --> 00:18:13,260
还会呢给大家扩展一些修饰符的内容

375
00:18:13,260 --> 00:18:16,610
这些呢，是给大家介绍到

376
00:18:16,610 --> 00:18:18,470
面向对象当中啊

377
00:18:18,470 --> 00:18:21,630
类与对象的一些相关概念
