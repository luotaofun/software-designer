1
00:00:00,000 --> 00:00:04,970
接下来我们再来看一下 EMAL 图当中的关系

2
00:00:04,970 --> 00:00:06,920
那我们常说的关系啊

3
00:00:06,920 --> 00:00:10,090
其实都是呢，属于类土当中居多

4
00:00:10,090 --> 00:00:12,220
其次呢，在用例图当中啊

5
00:00:12,220 --> 00:00:14,450
也会涉到，涉及到关系

6
00:00:14,450 --> 00:00:18,250
那这些关系一方面在上五题当中会出现

7
00:00:18,250 --> 00:00:21,050
那我们呢，可能会直接考大家，诶

8
00:00:21,050 --> 00:00:23,770
这里描述的是什么样的一种关系

9
00:00:23,770 --> 00:00:26,150
或者呢，唉，在下面图示当中

10
00:00:26,150 --> 00:00:28,830
给大家展示的是什么样的一些关系

11
00:00:28,830 --> 00:00:31,740
那其次呢，在下午题当中啊

12
00:00:31,740 --> 00:00:34,580
关系一方面可能会出现填空

13
00:00:34,580 --> 00:00:35,580
另外一方面呢

14
00:00:35,580 --> 00:00:39,750
还可能帮助我们来判定相应的类

15
00:00:39,750 --> 00:00:43,860
或者呢，相应的用力对应的是哪一些

16
00:00:43,860 --> 00:00:45,100
所以说关系啊

17
00:00:45,100 --> 00:00:48,380
在我们的考试当中也是呢，比较重要的

18
00:00:48,380 --> 00:00:51,470
它在上五题当中体现的分值不多

19
00:00:51,470 --> 00:00:53,690
但是在做题的过程当中呢

20
00:00:53,690 --> 00:00:55,410
用到的比较多

21
00:00:55,410 --> 00:00:58,160
我们首先看到呢

22
00:00:58,160 --> 00:00:59,950
类图当中的关系

23
00:00:59,950 --> 00:01:01,330
类图当中啊

24
00:01:01,330 --> 00:01:04,870
首先呢，可以看到比较简单的，诶

25
00:01:04,870 --> 00:01:07,210
叫做呢，关联关系

26
00:01:07,210 --> 00:01:11,610
那关联关系它只是呢描述了一组面

27
00:01:11,610 --> 00:01:15,620
它可以啊，是对象之间的连接

28
00:01:15,620 --> 00:01:18,440
那对于这组链而言的话

29
00:01:18,440 --> 00:01:21,800
我们在类图当中关联关系

30
00:01:21,800 --> 00:01:27,200
它是可以标注 A 0到一或者一一到多

31
00:01:27,200 --> 00:01:28,860
这种多重度的

32
00:01:28,860 --> 00:01:31,780
还可以标注角色

33
00:01:32,300 --> 00:01:35,260
偏重于某一侧的位置

34
00:01:35,260 --> 00:01:37,320
就是呢某一侧的角

35
00:01:37,320 --> 00:01:39,240
如果写在中间的话

36
00:01:39,240 --> 00:01:41,640
是两侧相互之间呢

37
00:01:41,640 --> 00:01:43,720
都满足这个角色的定义

38
00:01:43,720 --> 00:01:44,970
那这是第一个呢

39
00:01:44,970 --> 00:01:48,270
关联关系我们一般用一条线来表示

40
00:01:48,270 --> 00:01:51,600
其次呢可以看到依赖关系

41
00:01:51,600 --> 00:01:55,830
依赖关系啊，是直接用箭头来指向的

42
00:01:55,830 --> 00:01:58,220
那我们在考试当中啊

43
00:01:58,220 --> 00:01:59,960
见到的依赖关系

44
00:01:59,960 --> 00:02:03,990
大部分呢是这种虚线加箭头的形式

45
00:02:03,990 --> 00:02:09,090
那我们目前 UMML 是没有统一标准的画法

46
00:02:09,090 --> 00:02:10,020
只能说呢

47
00:02:10,020 --> 00:02:12,580
教程当中给我们的依赖关系

48
00:02:12,580 --> 00:02:16,000
是这种虚线加箭头的形式

49
00:02:16,000 --> 00:02:20,760
那依赖关系表示的是一个事物的变化

50
00:02:20,760 --> 00:02:24,060
会影响到另外的一个事物 A 

51
00:02:24,060 --> 00:02:26,040
会影响到 B 

52
00:02:26,040 --> 00:02:28,300
那这就是呢依赖关系

53
00:02:28,300 --> 00:02:31,210
第三种叫做呢泛化关系

54
00:02:31,210 --> 00:02:33,710
这个大家比较熟悉了啊

55
00:02:34,250 --> 00:02:35,630
泛化关系

56
00:02:35,630 --> 00:02:37,950
我们说父类是子类的泛化

57
00:02:37,950 --> 00:02:41,060
子类是父类的特殊化

58
00:02:41,060 --> 00:02:44,090
它表示的是特殊与一般

59
00:02:44,090 --> 00:02:45,890
那泛化关

60
00:02:45,890 --> 00:02:49,290
我们一般呢，用箭头以及呢

61
00:02:49,290 --> 00:02:51,830
空心的箭头来表示

62
00:02:51,830 --> 00:02:54,930
注意箭头指向的是父类啊

63
00:02:54,930 --> 00:02:58,150
我们的箭头是指向高层的

64
00:02:58,150 --> 00:03:00,570
那与泛化关系很相似的

65
00:03:00,570 --> 00:03:01,630
大家还记得吗

66
00:03:01,630 --> 00:03:06,020
泛化关系还有一种相似的叫做呢，实现关系

67
00:03:06,020 --> 00:03:08,160
所谓的实现关系

68
00:03:08,160 --> 00:03:10,980
特指的是接口与它的实现类

69
00:03:10,980 --> 00:03:13,970
那在接口与实践类当中，诶

70
00:03:13,970 --> 00:03:17,790
很明显接口是处于父类的关系当中吧

71
00:03:17,790 --> 00:03:21,330
那我们呢，会有实线内指向接口

72
00:03:21,330 --> 00:03:22,610
并且注意啊

73
00:03:22,610 --> 00:03:26,810
这个箭头我们一般为了区分的话

74
00:03:26,810 --> 00:03:29,510
使这线实线关系啊

75
00:03:29,510 --> 00:03:34,120
这里会用虚线来表示它是实线关系

76
00:03:34,120 --> 00:03:35,850
那在考试当中

77
00:03:35,850 --> 00:03:38,050
大家有时候看到这种箭头呢

78
00:03:38,050 --> 00:03:40,170
也有可能是实心的

79
00:03:40,170 --> 00:03:42,120
这个是不一定的啊

80
00:03:42,120 --> 00:03:43,930
那这是关于呢

81
00:03:43,930 --> 00:03:46,270
泛化以及实现关系

82
00:03:46,270 --> 00:03:49,570
最后，哎，我们对于关联关系啊

83
00:03:49,570 --> 00:03:51,030
还有扩

84
00:03:51,460 --> 00:03:53,360
这四种关系呢

85
00:03:53,360 --> 00:03:56,820
是我们 EML 图当中基本的四种关系

86
00:03:56,820 --> 00:03:59,210
那对关联关系而言的话

87
00:03:59,210 --> 00:04:01,950
它还有一种呢，特殊的关联关

88
00:04:01,950 --> 00:04:03,790
叫做聚集

89
00:04:06,870 --> 00:04:09,150
什么叫做聚集呢

90
00:04:09,150 --> 00:04:11,630
把东西聚到一块儿

91
00:04:11,630 --> 00:04:14,120
形成一个整体

92
00:04:14,120 --> 00:04:18,459
它体现的是整体与部分之间的关系

93
00:04:18,459 --> 00:04:22,680
那它会用菱形指向整体

94
00:04:22,680 --> 00:04:26,940
那我们这里整体与部分还可以细分

95
00:04:26,940 --> 00:04:29,120
作为整体来说

96
00:04:29,120 --> 00:04:32,780
如果它指的整体与部分啊

97
00:04:32,780 --> 00:04:35,840
相互之间生命周期不同

98
00:04:35,840 --> 00:04:38,340
我们就叫做呢聚合关系

99
00:04:38,340 --> 00:04:41,920
生命周期相同就叫做组合关系

100
00:04:41,920 --> 00:04:47,300
一般组合关系会用实心的菱形来加以区分

101
00:04:47,300 --> 00:04:48,180
表示呢

102
00:04:48,180 --> 00:04:50,260
它们之间啊，紧密程度

103
00:04:50,260 --> 00:04:52,980
耦合程度会更强一些

104
00:04:52,980 --> 00:04:56,500
那组合与聚合如何来区分呢

105
00:04:56,500 --> 00:04:58,740
我们一般啊认为

106
00:04:59,420 --> 00:05:02,260
大雁和雁群

107
00:05:06,300 --> 00:05:09,400
是典型的聚合关系

108
00:05:09,400 --> 00:05:11,940
因为当雁群散了

109
00:05:11,940 --> 00:05:14,900
大雁呢还是能够存在的

110
00:05:14,900 --> 00:05:16,010
那比如说呢

111
00:05:16,010 --> 00:05:18,440
我们一个班级和学生

112
00:05:18,440 --> 00:05:20,230
当班级毕业了

113
00:05:20,230 --> 00:05:23,230
那我们的学生呢，仍然是存在的

114
00:05:23,230 --> 00:05:25,880
这就是典型的聚合关系

115
00:05:25,880 --> 00:05:29,740
那所谓的组合关系就比较紧密了

116
00:05:29,740 --> 00:05:31,560
它类似于什么呢

117
00:05:31,560 --> 00:05:35,870
类似于翅膀和大雁

118
00:05:36,570 --> 00:05:39,310
那当我们的大雁啊

119
00:05:39,310 --> 00:05:40,520
死去了之后

120
00:05:40,520 --> 00:05:42,820
翅膀也就呢没有意义了

121
00:05:42,820 --> 00:05:46,160
所以它们之间的联系是非常紧密的

122
00:05:46,160 --> 00:05:48,130
那比如说我们一个公司

123
00:05:48,130 --> 00:05:49,510
他的财务部

124
00:05:49,510 --> 00:05:51,490
比如说你的公司破产了

125
00:05:51,490 --> 00:05:54,840
财务部还有存在的一个，哎，生命吗

126
00:05:54,840 --> 00:05:56,880
也就没有生命意义了

127
00:05:56,880 --> 00:06:00,320
所以这里啊，组合和聚合体现的区别

128
00:06:00,320 --> 00:06:03,300
主要呢是生命周期方面的

129
00:06:03,300 --> 00:06:06,500
那这是我们呢，典型的 EML 当

130
00:06:06,500 --> 00:06:08,920
类图会经常出现的关系

131
00:06:08,920 --> 00:06:10,720
而用意图当中呢

132
00:06:10,720 --> 00:06:13,600
其实也会涉及到一些关系

133
00:06:13,600 --> 00:06:16,270
那这里呢，在用力图当中

134
00:06:16,270 --> 00:06:19,580
我们主要呢需要大家掌握三种关系

135
00:06:19,580 --> 00:06:21,350
第一种，包含关系

136
00:06:21,350 --> 00:06:22,890
第二种，扩展关系

137
00:06:22,890 --> 00:06:24,970
第三种，泛化关系

138
00:06:24,970 --> 00:06:27,760
那什么是包含关系呢

139
00:06:27,760 --> 00:06:32,630
包含我们呢，一般会标注为 include 

140
00:06:32,630 --> 00:06:34,430
表示呢，这里包含

141
00:06:34,430 --> 00:06:40,390
而包含的箭头会指向一个呢被包含用力

142
00:06:40,390 --> 00:06:45,710
我们也可以叫做呢，公共用力啊

143
00:06:47,480 --> 00:06:49,100
公共用

144
00:06:49,100 --> 00:06:51,660
它唉，顾名思义就是呢

145
00:06:51,660 --> 00:06:54,650
将公共行为抽出来了

146
00:06:54,650 --> 00:06:55,890
那我们一般呢

147
00:06:55,890 --> 00:06:59,730
是从两个或两个以上的用例来抽取

148
00:06:59,730 --> 00:07:02,540
那里面有一些相似的地方诶

149
00:07:02,540 --> 00:07:05,180
那有一些操作是相同的

150
00:07:05,180 --> 00:07:06,800
我们才会把它抽出

151
00:07:06,800 --> 00:07:08,310
作为呢公共用例

152
00:07:08,310 --> 00:07:12,710
那抽出来的这些行为是不可省略的

153
00:07:12,710 --> 00:07:18,760
我们啊，会通过前面的基本用例选择执行之后

154
00:07:18,760 --> 00:07:23,130
接下来都会呢去执行一次公共用例

155
00:07:23,130 --> 00:07:25,770
所以我们一般认为呢，包含关系

156
00:07:25,770 --> 00:07:28,390
它是一种呢必选的关系

157
00:07:28,390 --> 00:07:32,590
后面所包含的用例必须要走

158
00:07:33,100 --> 00:07:35,060
扩展关系呢

159
00:07:35,060 --> 00:07:36,860
哎，我们也是啊

160
00:07:36,860 --> 00:07:38,700
会用一个单词来表示

161
00:07:38,700 --> 00:07:43,170
我们呢，会用 extend 表示扩展

162
00:07:44,870 --> 00:07:50,890
那扩展用力它所指向的同样呢，是被扩展的啊

163
00:07:50,890 --> 00:07:53,190
那被扩展的叫什么呢

164
00:07:53,190 --> 00:07:56,340
被扩展的叫做呢，基本用力

165
00:07:56,340 --> 00:08:00,080
所以它的箭头指向的是基本油腻

166
00:08:00,080 --> 00:08:03,020
而我们另一侧才是呢

167
00:08:03,020 --> 00:08:04,250
扩展油腻

168
00:08:04,250 --> 00:08:07,100
那扩展用力是什么意思呢

169
00:08:07,100 --> 00:08:10,920
就是在满足某个条件下

170
00:08:10,920 --> 00:08:13,740
那我们基本用例执行之后呢

171
00:08:13,740 --> 00:08:16,600
哎，它会满足某一定的条

172
00:08:16,600 --> 00:08:18,890
才会执行扩展用力

173
00:08:18,890 --> 00:08:22,320
所以扩展关系它是一种呢

174
00:08:22,320 --> 00:08:24,180
可选的关系

175
00:08:24,180 --> 00:08:25,500
那它一般啊

176
00:08:25,500 --> 00:08:31,250
会混合两种或者两种以上的不同场景

177
00:08:31,250 --> 00:08:33,179
那第一种场景呢

178
00:08:33,179 --> 00:08:35,120
哎，我们就叫做基本用力

179
00:08:35,120 --> 00:08:37,220
满足某一个条件之后呢

180
00:08:37,220 --> 00:08:38,299
那我们就是呢

181
00:08:38,299 --> 00:08:39,350
扩展用

182
00:08:39,350 --> 00:08:41,059
这种满足条件

183
00:08:41,059 --> 00:08:43,659
它其实是典型的分支结构

184
00:08:43,659 --> 00:08:45,000
这种分支啊

185
00:08:45,000 --> 00:08:48,360
我们一般在相应的需求描述当中

186
00:08:48,360 --> 00:08:53,330
会很明显地看到弱满足什么条件

187
00:08:53,330 --> 00:08:55,700
则执行什么样的过程

188
00:08:55,700 --> 00:08:57,190
唉，或者呢，相似的

189
00:08:57,190 --> 00:08:59,900
如果怎么样则做什么

190
00:08:59,900 --> 00:09:02,540
那这是呢，扩展关系当中啊

191
00:09:02,540 --> 00:09:06,240
满足条件的一些呢，典型的叙述

192
00:09:06,240 --> 00:09:08,140
最后，泛化关系

193
00:09:08,140 --> 00:09:09,520
泛化关系

194
00:09:09,520 --> 00:09:14,220
它跟我们前面讲到的父子关系是很相似的

195
00:09:14,220 --> 00:09:18,230
那我们呢，是抽象出共性。作为父类

196
00:09:18,230 --> 00:09:20,450
在我们的用例当中呢

197
00:09:20,450 --> 00:09:25,620
也会抽象出共性来作为它们的复用力

198
00:09:25,620 --> 00:09:28,080
那这种复用力呢

199
00:09:28,080 --> 00:09:31,910
相对来说呢，是一种抽象的关系

200
00:09:31,910 --> 00:09:34,440
那抽象之后诶

201
00:09:34,440 --> 00:09:37,400
我们剩余的是一个

202
00:09:37,400 --> 00:09:40,920
没有具体行为的复用率了

203
00:09:40,920 --> 00:09:43,140
那我们具体去实现的时候

204
00:09:43,140 --> 00:09:48,420
是选择其中一个子用力来进行执行

205
00:09:48,670 --> 00:09:53,470
所以泛化关系它也是一个必选的关系

206
00:09:53,470 --> 00:10:00,000
那我们泛化关系的箭头会指向复用力

207
00:10:06,220 --> 00:10:08,980
而复用力另一侧

208
00:10:08,980 --> 00:10:11,300
就是我们的子用力了

209
00:10:12,420 --> 00:10:17,900
我们一般啊，是先走到复用力当中

210
00:10:17,900 --> 00:10:20,640
然后在复用力的情况下

211
00:10:20,640 --> 00:10:25,250
选择其中某一种子用例来进行执行

212
00:10:25,250 --> 00:10:28,170
那这两者有什么区别呢

213
00:10:28,170 --> 00:10:30,610
唉，我们首先对比来看的话

214
00:10:30,610 --> 00:10:34,570
扩展关系它是满足条件才执行

215
00:10:34,570 --> 00:10:36,760
所以它是一种呢

216
00:10:36,760 --> 00:10:40,460
若满足某条件才执行的选择结构

217
00:10:40,460 --> 00:10:41,940
它是可选的

218
00:10:41,940 --> 00:10:44,820
也就是说，在不必要的情况下

219
00:10:44,820 --> 00:10:47,140
扩展用例咱们可以不执行

220
00:10:47,140 --> 00:10:48,750
忽略掉它也是呢

221
00:10:48,750 --> 00:10:51,140
能够正常往下操作的

222
00:10:51,140 --> 00:10:52,740
那这是扩展关系

223
00:10:52,740 --> 00:10:54,440
它的特点比较鲜明

224
00:10:54,440 --> 00:10:57,960
那我们的包含关系和泛化关系呢

225
00:10:57,960 --> 00:10:59,950
有些同学会容易混淆

226
00:10:59,950 --> 00:11:01,300
泛化关系

227
00:11:01,300 --> 00:11:04,380
我们啊，所指向的是复用力

228
00:11:04,380 --> 00:11:08,110
而复用力本身其实是没有意义的

229
00:11:08,110 --> 00:11:10,080
因为它是一个抽象的用例

230
00:11:10,080 --> 00:11:11,700
它没有具体的操作

231
00:11:11,700 --> 00:11:12,960
那怎么办呢

232
00:11:12,960 --> 00:11:17,300
一定要选择一个子用力去进行执行

233
00:11:17,300 --> 00:11:19,860
并且在泛化关系当中

234
00:11:19,860 --> 00:11:24,580
经常会看到 is a 这种描述

235
00:11:24,900 --> 00:11:28,780
也就是说子类是一种父类

236
00:11:28,780 --> 00:11:30,450
所以在这里的话

237
00:11:30,450 --> 00:11:33,770
泛化关系一方面复用率是抽象的

238
00:11:33,770 --> 00:11:34,810
它没有意义

239
00:11:34,810 --> 00:11:38,040
其次，子类是父类的一种

240
00:11:38,040 --> 00:11:41,240
那这是泛化包含关系

241
00:11:41,240 --> 00:11:42,820
它也有两侧

242
00:11:42,820 --> 00:11:45,340
并且也是必选的

243
00:11:45,340 --> 00:11:47,310
它的必选是什么含义呢

244
00:11:47,310 --> 00:11:51,570
诶，我们在执行相应用力的时候

245
00:11:51,570 --> 00:11:55,550
最前面的基本用例是必须要执行的

246
00:11:55,550 --> 00:12:01,240
并且在执行之后还要一定执行公共用例

247
00:12:01,240 --> 00:12:04,180
所以在这个过程当中我们就会发现呢

248
00:12:04,180 --> 00:12:06,910
哎，从包含关系来看的话

249
00:12:06,910 --> 00:12:09,330
我们是多个基础用例

250
00:12:09,330 --> 00:12:12,450
大家呢，有一个共同的包含用力

251
00:12:12,450 --> 00:12:15,120
那选择，哎，有没有选择呢

252
00:12:15,120 --> 00:12:18,380
没有，我们是必须走了基本用例之后

253
00:12:18,380 --> 00:12:21,620
才会呢走到公共用例当中去

254
00:12:21,620 --> 00:12:24,090
而在泛化关系当中

255
00:12:24,090 --> 00:12:28,880
我们有多个子用力都可以继承复用力

256
00:12:28,880 --> 00:12:31,780
我们先走的是复用力

257
00:12:31,780 --> 00:12:34,070
因为复用力是抽象的

258
00:12:34,070 --> 00:12:37,190
我们通过复用力再去选择

259
00:12:37,190 --> 00:12:40,220
其中一种子用力来执行

260
00:12:40,220 --> 00:12:42,480
那这个过程呢，就是泛化

261
00:12:42,480 --> 00:12:44,400
注意呢，不要混淆了

262
00:12:44,400 --> 00:12:48,780
并且泛化关系有典型的 is a 这种说明

263
00:12:48,780 --> 00:12:50,300
那我们在这里呢

264
00:12:50,300 --> 00:12:53,220
将三种关系分别举一个实例

265
00:12:53,220 --> 00:12:55,740
让大家呢感受一下

266
00:12:56,310 --> 00:12:59,030
首先包含关系

267
00:12:59,750 --> 00:13:03,490
包含关系它是一种必选的关系

268
00:13:03,490 --> 00:13:07,070
那我们一般针对包含关系而言的话

269
00:13:07,070 --> 00:13:11,450
用意图这种小人是典型的参与者

270
00:13:11,450 --> 00:13:13,510
椭圆表示用

271
00:13:13,510 --> 00:13:16,190
箭头表示它们之间的关系

272
00:13:16,190 --> 00:13:18,440
那多个基础用例

273
00:13:18,440 --> 00:13:20,160
它们的公共行

274
00:13:20,160 --> 00:13:22,340
把它抽取出来就叫做呢

275
00:13:22,340 --> 00:13:25,840
唉，我们的包含用力箭头

276
00:13:25,840 --> 00:13:28,410
指向的是被包含的这一部分

277
00:13:28,410 --> 00:13:32,660
那也就是说我们在学习课程的过程当中

278
00:13:32,660 --> 00:13:35,790
必须要检查权限

279
00:13:35,790 --> 00:13:38,750
在做课程测试的时

280
00:13:38,750 --> 00:13:41,830
也必须要检查权限

281
00:13:41,830 --> 00:13:45,720
所以我们说包含关系后面的检查权限

282
00:13:45,720 --> 00:13:49,400
是一定要选择的一个用力

283
00:13:49,400 --> 00:13:52,890
那我们通过学习课程来看的话

284
00:13:52,890 --> 00:13:56,580
其实学习课程它当前的用例当中

285
00:13:56,580 --> 00:14:00,200
已经不再有检查权限的过程了

286
00:14:00,200 --> 00:14:03,320
因为这个过程被抽走了

287
00:14:07,980 --> 00:14:12,300
类似的我们说容易混淆的泛化关系

288
00:14:12,300 --> 00:14:13,800
泛化关系

289
00:14:13,800 --> 00:14:17,120
它会啊将父类作为抽象

290
00:14:17,120 --> 00:14:18,260
作为复用力

291
00:14:18,260 --> 00:14:22,130
而具体的实现过程作为子用力

292
00:14:22,130 --> 00:14:25,780
那我们的学员在做课程注册的时候

293
00:14:25,780 --> 00:14:27,820
他可以做电话注册

294
00:14:27,820 --> 00:14:30,350
也可以做网上注册

295
00:14:30,350 --> 00:14:31,940
那我们在这里呢

296
00:14:31,940 --> 00:14:36,800
唉，选择其中一种来实现课程注册

297
00:14:36,800 --> 00:14:41,230
那我们首先学员是通过课程注册

298
00:14:41,230 --> 00:14:43,100
抽象的复用力

299
00:14:43,100 --> 00:14:44,440
再来判断呢

300
00:14:44,440 --> 00:14:48,210
我们具体以哪种方式来实现

301
00:14:48,210 --> 00:14:51,090
那也就是说我们这里的复用力啊

302
00:14:51,090 --> 00:14:56,310
它是呢对我们的子用力做了抽象

303
00:14:58,640 --> 00:15:00,540
那抽象之后

304
00:15:00,540 --> 00:15:02,980
电话注册能不能注册呢

305
00:15:02,980 --> 00:15:05,210
仍然是可以注册的

306
00:15:05,210 --> 00:15:09,890
它们之间会存在一部分相似的东西而已

307
00:15:09,890 --> 00:15:14,660
而我们的复用率是作为一个框架先行

308
00:15:14,660 --> 00:15:16,360
后面的子用力呢

309
00:15:16,360 --> 00:15:21,200
才是我们实现真正能够执行的过程

310
00:15:21,200 --> 00:15:22,310
那这是呢

311
00:15:22,310 --> 00:15:23,950
泛化关系

312
00:15:23,950 --> 00:15:26,120
最后扩展关系

313
00:15:26,120 --> 00:15:30,120
扩展关系是一个条件选择的过程

314
00:15:30,120 --> 00:15:34,470
那我们的扩展关系也有一个基本用力

315
00:15:34,470 --> 00:15:38,750
而它的箭头指向的过程当中呢

316
00:15:38,750 --> 00:15:40,590
指向的是基本用力

317
00:15:40,590 --> 00:15:43,180
后面呢，是它的扩展用力

318
00:15:43,180 --> 00:15:47,050
扩展用例是满足条件才扩展的

319
00:15:47,050 --> 00:15:50,410
我们的学员在做课程测试的时候

320
00:15:50,410 --> 00:15:53,430
是不是一定要充入学习 B 呢

321
00:15:53,430 --> 00:15:56,000
唉，我里面有钱就不需要啊

322
00:15:56,000 --> 00:15:59,460
所以是余额不足才扩展

323
00:15:59,460 --> 00:16:03,550
我们说呢，它是一种可选的用例关系

324
00:16:03,550 --> 00:16:05,450
如果不满足条件

325
00:16:05,450 --> 00:16:08,420
这一部分是不会执行的

326
00:16:08,420 --> 00:16:09,400
这就是呢

327
00:16:09,400 --> 00:16:12,960
我们说到的用意图的三种关系

328
00:16:12,960 --> 00:16:15,920
类图的关系和用意图的关系

329
00:16:15,920 --> 00:16:17,620
在我们的上午

330
00:16:17,620 --> 00:16:19,640
你都有可能会涉及到

331
00:16:19,640 --> 00:16:22,840
下午题呢，也有可能会用到

332
00:16:22,840 --> 00:16:25,270
我们会利用啊相应的关系

333
00:16:25,270 --> 00:16:27,410
来判断一些用力的位

334
00:16:27,410 --> 00:16:29,490
或者类名的位置

335
00:16:29,490 --> 00:16:32,040
对于我们下午的 EML 建模题

336
00:16:32,040 --> 00:16:34,060
是非常重要的一个呢

337
00:16:34,060 --> 00:16:35,580
理论基础

338
00:16:35,580 --> 00:16:39,270
那我们来看一下关于呢，关

339
00:16:39,270 --> 00:16:42,440
在软件设计师考试真题当中的体现

340
00:16:42,440 --> 00:16:43,910
下面告诉我们呢

341
00:16:43,910 --> 00:16:45,110
UML 图当中

342
00:16:45,110 --> 00:16:47,070
关联是一个结构关系

343
00:16:47,070 --> 00:16:49,170
它描述了一组面

344
00:16:49,170 --> 00:16:52,920
那么两个类之间 A 、 ABCD 4个选项

345
00:16:52,920 --> 00:16:55,040
哪一个说法是正确的

346
00:16:55,040 --> 00:17:00,770
那我们说类与类之间是可以以一条线，诶

347
00:17:00,770 --> 00:17:03,720
单纯的以一组链连接起来的

348
00:17:03,720 --> 00:17:06,109
那这个连接的过程当中呢

349
00:17:06,109 --> 00:17:10,869
我们说关联它可以标注零到多，哎

350
00:17:10,869 --> 00:17:13,650
或者0~1这种多重度

351
00:17:13,650 --> 00:17:17,290
还可以呢，去标注角色

352
00:17:17,359 --> 00:17:19,819
那标注角色之后

353
00:17:19,819 --> 00:17:22,240
我们的类与类之间啊

354
00:17:22,240 --> 00:17:24,900
它是可以有多个关联的

355
00:17:24,900 --> 00:17:27,339
那不能有多个是错误的

356
00:17:27,339 --> 00:17:31,230
诶，那有了相应的多个关联之后

357
00:17:31,230 --> 00:17:34,100
它不是呢，必须合成的

358
00:17:34,100 --> 00:17:35,760
它可以分开来写

359
00:17:35,760 --> 00:17:39,040
而分开来写有什么区别呢

360
00:17:39,040 --> 00:17:41,690
是是不是可以有任意多个啊

361
00:17:41,690 --> 00:17:43,720
并不是任意的

362
00:17:43,720 --> 00:17:49,510
而是呢，通过不同的角色来标识为多个观点

363
00:17:49,510 --> 00:17:50,960
所以这里注意呢

364
00:17:50,960 --> 00:17:52,440
关于两个类之间啊

365
00:17:52,440 --> 00:17:55,120
它们关联呢，是可以有多个的

366
00:17:55,120 --> 00:17:58,100
只是这多个连关联呢

367
00:17:58,100 --> 00:18:01,700
是由不同角色来进行标识的

368
00:18:01,700 --> 00:18:04,180
这是一道呢，纯概念的考察

369
00:18:04,180 --> 00:18:07,920
考察的就是 EML 图当中关联关系
