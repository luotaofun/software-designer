1
00:00:00,000 --> 00:00:03,850
下面我们来看到哈希查找表这个过程

2
00:00:03,850 --> 00:00:06,390
那它的查找过程比较特殊

3
00:00:06,390 --> 00:00:10,380
是先给出构造的过程才能够进行查找

4
00:00:10,380 --> 00:00:12,410
那对于哈希来说的话

5
00:00:12,410 --> 00:00:14,530
我们在信息安全会提到

6
00:00:14,530 --> 00:00:16,480
像我们的摘要算法

7
00:00:16,480 --> 00:00:18,820
其实就是单向散列值函数

8
00:00:18,820 --> 00:00:20,440
也是我们常说的呢

9
00:00:20,440 --> 00:00:23,210
哈希这样的一个呢，函数的过程

10
00:00:23,210 --> 00:00:25,150
针对哈希查找表

11
00:00:25,150 --> 00:00:27,010
我们需要了解它的冲突

12
00:00:27,010 --> 00:00:28,920
以及冲突的解决过程

13
00:00:28,920 --> 00:00:33,090
包括呢，它的构造过程和查找的过程

14
00:00:33,540 --> 00:00:35,560
我们首先看到呢

15
00:00:35,560 --> 00:00:37,100
对于散列表

16
00:00:37,100 --> 00:00:38,810
它就是呢哈希表啊

17
00:00:38,810 --> 00:00:41,690
哈希散列表查找的基本思想啊

18
00:00:41,690 --> 00:00:44,190
就是呢，已知关键字的集合

19
00:00:44,190 --> 00:00:46,200
然后呢，给出一个参数

20
00:00:46,200 --> 00:00:48,820
让它呢以关键字为自变量

21
00:00:48,820 --> 00:00:51,230
从而呢，找到存储的过程

22
00:00:51,230 --> 00:00:54,190
其实这里涉及到了一个什么思想呢

23
00:00:54,190 --> 00:00:57,720
根据存储的内容能够找到它的位置

24
00:00:57,720 --> 00:00:59,320
类似于什么呢

25
00:00:59,320 --> 00:01:00,490
比如说啊

26
00:01:00,490 --> 00:01:03,410
现在西在在长沙要搞一个见面会

27
00:01:03,410 --> 00:01:06,190
那在见面会之前邀请大家过来之

28
00:01:06,190 --> 00:01:07,480
给大家安排宾馆

29
00:01:07,480 --> 00:01:11,220
那我们首先第一种方式安排比较简单诶

30
00:01:11,220 --> 00:01:12,780
一张清单

31
00:01:13,370 --> 00:01:15,890
来，一个人安排一个房间

32
00:01:15,890 --> 00:01:17,510
哪一个人安排房间

33
00:01:17,510 --> 00:01:20,410
那顺次把它记录下来

34
00:01:20,410 --> 00:01:22,840
那我们西夏的学员比较多吧

35
00:01:22,840 --> 00:01:26,190
如果说突然要找某一个学员

36
00:01:26,190 --> 00:01:27,430
他到底住在哪儿

37
00:01:27,430 --> 00:01:29,430
那这就是顺序查找的过程

38
00:01:29,430 --> 00:01:30,130
怎么找啊

39
00:01:30,130 --> 00:01:32,560
唉，找一找是不是在这个位置

40
00:01:32,560 --> 00:01:35,970
相对来说这个比较过程就很麻烦了吧

41
00:01:35,970 --> 00:01:39,450
那如果说用哈希的方式来构造

42
00:01:39,450 --> 00:01:40,410
比如说呢

43
00:01:40,410 --> 00:01:41,690
张三

44
00:01:42,590 --> 00:01:44,390
这是名字吧

45
00:01:44,390 --> 00:01:46,930
我们根据名字的笔画，哎

46
00:01:46,930 --> 00:01:51,530
把它作为因变量来设置最终的存储位置

47
00:01:51,530 --> 00:01:57,620
那它的笔画有一、二、三、四、五、六、七、八

48
00:01:57,620 --> 00:01:58,620
好，我们呢

49
00:01:58,620 --> 00:02:00,800
哎，首先有八画

50
00:02:01,190 --> 00:02:04,370
然后呢，中间没有名字

51
00:02:04,370 --> 00:02:05,310
那就是零

52
00:02:05,310 --> 00:02:06,460
然后三

53
00:02:06,460 --> 00:02:08,389
那作为803

54
00:02:08,389 --> 00:02:09,530
我们就可以呢

55
00:02:09,530 --> 00:02:11,750
通过他的姓名笔

56
00:02:11,750 --> 00:02:14,290
直接找到他的房间分配

57
00:02:14,290 --> 00:02:16,290
那这种情况就叫做呢

58
00:02:16,290 --> 00:02:18,990
按内容存取的过程

59
00:02:18,990 --> 00:02:23,070
那我们针对哈希这样的一个过程当中呢

60
00:02:23,070 --> 00:02:26,410
一般会给出大家相关的函数

61
00:02:26,410 --> 00:02:29,160
让大家呢来进行分析

62
00:02:29,160 --> 00:02:32,430
并不是让大家自己去构造一个呢

63
00:02:32,430 --> 00:02:34,630
唉，什么样的哈希函数啊

64
00:02:34,630 --> 00:02:37,030
那我们下面给大家一个典型的

65
00:02:37,030 --> 00:02:38,870
哈希的构造过程

66
00:02:39,650 --> 00:02:42,050
记录关键码，哎

67
00:02:42,050 --> 00:02:45,350
关键码、关键字指的都是具体的数值

68
00:02:45,350 --> 00:02:49,940
那三、八、十、二、17和九取 M 等于十干嘛的

69
00:02:49,940 --> 00:02:51,980
它是存储空间为十

70
00:02:51,980 --> 00:02:53,420
P 1等于五

71
00:02:53,420 --> 00:02:56,000
这些参数都是已知的

72
00:02:56,000 --> 00:02:59,750
H 等于 K 对 P 来进行取余

73
00:02:59,750 --> 00:03:01,870
百分号表示取

74
00:03:01,870 --> 00:03:04,240
大家对五取余三

75
00:03:04,240 --> 00:03:10,010
对五取余商零、余三、八对五取余生一、余

76
00:03:10,010 --> 00:03:14,510
12、余二、17、余二、九、余四

77
00:03:14,510 --> 00:03:16,880
把余数找出来之后

78
00:03:16,880 --> 00:03:19,240
首先第一个关键字三

79
00:03:19,240 --> 00:03:22,940
它会存放在余数三的位置上

80
00:03:22,940 --> 00:03:25,930
那忽然发现八放在哪儿呢

81
00:03:25,930 --> 00:03:29,370
它应该也放在三的位置上啊

82
00:03:29,370 --> 00:03:32,630
但三的位置已经有数值了

83
00:03:32,630 --> 00:03:36,890
这个时候我们就说它产生了冲突

84
00:03:37,330 --> 00:03:38,980
什么是冲突啊

85
00:03:38,980 --> 00:03:42,200
就是当我们要存的数据已经呢

86
00:03:42,200 --> 00:03:44,060
诶，位置已经被占据了

87
00:03:44,060 --> 00:03:46,580
所以这个过程我们就说呢，冲突了

88
00:03:46,580 --> 00:03:48,330
那冲突怎么办

89
00:03:48,330 --> 00:03:51,880
冲突可以有相应的解决方案

90
00:03:51,880 --> 00:03:56,240
那典型的用到的叫做呢，开放定地执法

91
00:03:56,240 --> 00:03:58,160
那三的位置不能放

92
00:03:58,160 --> 00:04:00,180
我们就放到下一个位置

93
00:04:00,180 --> 00:04:02,940
也就是4号位置上去了

94
00:04:02,940 --> 00:04:05,170
那我们下一个关键字，12

95
00:04:05,170 --> 00:04:07,490
余二放在2号位置上

96
00:04:07,490 --> 00:04:09,090
17，余二的话

97
00:04:09,090 --> 00:04:10,550
哎，这你不能放吧

98
00:04:10,550 --> 00:04:11,990
往下一个位置

99
00:04:11,990 --> 00:04:14,680
直到放下它为止

100
00:04:14,680 --> 00:04:17,300
那九的话，余四，诶

101
00:04:17,300 --> 00:04:18,920
4号位置有数据了

102
00:04:18,920 --> 00:04:22,040
往后面直到放下它为止

103
00:04:22,040 --> 00:04:23,180
这就是呢

104
00:04:23,180 --> 00:04:27,750
利用线性探测法来解决冲突的过程

105
00:04:27,750 --> 00:04:30,810
伪随机数法呢，它也是开放定义值

106
00:04:30,810 --> 00:04:33,230
它会把这个数值啊，换成随机数

107
00:04:33,230 --> 00:04:36,000
相对来说就没有规律了

108
00:04:36,000 --> 00:04:39,440
那我们现在如果说让大家找17在哪

109
00:04:39,440 --> 00:04:40,300
怎么找啊

110
00:04:40,300 --> 00:04:42,260
首先计算余数吧

111
00:04:42,260 --> 00:04:45,360
然后从它二的位置看一看在不在

112
00:04:45,360 --> 00:04:47,940
不再往下来进行探索

113
00:04:47,940 --> 00:04:51,450
这就是呢，哈希或者叫做散列表

114
00:04:51,450 --> 00:04:53,370
它的查找过程

115
00:04:53,370 --> 00:04:57,780
那冲突还有一种解决方案呢，叫做拉链法

116
00:04:57,780 --> 00:05:00,910
它像我们的衣服拉链一样啊

117
00:05:00,910 --> 00:05:05,020
那既然说3号位置上有多个数值

118
00:05:05,020 --> 00:05:07,420
那我就把它作为一个表节点

119
00:05:07,420 --> 00:05:10,060
在后面以列的形式来放置

120
00:05:10,060 --> 00:05:13,500
把三以及八都放进来

121
00:05:13,500 --> 00:05:16,800
那二的位置上，哎，它也有冲突吧

122
00:05:16,800 --> 00:05:20,940
那我们同样用一根链表把它呢连接起来

123
00:05:20,940 --> 00:05:24,610
将我们的12、17都放进去

124
00:05:24,610 --> 00:05:28,680
那九的话就可以直接放在4号位置了吧

125
00:05:28,680 --> 00:05:30,190
这种情况下

126
00:05:30,190 --> 00:05:32,010
如果要找17

127
00:05:32,010 --> 00:05:34,490
我们直接通过2号节点

128
00:05:34,490 --> 00:05:38,200
诶，位置去找链表进行比较就可以了

129
00:05:38,200 --> 00:05:39,750
那冲突的越多

130
00:05:39,750 --> 00:05:42,390
这个构造的链表就会呢越长

131
00:05:42,390 --> 00:05:45,810
这也是呢，解决冲突的一种方式

132
00:05:45,810 --> 00:05:49,080
目前在我们软件设计师考试当中

133
00:05:49,080 --> 00:05:52,440
涉及散列表构造的过程当中呢

134
00:05:52,440 --> 00:05:54,880
会考我查冲突的概念

135
00:05:54,880 --> 00:05:58,370
然后呢，就是具体利用线性探测法

136
00:05:58,370 --> 00:06:00,620
也就是往下一个位置试探

137
00:06:00,620 --> 00:06:02,980
来解决冲突的方案

138
00:06:02,980 --> 00:06:05,620
从而呢，来进行构造

139
00:06:05,620 --> 00:06:10,340
那这就是呢，我们讲到的散列表相关的内容

140
00:06:10,830 --> 00:06:13,470
下面我们来看一下这一部分

141
00:06:13,470 --> 00:06:16,530
在软件设计师考试真题当中的体现

142
00:06:16,530 --> 00:06:20,570
那下面这道题，用哈希表存储元素的时候

143
00:06:20,570 --> 00:06:22,720
需要呢进行冲突处理

144
00:06:22,720 --> 00:06:24,460
冲突指的是什么呢

145
00:06:24,460 --> 00:06:26,840
唉，它指的是 A 选项

146
00:06:26,840 --> 00:06:31,180
关键字被依次映射到地址、编号、连续的存储位置

147
00:06:31,180 --> 00:06:32,340
这个没有冲突吧

148
00:06:32,340 --> 00:06:34,020
这是一个正常的过程

149
00:06:34,020 --> 00:06:36,830
B 选项，关键字不同的元素

150
00:06:36,830 --> 00:06:39,630
唉，被映射到相同的位置了

151
00:06:39,630 --> 00:06:41,050
那我们在这里呢

152
00:06:41,050 --> 00:06:44,020
唉，就说它是产产生了冲突

153
00:06:44,020 --> 00:06:45,940
因为这个位置已经有数据

154
00:06:45,940 --> 00:06:48,660
所以要放到其他位置上去了

155
00:06:48,660 --> 00:06:51,160
C 选项，关键字相同

156
00:06:51,160 --> 00:06:53,890
被映射到不同的存储位置

157
00:06:53,890 --> 00:06:55,960
那一般关键字相同的话

158
00:06:55,960 --> 00:06:57,820
它的位置是相同的

159
00:06:57,820 --> 00:07:02,380
因为位置与关键字是有一定关联的吧

160
00:07:02,380 --> 00:07:04,260
那只有产生冲突

161
00:07:04,260 --> 00:07:05,960
才会呢，有解决方

162
00:07:05,960 --> 00:07:08,900
把它呢往其他的位置上去放置

163
00:07:08,900 --> 00:07:10,430
所以这个描述呢

164
00:07:10,430 --> 00:07:13,220
跟我们的冲突是无关的

165
00:07:13,220 --> 00:07:17,340
D 选项关键字被映射到哈希表之外的位置

166
00:07:17,340 --> 00:07:20,340
这种说法本身就是有错误的

167
00:07:20,340 --> 00:07:23,710
只有 B 选项描述的是冲突

168
00:07:23,710 --> 00:07:26,860
这是呢，对冲突的考察

169
00:07:26,860 --> 00:07:28,970
再来看下面这道题

170
00:07:28,970 --> 00:07:31,130
假设散列函数啊

171
00:07:31,130 --> 00:07:34,170
它是呢用 K 对11来取余

172
00:07:34,170 --> 00:07:36,540
那对于关键序码当中啊

173
00:07:36,540 --> 00:07:37,980
关键码的序列当中

174
00:07:37,980 --> 00:07:40,580
用线性探测法来解决冲突

175
00:07:40,580 --> 00:07:43,230
构造的哈希函数是哪一个呢

176
00:07:43,230 --> 00:07:48,080
唉，首先把所有的这个余数可以记下来

177
00:07:48,080 --> 00:07:50,240
23对11取余

178
00:07:50,240 --> 00:07:51,800
商二、余一

179
00:07:51,800 --> 00:07:52,680
40呢

180
00:07:52,680 --> 00:07:54,960
应该商三、余七、9

181
00:07:54,960 --> 00:07:58,340
商八、余37、余69

182
00:07:58,340 --> 00:08:02,390
余80的话就是呢，余13

183
00:08:02,390 --> 00:08:04,870
11应该是余九

184
00:08:04,870 --> 00:08:08,580
65应该是呃余十

185
00:08:08,580 --> 00:08:12,100
26应该是余四

186
00:08:12,580 --> 00:08:14,560
那我们依次放置

187
00:08:14,560 --> 00:08:18,380
首先23放在一号位置上没有问题

188
00:08:18,380 --> 00:08:22,550
40放在7号位置上没有问题

189
00:08:26,320 --> 00:08:30,420
接下来91放在3号位置上

190
00:08:30,420 --> 00:08:32,480
诶，大家都没有问题

191
00:08:32,480 --> 00:08:35,870
17应该放在6号位置上

192
00:08:35,870 --> 00:08:37,080
唉，没有问题

193
00:08:37,080 --> 00:08:40,760
19应该放在8号位置上

194
00:08:40,760 --> 00:08:44,630
十它应该放在10号位置上吧

195
00:08:44,630 --> 00:08:48,920
所以此时10号位置放的应该是十

196
00:08:48,920 --> 00:08:52,770
我们的 AC 选项都是错误的了

197
00:08:52,770 --> 00:08:58,810
那接下来31应该放在9号位置

198
00:09:02,400 --> 00:09:04,480
65、余十

199
00:09:04,480 --> 00:09:07,520
但10号位置已经有了呀

200
00:09:07,520 --> 00:09:08,820
那怎么办

201
00:09:08,820 --> 00:09:11,720
我们需要往下一个位置来放置

202
00:09:11,720 --> 00:09:14,870
没有了就会呢循环回来

203
00:09:14,870 --> 00:09:19,220
所以这里正确答案应该是 B 选项

204
00:09:19,220 --> 00:09:23,600
65应该呢，返回放在0号位置

205
00:09:23,600 --> 00:09:28,430
而我们这里放到2号位置是没有依据的

206
00:09:28,430 --> 00:09:30,920
所以这里啊，正确的构造过

207
00:09:30,920 --> 00:09:33,700
应该是 B 选项是正确的

208
00:09:33,700 --> 00:09:34,610
哈希表

209
00:09:34,610 --> 00:09:39,650
这道题就是对哈希列表构造过程的考察

210
00:09:39,650 --> 00:09:44,130
用线性探测的方式来解决冲突

211
00:09:44,130 --> 00:09:47,400
那这些呢，就是要求大家掌握的

212
00:09:47,400 --> 00:09:49,780
关于哈希散列

213
00:09:49,780 --> 00:09:52,060
它的冲突和构造过程
