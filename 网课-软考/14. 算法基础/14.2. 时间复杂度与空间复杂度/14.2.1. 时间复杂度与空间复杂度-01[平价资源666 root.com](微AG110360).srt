1
00:00:00,000 --> 00:00:01,800
接下来我们简单看一下

2
00:00:01,800 --> 00:00:05,170
时间复杂度与空间复杂度这一部分

3
00:00:05,170 --> 00:00:07,510
时间复杂度与空间复杂度

4
00:00:07,510 --> 00:00:09,590
在上午题经常会出现

5
00:00:09,590 --> 00:00:13,160
下午题也经常作为一个填空来出现

6
00:00:13,160 --> 00:00:15,800
但是我们经常说对时间复杂度

7
00:00:15,800 --> 00:00:17,880
空间复杂度来进行分析

8
00:00:17,880 --> 00:00:19,760
而并不是计算

9
00:00:19,760 --> 00:00:21,800
所以很多同学啊，都会问啊

10
00:00:21,800 --> 00:00:24,010
时间复杂度到底怎么来算的

11
00:00:24,010 --> 00:00:26,540
其实没有要求大家去算啊

12
00:00:26,540 --> 00:00:30,120
它是通过一些规律分析得出来的

13
00:00:30,120 --> 00:00:32,759
那什么是时间复杂度呢

14
00:00:32,759 --> 00:00:38,280
时间复杂度它是指程序运行上的时间效率

15
00:00:38,280 --> 00:00:42,800
那它的统计呢，是按照某一个基本运算

16
00:00:42,800 --> 00:00:45,680
重复次数来进行统计的

17
00:00:45,680 --> 00:00:49,080
诶，某一个语句它是比较能通用的

18
00:00:49,080 --> 00:00:50,830
或者说比较基本的运算

19
00:00:50,830 --> 00:00:53,720
那在整个程序执行过程当中

20
00:00:53,720 --> 00:00:55,860
它的成重复次数啊

21
00:00:55,860 --> 00:00:58,020
就是我们的时间复杂度

22
00:00:58,020 --> 00:00:59,270
那这样来看的话

23
00:00:59,270 --> 00:01:02,720
我们去分析是不是分析一次、两次、三次，唉

24
00:01:02,720 --> 00:01:04,400
相对来说比较抽象

25
00:01:04,400 --> 00:01:05,840
那我们在这里呢

26
00:01:05,840 --> 00:01:09,280
会以啊，一些分析规模的形式

27
00:01:09,280 --> 00:01:10,450
带大家来看

28
00:01:10,450 --> 00:01:13,960
由于啊，我们在算法分析的过程当中

29
00:01:13,960 --> 00:01:18,670
它最终呢是分析时间上的一个规模

30
00:01:18,670 --> 00:01:20,840
而这种规模的话

31
00:01:20,840 --> 00:01:23,370
对于一些细枝，哎

32
00:01:23,370 --> 00:01:25,730
我们就把它忽略不计了

33
00:01:25,730 --> 00:01:28,870
那我们在这里经常会用 tn 

34
00:01:28,870 --> 00:01:31,430
来表示一个时间函数

35
00:01:31,430 --> 00:01:35,000
那针对这种时间函数来看的话

36
00:01:35,000 --> 00:01:38,910
我们会只以最大的时间量级为准

37
00:01:38,910 --> 00:01:44,220
其他较小量级就不再纳入在量级当中去了

38
00:01:44,220 --> 00:01:47,970
包括系数部分也会呢，忽略不计

39
00:01:47,970 --> 00:01:53,710
那这种时间量级的写法其实包含多种诶

40
00:01:53,710 --> 00:01:55,790
它有呢欧姆、大欧

41
00:01:55,790 --> 00:01:57,790
还有这种的符号表示

42
00:01:57,790 --> 00:02:01,050
它所表示的分别是渐进上界

43
00:02:01,050 --> 00:02:02,650
渐进界以及呢

44
00:02:02,650 --> 00:02:03,790
渐进下界

45
00:02:03,790 --> 00:02:07,080
但是对于我们软件设计师考试来说

46
00:02:07,080 --> 00:02:09,460
其实这这三个符号

47
00:02:09,460 --> 00:02:13,200
最终表示的都理解为了大 O 唉

48
00:02:13,200 --> 00:02:16,360
作为时间量级的渐进分析

49
00:02:16,360 --> 00:02:19,420
那我们在渐进分析的时候

50
00:02:19,420 --> 00:02:22,410
只会保留其中的最大规模

51
00:02:22,410 --> 00:02:24,490
那我怎么知道哪些规模大

52
00:02:24,490 --> 00:02:25,750
哪些规模小啊

53
00:02:25,750 --> 00:02:30,300
所以我们将时间规模给大家呢，做了汇总

54
00:02:30,300 --> 00:02:31,890
那汇总之后

55
00:02:31,890 --> 00:02:35,050
这一个不等式是需要大家记住的

56
00:02:35,050 --> 00:02:36,930
哪些规模较大

57
00:02:36,930 --> 00:02:38,840
哪些规模较小

58
00:02:38,840 --> 00:02:41,040
那在这些规模当中

59
00:02:41,040 --> 00:02:42,480
我们会看到

60
00:02:42,480 --> 00:02:47,000
比较典型的是 NN 平方以及 N 的三次方

61
00:02:47,000 --> 00:02:51,510
在这中间比较特殊的有 log 2 N 和 N 倍

62
00:02:51,510 --> 00:02:52,530
log 2n 

63
00:02:52,530 --> 00:02:54,880
我们一般认为这个量级啊

64
00:02:54,880 --> 00:02:57,260
是小于大 O 级的 N 的啊

65
00:02:57,260 --> 00:03:01,180
那 N 乘以这个量级就会呢小于 N 平方

66
00:03:01,180 --> 00:03:02,610
最后还有呢

67
00:03:02,610 --> 00:03:03,990
唉，大 O 级的一

68
00:03:03,990 --> 00:03:06,000
我们称之为常量级

69
00:03:06,000 --> 00:03:07,420
二的 N 次方呢

70
00:03:07,420 --> 00:03:11,970
是目前我们给出来最大的一个时间量级

71
00:03:11,970 --> 00:03:13,830
那我们在这里呀

72
00:03:13,830 --> 00:03:17,810
这里大 O 级的一叫做常量级

73
00:03:18,000 --> 00:03:20,180
它是一个常数

74
00:03:20,180 --> 00:03:24,480
而大 O 级的 N 我们叫做呢线性

75
00:03:26,140 --> 00:03:29,490
它在图示当中就是呢，一条线

76
00:03:29,490 --> 00:03:31,550
所以叫做呢线性关系

77
00:03:31,550 --> 00:03:34,720
常量级呢，唉，它是一条水平线

78
00:03:34,720 --> 00:03:35,720
那这是呢

79
00:03:35,720 --> 00:03:38,200
关于时间量级的一些说法

80
00:03:38,200 --> 00:03:40,340
我们详细的后面啊

81
00:03:40,340 --> 00:03:42,380
会给大家介绍各个规模

82
00:03:42,380 --> 00:03:43,400
它的特点

83
00:03:43,400 --> 00:03:47,040
方便大家呢，根据特点来进行分析

84
00:03:47,040 --> 00:03:49,560
那我们还有一个效率呢

85
00:03:49,560 --> 00:03:51,540
叫做空间复杂度

86
00:03:51,540 --> 00:03:56,120
空间复杂度是我们算法的空间效率

87
00:03:56,310 --> 00:03:59,030
那针对空间来看的话

88
00:03:59,030 --> 00:04:02,290
空间复杂度表示的是临时占用的

89
00:04:02,290 --> 00:04:03,600
存储空间大小

90
00:04:03,600 --> 00:04:06,040
那这种情况我们一般啊

91
00:04:06,040 --> 00:04:09,450
只考虑局部变量的分配就可以了啊

92
00:04:09,450 --> 00:04:12,270
那尤其在函数调用的过程当中

93
00:04:12,270 --> 00:04:14,730
唉，我们比如说后面讲排序的时候

94
00:04:14,730 --> 00:04:15,890
经常有同学说

95
00:04:15,890 --> 00:04:18,470
唉，我们对 A 这个数组排序

96
00:04:18,470 --> 00:04:21,230
为什么时间复杂度不是它的长度

97
00:04:21,230 --> 00:04:23,080
而是一就可以了呢

98
00:04:23,080 --> 00:04:26,020
因为这是我们传递的全局变量吧

99
00:04:26,020 --> 00:04:28,840
它不是临时占用存储空间

100
00:04:28,840 --> 00:04:31,390
而是必须一直都有的

101
00:04:31,390 --> 00:04:35,890
而这个一呢，是我们分配了一个 temp 临时空间

102
00:04:35,890 --> 00:04:38,960
拿来做数据交换的这种变量呢

103
00:04:38,960 --> 00:04:40,540
才叫做局部变量

104
00:04:40,540 --> 00:04:44,190
才是我们分析的空间复杂度的大小

105
00:04:44,190 --> 00:04:47,280
那这种数据啊，我们呢

106
00:04:47,280 --> 00:04:50,630
唉，注意有同学经常会问到

107
00:04:50,630 --> 00:04:52,070
如何来判断

108
00:04:52,070 --> 00:04:56,330
我们把这种空间也叫做辅助空间

109
00:05:00,780 --> 00:05:03,840
当我们在原有的参数之外

110
00:05:03,840 --> 00:05:07,280
引入了新的一些帮助计算的参数

111
00:05:07,280 --> 00:05:11,070
这些呢，都可以理解为辅助空间

112
00:05:11,070 --> 00:05:12,860
哎，这样的一些辅助变量

113
00:05:12,860 --> 00:05:16,820
可以呢，注意一下到底给的是元素还是给的，哎

114
00:05:16,820 --> 00:05:19,590
一个长度为 N 的数组

115
00:05:19,590 --> 00:05:22,850
那我们有很多同学会疑问，诶

116
00:05:22,850 --> 00:05:23,790
时间复杂度

117
00:05:23,790 --> 00:05:25,870
空间复杂度如何来求

118
00:05:25,870 --> 00:05:29,380
我们首先在考试当中要明确一个问题

119
00:05:29,380 --> 00:05:33,170
考试当中考察最多的空间复杂度

120
00:05:33,170 --> 00:05:35,350
是结合排序来考的

121
00:05:35,350 --> 00:05:39,310
而所有在考试当中出现的排序算法呀

122
00:05:39,310 --> 00:05:43,000
我们呢，唉，统计了历年的考察情况

123
00:05:43,000 --> 00:05:46,200
将它的空间复杂度列成了表格

124
00:05:46,200 --> 00:05:48,070
让大家去进行记忆

125
00:05:48,070 --> 00:05:52,040
在后面的排序算法当中会教给大家

126
00:05:52,040 --> 00:05:53,850
而时间复杂度

127
00:05:53,850 --> 00:05:57,570
它的考察一方面是结合排序算法

128
00:05:57,570 --> 00:05:59,560
同样呢，我们有表格

129
00:05:59,560 --> 00:06:03,790
其次呢，还有可能结合问题分析

130
00:06:03,790 --> 00:06:07,370
那这种情况我们就可以结合代码规模

131
00:06:07,370 --> 00:06:11,430
或者呢，诶，它的应用情景来进行判断了

132
00:06:11,430 --> 00:06:15,220
那我们详细来看一下时间复杂度的部分

133
00:06:15,220 --> 00:06:17,630
时间复杂度大 O 级的一

134
00:06:17,630 --> 00:06:20,490
我们叫做呢，常量级的时间复杂度

135
00:06:20,490 --> 00:06:22,610
那常量级时间复杂

136
00:06:22,610 --> 00:06:25,610
它一般呢是单个语句的形

137
00:06:25,610 --> 00:06:28,830
或者顺序语句的形式

138
00:06:29,120 --> 00:06:32,490
那我们针对这个程序来划分的话

139
00:06:32,490 --> 00:06:34,380
它其实有三个部分吧

140
00:06:34,380 --> 00:06:36,080
那首先，三个部

141
00:06:36,080 --> 00:06:39,130
它的时间复杂度都是一个常量级

142
00:06:39,130 --> 00:06:43,740
而这种常量级选择最大的一个作为我们的，诶

143
00:06:43,740 --> 00:06:47,760
整体的时间复杂度量级其实就可以了

144
00:06:47,760 --> 00:06:50,780
包括如果有多个程序部分的话

145
00:06:50,780 --> 00:06:54,320
我们把每一个部分的最大量级进行分析

146
00:06:54,320 --> 00:06:58,540
保留最大规模就是我们最终的时间复杂度

147
00:06:58,540 --> 00:07:01,070
这是最小的时间复杂度

148
00:07:01,070 --> 00:07:05,860
其次再来看呢， NN 平方以及 N 的三次方

149
00:07:05,860 --> 00:07:07,730
大 O 级的 N 啊

150
00:07:07,730 --> 00:07:12,750
它指的是某一个语句重复执行了 N 次

151
00:07:12,750 --> 00:07:15,720
那这里面我们会发现，诶

152
00:07:15,720 --> 00:07:17,980
这个语句的时间复杂度是一

153
00:07:17,980 --> 00:07:19,560
这个语句是一吧

154
00:07:19,560 --> 00:07:22,340
下面有一个 for 循环的整体

155
00:07:22,340 --> 00:07:27,980
会将中间的循环体部分重复执行零到 N 减一

156
00:07:27,980 --> 00:07:30,750
也就是重复执行 N 次

157
00:07:30,750 --> 00:07:34,210
这种 N 次就是它的时间复杂度

158
00:07:34,210 --> 00:07:35,790
大 O 级的 N 

159
00:07:35,790 --> 00:07:38,510
所以涉及单层循环

160
00:07:38,510 --> 00:07:40,310
它的变量范围

161
00:07:40,310 --> 00:07:42,190
如果是 N 时间量

162
00:07:42,190 --> 00:07:43,580
就是大 O 级的 N 

163
00:07:43,580 --> 00:07:46,970
M 的话也可以写作大 O 级的 M 

164
00:07:46,970 --> 00:07:49,330
可以根据变量来看

165
00:07:49,330 --> 00:07:52,410
那注意，如果是 N 减一的话是多少

166
00:07:52,410 --> 00:07:54,490
会不会是大 O 几 N 减一

167
00:07:54,490 --> 00:07:55,430
不会啊

168
00:07:55,430 --> 00:07:59,510
我们会直接保留最大的量级 N 

169
00:07:59,510 --> 00:08:04,710
那再来看与它类似的 N 平方是什么情况呢

170
00:08:04,710 --> 00:08:08,500
哎，它是执行了 N 乘以 N 

171
00:08:08,500 --> 00:08:10,330
某一个基础运算法

172
00:08:10,330 --> 00:08:13,720
那我们会发现在这个函数当中

173
00:08:13,720 --> 00:08:15,520
首先顺序语

174
00:08:15,520 --> 00:08:18,350
它的时间量级是常量级的

175
00:08:18,350 --> 00:08:20,030
for 循环当

176
00:08:20,030 --> 00:08:24,100
由于存在两个嵌套 for 循环

177
00:08:24,100 --> 00:08:28,350
所以这个语句的执行次数啊，会有呢

178
00:08:28,350 --> 00:08:30,370
哎，一到 N 次

179
00:08:30,420 --> 00:08:32,480
一到 N 减一

180
00:08:32,480 --> 00:08:34,120
然后呢，唉

181
00:08:34,120 --> 00:08:38,700
内层和外层重复执行一到 N 减一次

182
00:08:38,700 --> 00:08:44,240
所以总数是 N 减一乘以 N 减一的平方

183
00:08:44,240 --> 00:08:46,350
那这个过程当中

184
00:08:46,350 --> 00:08:51,210
它的时间量级其实就是大 O 级的 N 平方

185
00:08:51,210 --> 00:08:54,900
因为减一的地方已经被忽略不计了

186
00:08:54,900 --> 00:08:57,040
它是类似于极限值

187
00:08:57,040 --> 00:08:59,020
当 N 无穷大的时候

188
00:08:59,020 --> 00:09:02,720
常数和较小规模都会呢被忽略

189
00:09:02,720 --> 00:09:03,930
那注意啊

190
00:09:03,930 --> 00:09:09,890
如果是两个单纯的 for 循环平行结构的话

191
00:09:09,890 --> 00:09:14,960
那此时它的时间复杂度是 N 加上 N 

192
00:09:14,960 --> 00:09:17,510
那保留一个就可以了吧

193
00:09:17,510 --> 00:09:20,850
时间量级就是大 O 级的 N 

194
00:09:20,850 --> 00:09:25,690
而 N 平方一定是嵌套循环

195
00:09:28,000 --> 00:09:31,280
没有嵌套平行的情况

196
00:09:31,280 --> 00:09:33,700
是不会有 N 平方的

197
00:09:33,700 --> 00:09:35,340
那以此类推

198
00:09:35,340 --> 00:09:37,920
大 O 级 N 的三次方

199
00:09:37,920 --> 00:09:39,420
它就应该是呢

200
00:09:39,420 --> 00:09:41,710
三层嵌套循环

201
00:09:41,710 --> 00:09:43,950
如果有四层的话

202
00:09:43,950 --> 00:09:45,890
大家可以想一想是多少啊

203
00:09:45,890 --> 00:09:49,250
就会有大 O 奇 N 的四次方法

204
00:09:49,250 --> 00:09:50,610
所以这里啊

205
00:09:50,610 --> 00:09:56,010
N 的 K 次方与循环嵌套的层数有关系

206
00:09:56,270 --> 00:10:00,570
那如果这其中有一个参数改成 M 

207
00:10:00,570 --> 00:10:04,870
我们也可以写作大 O 级的 M 乘以 N 

208
00:10:04,870 --> 00:10:09,230
这两种在量级上其实是没有太大区别的

209
00:10:09,230 --> 00:10:11,590
但是结合实例来看的话

210
00:10:11,590 --> 00:10:15,190
这种写法会更贴合实力一些

211
00:10:15,190 --> 00:10:17,940
了解呢，有这样的一些区别

212
00:10:17,940 --> 00:10:19,000
那这是呢

213
00:10:19,000 --> 00:10:22,730
NN 平方以及 N 的三次方规模

214
00:10:22,730 --> 00:10:26,030
我们再来看 log 2 N 的规模

215
00:10:26,030 --> 00:10:27,950
log 2 N 是什么呢

216
00:10:27,950 --> 00:10:32,710
唉，我们说二的 X 次方等于 N 的情况下

217
00:10:32,710 --> 00:10:35,110
X 就是以二为底

218
00:10:35,110 --> 00:10:36,380
N 的对数

219
00:10:36,380 --> 00:10:40,900
并且对于这个参数我们还可以写作

220
00:10:40,900 --> 00:10:43,710
log n a logan 

221
00:10:43,710 --> 00:10:46,710
虽然从数学的角度来看

222
00:10:46,710 --> 00:10:49,820
这三个参数其实是不一样、不相等的

223
00:10:49,820 --> 00:10:53,050
但是在我们软考当中出现的时间

224
00:10:53,050 --> 00:10:54,530
复杂度来看的话

225
00:10:54,530 --> 00:10:59,240
也是把它们当作等同的意义来进行分析的

226
00:10:59,240 --> 00:11:04,250
那我们说 log 2 N 一般出现在什么情况呢

227
00:11:04,250 --> 00:11:06,380
对于 N 个节点

228
00:11:06,380 --> 00:11:12,200
我们要把它构造成一棵完全二叉树

229
00:11:13,400 --> 00:11:18,350
那这棵树的高度就是呢， log 2 N 

230
00:11:18,350 --> 00:11:21,220
所以我们在这里的时候会发现

231
00:11:21,220 --> 00:11:25,340
log 2 N 一般会与树形结构来综合使用

232
00:11:25,340 --> 00:11:29,380
并且的话，二的 X 次方等于 N 的情况

233
00:11:29,380 --> 00:11:30,860
才有 log 2 N 吧

234
00:11:30,860 --> 00:11:35,600
所以它是多个二相乘等于 N 

235
00:11:35,600 --> 00:11:39,110
这种情况相乘多少次

236
00:11:39,110 --> 00:11:41,470
与我们二分的思想呢

237
00:11:41,470 --> 00:11:43,480
也是比较贴近的

238
00:11:43,480 --> 00:11:48,070
所以它一般会用在二分的思想当中

239
00:11:48,070 --> 00:11:51,130
以及树形结构当中

240
00:11:51,130 --> 00:11:55,210
那下面给了一个二分查找的函数

241
00:11:55,210 --> 00:11:57,070
这个函数里面啊

242
00:11:57,070 --> 00:11:58,690
给了我们一个数组

243
00:11:58,690 --> 00:12:00,250
a r r y 

244
00:12:00,250 --> 00:12:03,330
针对这个数组定义了指针

245
00:12:03,330 --> 00:12:06,520
左侧指针和右侧指针

246
00:12:06,520 --> 00:12:08,600
那左侧是等于零的

247
00:12:08,600 --> 00:12:10,560
右侧呢是 N 减一的

248
00:12:10,560 --> 00:12:12,500
这个长度是等于 N 的

249
00:12:12,500 --> 00:12:17,530
那当我们的左侧小于等于 right 右侧的时候

250
00:12:17,530 --> 00:12:21,250
此时诶，我们说这个指针是没有偏移的

251
00:12:21,250 --> 00:12:26,290
那我们查找的时候会找中间节点是谁呢

252
00:12:26,290 --> 00:12:30,180
唉，二分之左指针加右指针

253
00:12:30,180 --> 00:12:34,000
并且这个除号本身就是向下取整的

254
00:12:34,000 --> 00:12:36,620
我们后面讲二分查找的时

255
00:12:36,620 --> 00:12:39,660
还会呢，提到这样的查找过程

256
00:12:39,660 --> 00:12:45,510
那我们在一个元素当中要找元素 V 的话

257
00:12:45,510 --> 00:12:47,190
与 V 进行比较

258
00:12:47,190 --> 00:12:50,710
如如果 V 比这个数值要小

259
00:12:50,710 --> 00:12:53,000
它就位于左侧区域

260
00:12:53,000 --> 00:12:54,000
那我们呢

261
00:12:54,000 --> 00:12:55,920
唉，把右侧忽略掉

262
00:12:55,920 --> 00:12:58,620
我们左侧区域当中

263
00:12:58,620 --> 00:13:02,210
上限指针变成了 mid 减一

264
00:13:02,210 --> 00:13:05,010
否则的话在右侧区域

265
00:13:05,010 --> 00:13:10,000
那我们呢，会修改下限指针等于 MID 加一

266
00:13:10,000 --> 00:13:12,300
如果两个条件都不满足

267
00:13:12,300 --> 00:13:13,080
说明什么

268
00:13:13,080 --> 00:13:14,340
说明相等

269
00:13:14,340 --> 00:13:19,400
那此时我们要找的就是中间指针的位置

270
00:13:19,400 --> 00:13:21,270
那不断二分

271
00:13:21,270 --> 00:13:24,310
直到两个指针相等

272
00:13:24,310 --> 00:13:26,810
那我们在这个过程当中，诶

273
00:13:26,810 --> 00:13:29,710
当它满足小于等于的时候

274
00:13:29,710 --> 00:13:32,550
会执行二者不相等的情况下

275
00:13:32,550 --> 00:13:34,050
诶，我们说错位了

276
00:13:34,050 --> 00:13:36,580
说明已经比较完成了

277
00:13:36,580 --> 00:13:39,580
都没有找到就返回一了

278
00:13:39,580 --> 00:13:40,920
那这就是一个呢

279
00:13:40,920 --> 00:13:43,460
二分查找的基本过程

280
00:13:43,460 --> 00:13:48,680
它的查找与构造完全二叉树作为排序

281
00:13:48,680 --> 00:13:51,760
二叉树的过程是一模一样的

282
00:13:51,760 --> 00:13:54,870
比较的次数就是它的层数

283
00:13:54,870 --> 00:13:56,550
也就是高度

284
00:13:56,550 --> 00:14:00,040
那这里呢，时间复杂度就是 log 2 N 

285
00:14:00,040 --> 00:14:03,620
看到二分的思想和树形结构的时候

286
00:14:03,620 --> 00:14:07,020
一般时间复杂度就是 log 2 N 

287
00:14:07,020 --> 00:14:09,150
还有一个区别是什么呢

288
00:14:09,150 --> 00:14:11,670
如果外层有循环的话

289
00:14:11,670 --> 00:14:14,340
可能就是 N 倍 log 2 N 呢

290
00:14:14,340 --> 00:14:15,300
那这是呢

291
00:14:15,300 --> 00:14:18,560
涉及到的 log n 的时间复杂度
