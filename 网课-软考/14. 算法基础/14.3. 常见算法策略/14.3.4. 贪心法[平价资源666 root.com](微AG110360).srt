1
00:00:00,000 --> 00:00:03,410
下面我们看到贪心法的算法策略

2
00:00:03,410 --> 00:00:04,680
贪心法呢

3
00:00:04,680 --> 00:00:06,380
他所谓的贪心啊

4
00:00:06,380 --> 00:00:07,720
就是只看眼前

5
00:00:07,720 --> 00:00:09,250
不顾长远的利益

6
00:00:09,250 --> 00:00:10,710
所以这种贪心呢

7
00:00:10,710 --> 00:00:13,110
它是没有纵观全局的

8
00:00:13,110 --> 00:00:15,570
只是呢，在当前去考虑

9
00:00:15,570 --> 00:00:17,090
那贪心法的话

10
00:00:17,090 --> 00:00:20,900
它相对来说与我们的动态规划法

11
00:00:20,900 --> 00:00:22,280
有一个相似点啊

12
00:00:22,280 --> 00:00:23,740
因为我们说贪心法

13
00:00:23,740 --> 00:00:25,960
它的这种问题也可以说呢

14
00:00:25,960 --> 00:00:27,260
具有最优子结构

15
00:00:27,260 --> 00:00:28,800
所以我们在这里啊

16
00:00:28,800 --> 00:00:30,260
与动态规划

17
00:00:30,260 --> 00:00:33,520
更多的会从呢，递归式来进行区分

18
00:00:33,520 --> 00:00:36,130
那根据贪心法来看的话

19
00:00:36,130 --> 00:00:38,670
他会啊，选择当前最好

20
00:00:38,670 --> 00:00:41,250
而不是从整体加以考虑

21
00:00:41,250 --> 00:00:44,660
那每一步要考虑局部最优的时候

22
00:00:44,660 --> 00:00:47,200
这种局部最优的选择啊

23
00:00:47,200 --> 00:00:49,630
其实会有一定的判断的策略

24
00:00:49,630 --> 00:00:52,200
整体来说呢，不一定是最优的

25
00:00:52,200 --> 00:00:56,010
在考试当中出现贪心法的下午题考察

26
00:00:56,010 --> 00:00:57,500
一般代码填空呢

27
00:00:57,500 --> 00:01:01,120
就有可能会出现局部最优的判断条件

28
00:01:01,120 --> 00:01:02,950
需要大家呢去填

29
00:01:02,950 --> 00:01:06,060
那我们在这里呢，一般认为啊

30
00:01:06,060 --> 00:01:09,380
求最优解它是比较费时的

31
00:01:09,380 --> 00:01:12,800
而贪心法它相对来说不费时

32
00:01:12,800 --> 00:01:13,820
可以呢

33
00:01:13,820 --> 00:01:16,380
唉，用我们的这种思维啊

34
00:01:16,380 --> 00:01:18,230
去快速的解决问题

35
00:01:18,230 --> 00:01:20,200
所以它耗费时间少

36
00:01:20,200 --> 00:01:21,500
求得比较快

37
00:01:21,500 --> 00:01:24,270
但是答案呢，可能不是最好的

38
00:01:24,270 --> 00:01:26,510
但可以是满意的

39
00:01:26,510 --> 00:01:29,790
这是呢，谈心法它的一个特点

40
00:01:29,880 --> 00:01:31,720
那针对贪心法

41
00:01:31,720 --> 00:01:33,970
我们一般说他求的是满意解

42
00:01:33,970 --> 00:01:39,550
在某些特殊条件下也可以呢，作为最优解

43
00:01:39,550 --> 00:01:43,140
那我们一般在考虑一些复杂问题的时候

44
00:01:43,140 --> 00:01:45,690
也经常会用贪心策略来解决

45
00:01:45,690 --> 00:01:47,940
尤其像一些运筹学啊

46
00:01:47,940 --> 00:01:49,520
数学问题当中

47
00:01:49,520 --> 00:01:51,360
当问题很复杂

48
00:01:51,360 --> 00:01:53,560
我们需要暴力求解的时候

49
00:01:53,560 --> 00:01:56,560
就会选择呢，先用贪心的策

50
00:01:56,560 --> 00:01:59,910
把稍微呢满意解给它列出来

51
00:01:59,910 --> 00:02:02,120
满意解列出来之后啊

52
00:02:02,120 --> 00:02:05,200
再根据一些条件去动态调整

53
00:02:05,200 --> 00:02:07,880
就是属于呢，综合分析的过程呢

54
00:02:07,880 --> 00:02:11,060
我们前面讲到的数据结构当中啊

55
00:02:11,060 --> 00:02:15,680
图当中它的最小路、最短路径、最小生成树的解决

56
00:02:15,680 --> 00:02:19,060
用到的都是贪心的算法策略

57
00:02:19,060 --> 00:02:20,570
那我们下面呢

58
00:02:20,570 --> 00:02:22,570
经常看到的典型问

59
00:02:22,570 --> 00:02:23,490
就是背包问题

60
00:02:23,490 --> 00:02:26,780
下面呢，简单给大家解释一下背包问题

61
00:02:26,780 --> 00:02:31,340
那背包问题呢，给了一个背包容量是70

62
00:02:31,340 --> 00:02:33,890
而我们需要把物品一、二、三

63
00:02:33,890 --> 00:02:36,320
全都放到背包当中去

64
00:02:36,320 --> 00:02:39,570
它们的价格和容量呢

65
00:02:39,570 --> 00:02:43,250
哎，它们的体积分别给大家标出来了

66
00:02:43,410 --> 00:02:46,630
那我们在一个背包里装东西的时候

67
00:02:46,630 --> 00:02:47,750
我们会怎么想呢

68
00:02:47,750 --> 00:02:51,560
哎，一般是想着当前固定的空间大小

69
00:02:51,560 --> 00:02:54,510
里面放的东西越值钱越好吧

70
00:02:54,510 --> 00:02:56,930
所以我们在考虑这类问题的时候

71
00:02:56,930 --> 00:03:00,070
通常会从它的单位价值来考虑

72
00:03:00,070 --> 00:03:04,630
物品一的单位价值是七、26、35

73
00:03:04,630 --> 00:03:06,920
那我们在放置的时候

74
00:03:06,920 --> 00:03:09,720
优先放单位价值最大的

75
00:03:09,720 --> 00:03:13,630
所以会把物品一先放到背包当中去

76
00:03:13,630 --> 00:03:16,580
然后呢，放其次大小的，诶

77
00:03:16,580 --> 00:03:18,180
就是呢，物品二吧

78
00:03:18,180 --> 00:03:19,580
那放了之后

79
00:03:19,580 --> 00:03:22,620
对于零一背包来看的话

80
00:03:22,620 --> 00:03:26,290
这个物品是不能进行切割的

81
00:03:26,290 --> 00:03:30,170
所以接下来物品三放置失败

82
00:03:30,170 --> 00:03:34,660
那我们放置失败之后得到的答案就是呢

83
00:03:34,660 --> 00:03:37,080
唉，只放了两个物品吧

84
00:03:37,080 --> 00:03:39,580
它的价值只有320

85
00:03:39,580 --> 00:03:42,040
那这是不是最优的方案啊

86
00:03:42,040 --> 00:03:43,220
显然不是

87
00:03:43,220 --> 00:03:46,320
我们可以选择放物品二和三

88
00:03:46,320 --> 00:03:49,420
可以得到380更好一些吧

89
00:03:49,420 --> 00:03:51,270
所以这种情况下

90
00:03:51,270 --> 00:03:55,650
零一背包我们的贪心法得到的是满意解

91
00:03:55,650 --> 00:03:58,500
而不是最优解了

92
00:03:58,500 --> 00:04:00,640
那还有一类背包呢

93
00:04:00,640 --> 00:04:03,800
叫做部分背包啊

94
00:04:04,080 --> 00:04:07,140
部分背包呢，就是物品呀

95
00:04:07,140 --> 00:04:09,000
可以只放一部分

96
00:04:09,000 --> 00:04:12,400
而不是呢，要求必须全放的

97
00:04:12,400 --> 00:04:13,860
那我们优先呢

98
00:04:13,860 --> 00:04:17,440
把单位价值最大的一和二放进去之后

99
00:04:17,440 --> 00:04:19,880
物品三放不下怎么办呢

100
00:04:19,880 --> 00:04:23,050
哎，当前最大的是物品三吧

101
00:04:23,050 --> 00:04:25,710
把他的物品切割一下

102
00:04:25,710 --> 00:04:27,630
放下多少是多少

103
00:04:27,630 --> 00:04:28,900
所以放了20

104
00:04:28,900 --> 00:04:30,300
这种情况下

105
00:04:30,300 --> 00:04:35,080
他得出来的结果本身就是最优解了

106
00:04:35,620 --> 00:04:38,620
所以在部分背包当中啊

107
00:04:38,620 --> 00:04:41,940
利用贪心法也能得到最优解

108
00:04:41,940 --> 00:04:43,680
这样的一些情况的话

109
00:04:43,680 --> 00:04:45,100
他是要求啊

110
00:04:45,100 --> 00:04:47,250
首先问题具有最优子结构

111
00:04:47,250 --> 00:04:48,890
其次具有贪心性质

112
00:04:48,890 --> 00:04:50,520
所以很难去辨别

113
00:04:50,520 --> 00:04:54,170
我们只要了解到部分背包能够这样去求

114
00:04:54,170 --> 00:04:55,430
就足够了

115
00:04:55,430 --> 00:04:57,570
那其他的方法当中

116
00:04:57,570 --> 00:05:02,740
可以先用贪心法来找到相对比较好的方案

117
00:05:02,740 --> 00:05:05,740
再来呢，在此基础上进行调整

118
00:05:05,740 --> 00:05:07,200
也是呢，可以的

119
00:05:07,200 --> 00:05:09,120
这就是呢，贪心法

120
00:05:09,120 --> 00:05:11,770
接下来我们看一下这一部分

121
00:05:11,770 --> 00:05:15,310
在软件设计师考试真题当中的体现

122
00:05:15,310 --> 00:05:17,250
先来看下面这道题

123
00:05:17,250 --> 00:05:19,060
采用贪心算法

124
00:05:19,060 --> 00:05:22,820
保证能求得最优解的问题是谁

125
00:05:22,820 --> 00:05:24,700
那我们在这里呢

126
00:05:24,700 --> 00:05:30,040
用矩阵链乘和最大最长公共子序列问题啊

127
00:05:30,040 --> 00:05:31,940
我们一般用的都是呢

128
00:05:31,940 --> 00:05:34,150
呃，动态规划法来进行求解

129
00:05:34,150 --> 00:05:36,610
最优解的零一背包问题

130
00:05:36,610 --> 00:05:39,930
也可以用动态规划法来求最优解

131
00:05:39,930 --> 00:05:42,350
而其中部分背包问题

132
00:05:42,350 --> 00:05:44,170
或者叫做分数背包问题

133
00:05:44,170 --> 00:05:45,790
也就是说这个物品啊

134
00:05:45,790 --> 00:05:47,770
可以切割之后再放置

135
00:05:47,770 --> 00:05:51,850
如果利用贪心的算法策略来分析的话

136
00:05:51,850 --> 00:05:55,390
最终也是能够得到最优解的

137
00:05:55,390 --> 00:05:58,300
这个特殊点呢，大家了解一下

138
00:05:58,300 --> 00:06:01,720
这是对贪心法它的一个特点考察

139
00:06:01,720 --> 00:06:04,150
再来看下面这道题

140
00:06:04,150 --> 00:06:09,880
需现要需要申请一些场地来举办一批活动

141
00:06:09,880 --> 00:06:13,720
每个活动啊，都有它的开始和结束时间

142
00:06:13,720 --> 00:06:16,990
唉，我们如果在同一个场地当中

143
00:06:16,990 --> 00:06:18,940
一个活动结束前

144
00:06:18,940 --> 00:06:20,600
另一个活动开始的话

145
00:06:20,600 --> 00:06:23,550
我们就说两个活动相互之间冲突了

146
00:06:23,550 --> 00:06:26,980
那如果说活动从一开始到五结束

147
00:06:26,980 --> 00:06:29,720
而 B 活动从五开始的话

148
00:06:29,720 --> 00:06:33,050
注意啊，这个焦点的时间，诶

149
00:06:33,050 --> 00:06:35,050
它并没有冲突

150
00:06:35,050 --> 00:06:38,710
那这这个描述我们在后面其实会用到

151
00:06:38,710 --> 00:06:42,850
现在我们要计算 N 个活动需要的最少场地数

152
00:06:42,850 --> 00:06:46,270
这些呢，是我们问题的背景

153
00:06:46,460 --> 00:06:48,300
下面告诉我

154
00:06:48,300 --> 00:06:51,520
求解该问题的基本思路如下

155
00:06:51,520 --> 00:06:54,690
假设需要场地数呢，为 M 

156
00:06:54,690 --> 00:06:56,570
活动数为 N 

157
00:06:56,570 --> 00:07:00,550
场地集合 P 1、 P 2，包括 pm 

158
00:07:00,550 --> 00:07:05,130
初始条件 pi 呢，都没有安排任何活动

159
00:07:05,130 --> 00:07:07,460
我们的场地都是空闲的

160
00:07:07,460 --> 00:07:09,960
那采用快速排序算法

161
00:07:09,960 --> 00:07:12,700
对 N 个活动的开始时间

162
00:07:12,700 --> 00:07:15,110
从小到大来进行排序

163
00:07:15,110 --> 00:07:18,710
那我们得到的活动 A 1、 A 2到 an 

164
00:07:18,710 --> 00:07:20,880
对每个活动来看

165
00:07:20,880 --> 00:07:26,250
I 从一到 N 会重复下面的二、三、四、三个步骤

166
00:07:26,250 --> 00:07:29,090
那从二开始，唉

167
00:07:29,090 --> 00:07:30,210
从 P 1开始

168
00:07:30,210 --> 00:07:35,310
尝试判断 AI 与 P 1的最后一个活动是否冲突

169
00:07:35,310 --> 00:07:38,720
如果冲突，我们就考虑下一个活动

170
00:07:38,720 --> 00:07:43,730
那一旦发现 AI 与某个 PJ 的活动并不冲突的话

171
00:07:43,730 --> 00:07:48,110
我们就可以呢，将 AI 安排到皮接当中去

172
00:07:48,110 --> 00:07:50,450
考虑下一个活动

173
00:07:50,510 --> 00:07:55,540
若 AI 啊与我们所有已经安排活动的拼接

174
00:07:55,540 --> 00:07:58,370
最后一个活动都产生冲突的话

175
00:07:58,370 --> 00:07:59,690
唉，大家都放不下

176
00:07:59,690 --> 00:08:02,100
我们就能打开一个新的场地

177
00:08:02,100 --> 00:08:05,600
开放一个新的场地给这个活动

178
00:08:05,600 --> 00:08:06,790
那我们呢

179
00:08:06,790 --> 00:08:10,550
唉，直到将所有的活动安排进去之后啊

180
00:08:10,550 --> 00:08:14,320
用 N 减去没有安排活动的场地

181
00:08:14,320 --> 00:08:17,210
得到的就是最少场地数

182
00:08:17,210 --> 00:08:22,020
那这就是呢，用自然语言来描述算法的过程

183
00:08:22,020 --> 00:08:24,370
如果是在下午题当中

184
00:08:24,370 --> 00:08:28,470
接下来就会给大家代码说明和 C 语言程序

185
00:08:28,470 --> 00:08:30,190
代码问题诶

186
00:08:30,190 --> 00:08:32,289
补充缺失的代码填空

187
00:08:32,289 --> 00:08:35,250
问题二，判断它的算法策略

188
00:08:35,250 --> 00:08:36,429
时间复杂度

189
00:08:36,429 --> 00:08:40,380
问题三，给大家一个实例来判断它的结果

190
00:08:40,380 --> 00:08:43,179
这就是常规的算法应用题

191
00:08:43,179 --> 00:08:45,440
而我们在这里改编之后啊

192
00:08:45,440 --> 00:08:47,260
这是一个历年真题啊

193
00:08:47,260 --> 00:08:51,440
他自己呢，将一个案例改成了这种活动，诶

194
00:08:51,440 --> 00:08:52,490
这种单选

195
00:08:52,490 --> 00:08:54,040
那我们的单选题

196
00:08:54,040 --> 00:08:58,040
同样也可以扩展成案例题来考察大家

197
00:08:58,040 --> 00:08:59,990
那我们看一下

198
00:08:59,990 --> 00:09:02,190
这里呢，问到的是算法

199
00:09:02,190 --> 00:09:04,250
首先采用了快速排序

200
00:09:04,250 --> 00:09:06,470
对活动时间进行排序吧

201
00:09:06,470 --> 00:09:09,150
那我们算法的策略是什么呢

202
00:09:09,150 --> 00:09:11,990
注意，这里问的齐是什么

203
00:09:11,990 --> 00:09:13,950
是快速排序算法

204
00:09:13,950 --> 00:09:17,670
它用到的是分制的算法策略

205
00:09:17,670 --> 00:09:22,710
那我们后面步骤采用的算法策略是什么呢

206
00:09:22,710 --> 00:09:24,430
我们后面的步骤啊

207
00:09:24,430 --> 00:09:28,850
是针对 AI 依次去尝试到 P 阶

208
00:09:28,850 --> 00:09:31,950
直到呢，哎，有一个能放下它的 P 接

209
00:09:31,950 --> 00:09:33,520
我们就把它放进去吧

210
00:09:33,520 --> 00:09:35,440
那这个其实也是呢

211
00:09:35,440 --> 00:09:37,060
属于放置的问题

212
00:09:37,060 --> 00:09:41,000
也可以理解为我们多机调度的问题

213
00:09:41,000 --> 00:09:45,250
那我们在这里有没有考虑全局的情况啊

214
00:09:45,250 --> 00:09:47,320
其实没有看到递归式

215
00:09:47,320 --> 00:09:50,980
就知道这里采用的不会是动态规划法了

216
00:09:50,980 --> 00:09:53,580
没有看到按二分的过程

217
00:09:53,580 --> 00:09:56,860
它所采用的也没有呢分制的过程

218
00:09:56,860 --> 00:09:59,490
那没有尝试和回退

219
00:09:59,490 --> 00:10:01,670
它只会往前推进

220
00:10:01,670 --> 00:10:04,700
所以也没有用到回溯的过程

221
00:10:04,700 --> 00:10:08,810
这里使用的算法策略呢，是贪心

222
00:10:09,060 --> 00:10:12,300
那在使用贪心的过程当中啊

223
00:10:12,300 --> 00:10:14,440
我们给了大家两个变量

224
00:10:14,440 --> 00:10:15,940
一个是 AI 

225
00:10:15,940 --> 00:10:17,660
一个是 P 阶

226
00:10:17,660 --> 00:10:21,590
大家会相互进行便利尝试吧

227
00:10:21,590 --> 00:10:26,550
所以最终它应该是个双层嵌套循环的过程

228
00:10:26,550 --> 00:10:31,170
它的时间复杂度应该是大 O 级的 N 平方

229
00:10:31,170 --> 00:10:32,900
作为它的时间复杂度

230
00:10:32,900 --> 00:10:35,510
那我们目前在考试当中啊

231
00:10:35,510 --> 00:10:38,220
对于这样的一些标识

232
00:10:38,220 --> 00:10:42,010
都把它呢理解为大 O 就可以了

233
00:10:42,010 --> 00:10:44,530
那根据上述算法，哎

234
00:10:44,530 --> 00:10:46,130
又给了一个实例

235
00:10:46,130 --> 00:10:47,650
我们给了一个呢

236
00:10:47,650 --> 00:10:50,280
N 等于11的活动集合

237
00:10:50,280 --> 00:10:55,510
结合上述算法判断他需要的最少场地数

238
00:10:55,510 --> 00:10:58,360
那我们在考试的过程当中

239
00:10:58,360 --> 00:11:01,440
也可以结合实例的推导过程

240
00:11:01,440 --> 00:11:04,910
来判断它的时间复杂度和算法策略

241
00:11:04,910 --> 00:11:08,400
那首先我们要放置活动一吧

242
00:11:08,400 --> 00:11:11,650
它的开始结束时间是0~6

243
00:11:11,650 --> 00:11:14,170
我们当前没有任何场地

244
00:11:14,170 --> 00:11:16,280
所以要打开一个场地

245
00:11:16,280 --> 00:11:18,780
把 A 1呢放进去

246
00:11:18,940 --> 00:11:21,410
接下来活动 A 2

247
00:11:21,410 --> 00:11:23,500
它是从一开始的

248
00:11:23,500 --> 00:11:26,780
那我们尝试 P 1能不能放进去

249
00:11:26,780 --> 00:11:29,620
P 1最后到六才结束它

250
00:11:29,620 --> 00:11:31,260
所以它放不进去

251
00:11:31,260 --> 00:11:35,100
那我们呢，冲突之后要打开第二个场地

252
00:11:35,100 --> 00:11:37,430
将 A 2放置进去

253
00:11:37,430 --> 00:11:39,560
那 A 2放进去之后

254
00:11:39,560 --> 00:11:43,500
这里的最后活动的结束时间是六

255
00:11:43,500 --> 00:11:46,270
这里的结束时间是四

256
00:11:46,270 --> 00:11:48,160
接下来活动三

257
00:11:48,160 --> 00:11:51,140
它是从2~14结束吧

258
00:11:51,140 --> 00:11:53,200
那从二开始，哎

259
00:11:53,200 --> 00:11:56,060
尝试从 P 1试探能不能放

260
00:11:56,060 --> 00:11:58,500
不能尝试下一个四能不能放

261
00:11:58,500 --> 00:11:59,980
不能，唉，放不下

262
00:11:59,980 --> 00:12:02,470
我们呢，再重新打开一个场地

263
00:12:02,470 --> 00:12:03,400
那我们呢

264
00:12:03,400 --> 00:12:04,860
放置活动三

265
00:12:04,860 --> 00:12:07,620
从2~13结束

266
00:12:07,620 --> 00:12:09,470
接下来活动四

267
00:12:09,470 --> 00:12:12,270
从三开始到五结束

268
00:12:12,270 --> 00:12:14,410
P 1要到六才结束吧

269
00:12:14,410 --> 00:12:15,560
P 2到四

270
00:12:15,560 --> 00:12:17,340
P 3要到13

271
00:12:17,340 --> 00:12:18,980
所以仍然放不下

272
00:12:18,980 --> 00:12:21,720
我们仍然需要打开一个新的场地

273
00:12:21,720 --> 00:12:22,950
放活动四

274
00:12:22,950 --> 00:12:24,850
那到五结束

275
00:12:24,850 --> 00:12:28,690
活动五从三开始到八结束

276
00:12:28,690 --> 00:12:32,510
那我们所有的活动都没有在三结束的吧

277
00:12:32,510 --> 00:12:34,790
所以重新打开一个场地

278
00:12:34,790 --> 00:12:36,470
放置 A 5活动

279
00:12:36,470 --> 00:12:39,430
它的持续时间是3~

280
00:12:39,430 --> 00:12:41,100
结束时间是八

281
00:12:41,100 --> 00:12:43,900
那接下来6号活动，诶

282
00:12:43,900 --> 00:12:46,440
从五开始到七结束

283
00:12:46,440 --> 00:12:49,230
那我们 P 1能不能放六

284
00:12:49,230 --> 00:12:51,790
它在五的时候还没有结束

285
00:12:51,790 --> 00:12:54,020
四的话刚好可以放吧

286
00:12:54,020 --> 00:12:55,320
四结束之后

287
00:12:55,320 --> 00:12:56,720
我们稍微休息一会儿

288
00:12:56,720 --> 00:12:59,520
然后就开始了6号活动

289
00:12:59,520 --> 00:13:02,760
那6号活动放置 P 2之后啊

290
00:13:02,760 --> 00:13:05,160
他这里的最迟，哎

291
00:13:05,160 --> 00:13:08,410
最后一个任务的完成时间就变成了七

292
00:13:08,410 --> 00:13:09,380
注意啊

293
00:13:09,380 --> 00:13:13,320
我们在放置 A 6的时候有没有全局考虑

294
00:13:13,320 --> 00:13:14,220
没有吧

295
00:13:14,220 --> 00:13:16,820
只考虑当前能放得下

296
00:13:16,820 --> 00:13:18,520
我们就塞进去了

297
00:13:18,520 --> 00:13:21,190
这就是贪心它的过程

298
00:13:21,190 --> 00:13:26,160
接下来活动 A 7从五开始到九结束

299
00:13:26,160 --> 00:13:29,340
那我们现在 P 1到六结束

300
00:13:29,340 --> 00:13:31,100
P 2到七结束了

301
00:13:31,100 --> 00:13:33,660
注意 P 2已经发生了变化

302
00:13:33,660 --> 00:13:35,610
P 3到13结束

303
00:13:35,610 --> 00:13:37,570
P 4到五结束

304
00:13:37,570 --> 00:13:40,230
注意，相等的情况下

305
00:13:40,230 --> 00:13:45,550
开始和结束时间相等是不会产生冲突的

306
00:13:45,550 --> 00:13:48,390
这是题目明确告诉大家了

307
00:13:48,390 --> 00:13:50,750
所以 A 5放到，唉

308
00:13:50,750 --> 00:13:53,550
我们的 A 7放到 P 4之后

309
00:13:53,550 --> 00:13:55,620
仍然是可以执行的

310
00:13:55,620 --> 00:13:58,280
所以它会呀放在 P 4里面

311
00:13:58,280 --> 00:14:01,240
那 P 4的结束时间就不再是五

312
00:14:01,240 --> 00:14:02,760
而是九了

313
00:14:02,760 --> 00:14:06,850
接下来8号活动从六开始

314
00:14:06,850 --> 00:14:09,310
那我们从 P 1开始试试看

315
00:14:09,310 --> 00:14:12,370
刚好能够放置8号活动

316
00:14:12,370 --> 00:14:16,160
那它的结束时间从六变成了十

317
00:14:16,160 --> 00:14:19,910
再来看9号活动从八开始

318
00:14:19,910 --> 00:14:23,120
那 P 1到十才结束，不行

319
00:14:23,120 --> 00:14:24,760
放 P 2里面

320
00:14:24,760 --> 00:14:28,110
从八开始到11结束

321
00:14:28,110 --> 00:14:30,430
结束时间不再是七了

322
00:14:30,430 --> 00:14:32,230
变成了11

323
00:14:32,230 --> 00:14:35,080
10号活动从八开始

324
00:14:35,080 --> 00:14:37,000
P 1不行， P 2不行

325
00:14:37,000 --> 00:14:37,900
P 3不行

326
00:14:37,900 --> 00:14:39,560
P 4也不可以

327
00:14:39,560 --> 00:14:42,750
只有 P 5的时间才可以放置

328
00:14:42,750 --> 00:14:44,180
那放了之后

329
00:14:44,180 --> 00:14:46,940
P 5的结束时间到了12

330
00:14:46,940 --> 00:14:52,220
那接下来11号活动从12开始

331
00:14:52,220 --> 00:14:53,840
P 1行不行啊

332
00:14:53,840 --> 00:14:56,660
他到时结束之后就空闲了

333
00:14:56,660 --> 00:15:00,710
可以呢，把 A 11的活动放进去

334
00:15:00,790 --> 00:15:04,560
那么这11个活动全部放完了

335
00:15:04,560 --> 00:15:09,080
放完之后我们会发现一共用了多少个场地呢

336
00:15:09,080 --> 00:15:12,580
哎，这里用到的是五个场地

337
00:15:12,580 --> 00:15:15,390
那我们在这里分析的过程当中

338
00:15:15,390 --> 00:15:17,210
并没有考虑全局

339
00:15:17,210 --> 00:15:20,600
用到的就是呢贪心的算法策略

340
00:15:20,600 --> 00:15:23,140
我们在尝试匹配的时候

341
00:15:23,140 --> 00:15:24,690
AI 和 P 

342
00:15:24,690 --> 00:15:28,810
首先从 AI 依次试探所有的拼接

343
00:15:28,810 --> 00:15:33,650
然后呢，唉，又头从下一个 AI 开始试探

344
00:15:33,650 --> 00:15:36,060
所以它的重复过程啊

345
00:15:36,060 --> 00:15:38,640
会有双层的嵌套循环

346
00:15:38,640 --> 00:15:42,380
时间复杂度呢，是大 OG 的 N 平方

347
00:15:42,380 --> 00:15:45,760
那如果这是下午题出现的部分的话

348
00:15:45,760 --> 00:15:49,020
这里涉及到的分值基本上呢

349
00:15:49,020 --> 00:15:50,980
是在七分左右啊

350
00:15:50,980 --> 00:15:52,980
那在我们上五题当中

351
00:15:52,980 --> 00:15:55,040
只有呢四分的分值

352
00:15:55,040 --> 00:15:58,900
这也是属于呢我们常规的一种考察题型

353
00:15:58,900 --> 00:16:02,920
给大家相应的问题背景和算法来描述

354
00:16:02,920 --> 00:16:06,400
让大家判断算法策略、时间、复杂

355
00:16:06,400 --> 00:16:09,750
以及呢实例的运行结果

356
00:16:09,750 --> 00:16:12,870
那这些呢就是要求大家掌握的

357
00:16:12,870 --> 00:16:15,730
关于贪心法相关的内容
