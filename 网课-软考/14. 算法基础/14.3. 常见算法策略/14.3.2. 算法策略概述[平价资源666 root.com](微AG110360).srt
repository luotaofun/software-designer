1
00:00:00,000 --> 00:00:03,280
我们首先呢，来看一看算法策略啊

2
00:00:03,280 --> 00:00:04,860
它的大致情况

3
00:00:04,860 --> 00:00:07,320
我们在软件设计师考试当中

4
00:00:07,320 --> 00:00:10,090
涉及到的算法策略只有四类

5
00:00:10,090 --> 00:00:13,270
分治法、动态规划法、贪心

6
00:00:13,270 --> 00:00:15,050
以及呢，回溯法

7
00:00:15,050 --> 00:00:18,290
那这其中各种算法有什么特点呢

8
00:00:18,290 --> 00:00:19,780
首先，分治法的话

9
00:00:19,780 --> 00:00:21,060
它会把一个问题

10
00:00:21,060 --> 00:00:24,320
拆分成多个小规模的子问题

11
00:00:24,320 --> 00:00:26,560
这个子问题啊，除了规模

12
00:00:26,560 --> 00:00:28,500
其他的都是相同的

13
00:00:28,500 --> 00:00:32,060
所以它一般呢，可以用递归来同时解决呢

14
00:00:32,060 --> 00:00:32,900
这些问题

15
00:00:32,900 --> 00:00:35,620
最终呢，把问题的答案汇总起来

16
00:00:35,620 --> 00:00:37,640
作为呢，我们最终的解

17
00:00:37,640 --> 00:00:39,490
那这是呢，分治法

18
00:00:39,490 --> 00:00:41,940
分治法在我们考试当中

19
00:00:41,940 --> 00:00:44,440
主要涉及的是二分的思想

20
00:00:44,440 --> 00:00:48,160
以及呢，归并排序和快速排序的实现

21
00:00:48,160 --> 00:00:50,880
其他算法目前没有考察

22
00:00:50,880 --> 00:00:54,030
考察过分治法它的实践过程

23
00:00:54,030 --> 00:00:55,570
贪心法呢

24
00:00:55,570 --> 00:00:58,270
哎，它一般是用于求满意解的

25
00:00:58,270 --> 00:01:01,360
他所考虑的是当前最优

26
00:01:01,360 --> 00:01:02,830
什么是贪心啊

27
00:01:02,830 --> 00:01:04,190
我们经常说呢

28
00:01:04,190 --> 00:01:05,470
人啊不能贪心

29
00:01:05,470 --> 00:01:07,070
贪心不足蛇吞象嘛

30
00:01:07,070 --> 00:01:09,310
就是说呢，所谓的贪心法

31
00:01:09,310 --> 00:01:12,060
他是呢，眼界非常狭隘的

32
00:01:12,060 --> 00:01:14,420
没有全局的去看问题

33
00:01:14,420 --> 00:01:17,090
只是局限在眼前这一步

34
00:01:17,090 --> 00:01:19,710
所以整体不见得最优啊

35
00:01:19,710 --> 00:01:22,610
每一步呢，会考虑当前最优

36
00:01:22,610 --> 00:01:24,450
有既定的策略

37
00:01:24,450 --> 00:01:26,540
一般呢，有经典的问题

38
00:01:26,540 --> 00:01:29,280
包括呢像背包问题经常出现

39
00:01:29,280 --> 00:01:33,130
还有呢多机调度问题和找零钱的问题

40
00:01:33,130 --> 00:01:34,570
具体的这些问题呢

41
00:01:34,570 --> 00:01:37,470
我们在后面也会呢加以说明

42
00:01:38,800 --> 00:01:40,480
动态规划法

43
00:01:40,480 --> 00:01:43,360
它呢，主要是用于求最优解

44
00:01:43,360 --> 00:01:45,750
并且是明确求最优解的啊

45
00:01:45,750 --> 00:01:47,330
他的描述当中啊

46
00:01:47,330 --> 00:01:50,330
一般会说呢，这个问题具有最优子结构

47
00:01:50,330 --> 00:01:52,590
然后呢，会给大家一个递归式

48
00:01:52,590 --> 00:01:55,840
让大家呢通过递归式来解决问题

49
00:01:55,840 --> 00:01:58,250
它也有划分子问题的过程

50
00:01:58,250 --> 00:02:01,880
动态规划法呢，也有划分子问题的过程

51
00:02:01,880 --> 00:02:03,400
那这个划分的过程

52
00:02:03,400 --> 00:02:06,000
跟分治法其实是非常相似的

53
00:02:06,000 --> 00:02:07,500
分治法的划分啊

54
00:02:07,500 --> 00:02:08,639
它只管分

55
00:02:08,639 --> 00:02:11,620
并没有呢做详细的这种求解过程

56
00:02:11,620 --> 00:02:14,650
他的求解有时候时间量级非常大

57
00:02:14,650 --> 00:02:19,060
而动态规划法就避免去求重复的子问题

58
00:02:19,060 --> 00:02:20,740
会将子问题的解呢

59
00:02:20,740 --> 00:02:23,440
用表格或者说用数组存起来

60
00:02:23,440 --> 00:02:24,720
通过查表

61
00:02:24,720 --> 00:02:27,340
然后呢构造最终问题的解

62
00:02:27,340 --> 00:02:30,090
从而呢，提高了时间效率

63
00:02:30,090 --> 00:02:32,710
而我们在这里一般呢

64
00:02:32,710 --> 00:02:35,630
与分治法的区别在于呢

65
00:02:35,630 --> 00:02:39,070
软软件设计师考试涉及到的分制啊

66
00:02:39,070 --> 00:02:40,710
都是二分的思想

67
00:02:40,710 --> 00:02:42,660
而涉及到不知道多少分

68
00:02:42,660 --> 00:02:46,130
这种情况呢，一般是动态规划法居多

69
00:02:46,130 --> 00:02:49,880
并且动态规划法会给出一个递归式

70
00:02:49,880 --> 00:02:52,250
让大家呢来进行分析

71
00:02:52,250 --> 00:02:53,170
然后呢

72
00:02:53,170 --> 00:02:56,780
递归式的目标是对一个数组来进行填表

73
00:02:56,780 --> 00:02:58,180
所以这种情况呢

74
00:02:58,180 --> 00:03:00,800
动态规划法还是比较好识别的

75
00:03:00,800 --> 00:03:05,060
其次呢，诶，动态规划法出现的最优子结构啊

76
00:03:05,060 --> 00:03:07,460
这种说法在贪心法当中呢

77
00:03:07,460 --> 00:03:09,510
其实也曾经出现过

78
00:03:09,510 --> 00:03:12,040
贪心法在具有最优子结构

79
00:03:12,040 --> 00:03:14,260
并且有贪心性质的问题当中

80
00:03:14,260 --> 00:03:16,040
是可以得到最优解的

81
00:03:16,040 --> 00:03:17,480
那这是一个特殊点

82
00:03:17,480 --> 00:03:19,660
大家记住呢，就可以了

83
00:03:19,660 --> 00:03:21,490
我们在利用啊

84
00:03:21,490 --> 00:03:24,270
动态规划法解决问题的时候

85
00:03:24,270 --> 00:03:27,630
一般是针对递归式来进行填表

86
00:03:27,630 --> 00:03:33,160
那填表如果是从 N 到 N 减一

87
00:03:33,160 --> 00:03:35,260
再到，唉， N 减二

88
00:03:35,260 --> 00:03:37,880
直到呢二一这种

89
00:03:37,880 --> 00:03:39,940
唉，我们的规模变化的话

90
00:03:39,940 --> 00:03:42,780
这种形式我们一般认为呢

91
00:03:42,780 --> 00:03:44,800
规模自上向

92
00:03:44,800 --> 00:03:47,740
是一种呢，自顶向下的分析过程

93
00:03:47,740 --> 00:03:50,690
那由于刚开始就求 N 

94
00:03:50,690 --> 00:03:53,070
显然子问题没有解出来吧

95
00:03:53,070 --> 00:03:55,540
所以无法查表得到结果

96
00:03:55,540 --> 00:03:58,760
那这种它的时间复杂度会非常大

97
00:03:58,760 --> 00:04:02,580
能够达到呢，大 O 级的二的 N 次方

98
00:04:02,580 --> 00:04:05,520
自底向上的分析方式呢

99
00:04:05,520 --> 00:04:08,520
哎，它的递归实现是通过一、二、三

100
00:04:08,520 --> 00:04:11,290
然后呢到 N 这种形式

101
00:04:11,290 --> 00:04:14,420
那每一步的结果记录下来之后

102
00:04:14,420 --> 00:04:16,519
下一步可以查表

103
00:04:16,519 --> 00:04:18,470
从而解决问题

104
00:04:18,470 --> 00:04:20,380
所以它的时间复杂度啊

105
00:04:20,380 --> 00:04:22,220
相对来说比较有优势

106
00:04:22,220 --> 00:04:25,010
一般呢，是利用循环来解决

107
00:04:25,010 --> 00:04:27,600
通过循环的嵌套层次数

108
00:04:27,600 --> 00:04:30,060
来判断它的时间复杂度

109
00:04:30,060 --> 00:04:31,660
这是动态规划法

110
00:04:31,660 --> 00:04:33,490
它特殊的地方

111
00:04:33,490 --> 00:04:36,580
典型的动态规划法解决问题呢

112
00:04:36,580 --> 00:04:39,100
包括矩阵乘法、背包问题

113
00:04:39,100 --> 00:04:42,310
还有呢，最长公共子序列的问题

114
00:04:42,310 --> 00:04:45,130
斐波拉契数列呢，可以用分治法

115
00:04:45,130 --> 00:04:49,170
也可以用动态规划法来解决背包问题

116
00:04:49,170 --> 00:04:52,130
它可以用任意的方法来解决啊

117
00:04:52,130 --> 00:04:54,150
我们一般看到的背包问题

118
00:04:54,150 --> 00:04:55,930
可以通过贪心法

119
00:04:55,930 --> 00:05:00,680
动态规划法以及呢回溯法来解决问题

120
00:05:00,680 --> 00:05:02,740
最后回溯法

121
00:05:02,870 --> 00:05:05,750
回溯法的特点呢比较明确

122
00:05:05,750 --> 00:05:10,310
它会呢去搜索系统的整个解空间

123
00:05:10,310 --> 00:05:14,240
可以得到问题的所有解或者任意解

124
00:05:14,240 --> 00:05:16,280
这个解到底是不是满意解

125
00:05:16,280 --> 00:05:18,130
我们可以尝试去判断

126
00:05:18,130 --> 00:05:19,680
那这种情况下呢

127
00:05:19,680 --> 00:05:22,220
一般拿来解决 N 皇后问题

128
00:05:22,220 --> 00:05:25,240
以及呢背包问题都是呢，可以的

129
00:05:25,240 --> 00:05:27,780
还有典型的迷宫问题

130
00:05:27,780 --> 00:05:31,560
那我们在这里提到的关于

131
00:05:32,330 --> 00:05:34,610
归并排序、快速排序

132
00:05:34,610 --> 00:05:35,850
还有二分搜索

133
00:05:35,850 --> 00:05:38,990
都是我们讲到的排序和查找算法

134
00:05:38,990 --> 00:05:41,060
矩阵乘法问题

135
00:05:41,060 --> 00:05:45,670
它是呢，为了解决多个矩阵相乘的时候

136
00:05:45,670 --> 00:05:47,120
那其中，诶

137
00:05:47,120 --> 00:05:51,220
由于它可以满足这种合并规则

138
00:05:51,220 --> 00:05:54,540
所以呢，唉，不同的这种方式啊

139
00:05:54,540 --> 00:05:56,040
最终不影响结果

140
00:05:56,040 --> 00:05:59,540
但是呢，会得到不同的乘法次数

141
00:05:59,540 --> 00:06:02,000
所以限定了乘法的规模

142
00:06:02,000 --> 00:06:04,910
那选择不同的计算顺

143
00:06:04,910 --> 00:06:07,170
可以呢，得到最优的

144
00:06:07,170 --> 00:06:09,970
这种呢，计算次数最少的情况

145
00:06:09,970 --> 00:06:12,020
它的性能呢，是最高的

146
00:06:12,020 --> 00:06:15,230
所以我们一般考虑矩阵乘法的时候

147
00:06:15,230 --> 00:06:18,040
它可以把问题划分来判断

148
00:06:18,040 --> 00:06:22,280
也可以通过呢，动态规划法来求最优解

149
00:06:22,760 --> 00:06:24,420
背包问题呢

150
00:06:24,420 --> 00:06:27,460
它指的是把物品啊，往背包里面放

151
00:06:27,460 --> 00:06:32,770
那这个放的过程当中会存在零一背包问题

152
00:06:32,770 --> 00:06:35,590
也就是说这个背包里面啊

153
00:06:35,590 --> 00:06:37,850
这个物品要么放进去

154
00:06:37,850 --> 00:06:40,380
要么拿出来不能够切割

155
00:06:40,380 --> 00:06:42,100
要么在，要么不在

156
00:06:42,100 --> 00:06:45,350
还有一种呢，叫做部分背包问题

157
00:06:45,350 --> 00:06:47,120
部分背包问题呢

158
00:06:47,120 --> 00:06:49,580
哎，就是给大家的这个物品啊

159
00:06:49,580 --> 00:06:52,060
放不下我可以拆开来放

160
00:06:52,060 --> 00:06:54,710
那这种情况不分背包啊

161
00:06:54,710 --> 00:06:58,940
在我们的贪心法当中也能够得到最优解

162
00:06:58,940 --> 00:07:01,790
有这么一个呢，特殊点了解一下

163
00:07:01,790 --> 00:07:04,480
那我们的 N 皇后问题呢

164
00:07:04,480 --> 00:07:09,340
哎，是给大家一个 N 乘以 N 的这个格子

165
00:07:09,340 --> 00:07:11,300
然后让大家呢，放皇后

166
00:07:11,300 --> 00:07:12,830
国际象棋当中啊

167
00:07:12,830 --> 00:07:15,360
我们的皇后是不能同行

168
00:07:15,360 --> 00:07:16,690
不能同列

169
00:07:16,690 --> 00:07:19,030
然后呢，不能成对角线的

170
00:07:19,030 --> 00:07:22,460
所以它的放置位置啊，是有局限性的

171
00:07:22,460 --> 00:07:25,840
放置方案只有少量是符合要求的

172
00:07:25,840 --> 00:07:29,920
我们需要呢，不停的去探索位置能不能放

173
00:07:29,920 --> 00:07:32,460
然后呢，最终才决定

174
00:07:32,460 --> 00:07:34,680
如果不能晃、不能放

175
00:07:34,680 --> 00:07:37,550
就回退到上一排来进行处理

176
00:07:37,550 --> 00:07:40,800
所以这种情况的话，有探索和回

177
00:07:40,800 --> 00:07:41,800
就叫做呢

178
00:07:41,800 --> 00:07:46,550
唉，我们的 N 皇后用回溯法来解决的过程

179
00:07:46,550 --> 00:07:50,260
我们的 LCS 最长公共子序列呢

180
00:07:50,260 --> 00:07:53,650
是我们在串的数据结构当中有提到

181
00:07:53,650 --> 00:07:57,880
公共子序列的判断是某一个序列既是 X 的

182
00:07:57,880 --> 00:07:58,840
也是 Y 的

183
00:07:58,840 --> 00:08:00,120
那这种情况下

184
00:08:00,120 --> 00:08:01,560
长度最大的就是呢

185
00:08:01,560 --> 00:08:03,370
最长公共子序列

186
00:08:03,370 --> 00:08:06,650
那这些问题呢，简单给大家提一下

187
00:08:06,650 --> 00:08:08,570
回头呢，看到题目的时候

188
00:08:08,570 --> 00:08:10,710
要知道他说的是什么

189
00:08:10,710 --> 00:08:11,350
呃

190
00:08:11,350 --> 00:08:12,970
多机调度问题呢

191
00:08:12,970 --> 00:08:15,710
是涉及到处理机来调度任务

192
00:08:15,710 --> 00:08:17,860
任务分配的解决方案

193
00:08:17,860 --> 00:08:20,620
找零钱呢，是我们买东西的时

194
00:08:20,620 --> 00:08:22,540
找钱的一些解决方案

195
00:08:22,540 --> 00:08:26,000
下面我们来看一下这四种算法的对比

196
00:08:26,000 --> 00:08:27,070
首先的话

197
00:08:27,070 --> 00:08:30,870
我们分治法、贪心法、动态规划法和回溯法

198
00:08:30,870 --> 00:08:32,789
他们有一些呢，关键点

199
00:08:32,789 --> 00:08:35,990
分治法和贪心法呀，都有可能

200
00:08:35,990 --> 00:08:39,400
分治法和动态规划法都有可能用到递归啊

201
00:08:39,400 --> 00:08:41,299
分治法用递归计数

202
00:08:41,299 --> 00:08:43,720
而动态规划法它有递归式

203
00:08:43,720 --> 00:08:46,440
还有呢，最优子结构还会有呢

204
00:08:46,440 --> 00:08:50,710
中间数组、中间解数组

205
00:08:53,160 --> 00:08:55,480
这是它的呢区分点

206
00:08:55,480 --> 00:08:58,350
而贪心法和回溯回溯法

207
00:08:58,350 --> 00:09:01,250
回溯法它有呢探索和回退的过程

208
00:09:01,250 --> 00:09:03,140
比较容易呢去识别

209
00:09:03,140 --> 00:09:05,950
贪心法一般呢，求的是满意解

210
00:09:05,950 --> 00:09:09,190
特殊情况下可以求呢，唉，最优解

211
00:09:09,190 --> 00:09:11,170
比如说部分背包问题

212
00:09:11,170 --> 00:09:12,480
它们的特征

213
00:09:12,480 --> 00:09:13,560
简单来看呢

214
00:09:13,560 --> 00:09:15,160
分治法有划分

215
00:09:15,160 --> 00:09:19,500
然后呢解决子问题和合并解决的过程

216
00:09:19,500 --> 00:09:22,430
贪心法呢，有局部最优的特点

217
00:09:22,430 --> 00:09:25,130
然后呢，会考虑当前最优

218
00:09:25,130 --> 00:09:28,930
那你判断的时候就有一个当前既定的策略

219
00:09:28,930 --> 00:09:30,450
动态规划法

220
00:09:30,450 --> 00:09:32,030
它有划分子问题

221
00:09:32,030 --> 00:09:33,970
或者叫做呢最优子结构

222
00:09:33,970 --> 00:09:37,120
然后会将结果用数组来存储

223
00:09:37,120 --> 00:09:39,060
最终呢，通过查询

224
00:09:39,060 --> 00:09:42,570
从而呢解决最终的这个整个问题

225
00:09:42,570 --> 00:09:45,250
回溯法呢，会探索所有解

226
00:09:45,250 --> 00:09:46,630
或者呢任意解

227
00:09:46,630 --> 00:09:49,650
有探、试探和回退的过程

228
00:09:49,650 --> 00:09:51,660
典型的问题当中呢

229
00:09:51,660 --> 00:09:55,600
我们刚刚其实也给大家介绍到了这几种问题

230
00:09:55,600 --> 00:09:58,390
只是呢，把前面的内容放在一个表格

231
00:09:58,390 --> 00:10:00,800
给大家呢，做了一个汇总

232
00:10:00,800 --> 00:10:04,260
那我们对比一下相应的算法策略

233
00:10:04,260 --> 00:10:05,740
应该如何来判断呢

234
00:10:05,740 --> 00:10:08,840
这个在上午题和下午题都有出现

235
00:10:08,840 --> 00:10:12,690
他的判断一般是给大家一定的情景描述

236
00:10:12,690 --> 00:10:15,250
让大家判断使用的算法策略

237
00:10:15,250 --> 00:10:17,970
那首先回溯法大家比较熟悉

238
00:10:17,970 --> 00:10:19,250
容易的去判断

239
00:10:19,250 --> 00:10:22,280
有探索和回退的是部分

240
00:10:22,280 --> 00:10:24,630
所以比较好识别

241
00:10:24,630 --> 00:10:26,370
其次呢，分治法

242
00:10:26,370 --> 00:10:28,390
分治法与动态规划法

243
00:10:28,390 --> 00:10:30,880
是很多同学容易混淆的地方

244
00:10:30,880 --> 00:10:34,130
那我们一般说分式法不好解决问题

245
00:10:34,130 --> 00:10:37,540
因为呢，有一些重复的子问题很浪费时间

246
00:10:37,540 --> 00:10:38,680
那我们呢

247
00:10:38,680 --> 00:10:42,830
如果说把这个重复子问题的解记录下来

248
00:10:42,830 --> 00:10:45,400
就可以呢，优化解决过程吧

249
00:10:45,400 --> 00:10:48,540
所以这个时候就有了动态规划法

250
00:10:48,720 --> 00:10:51,440
目前在软设考试当中啊

251
00:10:51,440 --> 00:10:54,470
我们的分治法只有二分的思想

252
00:10:54,470 --> 00:10:57,400
包括二分查找、归并、快速排序

253
00:10:57,400 --> 00:11:00,000
都是呢，二分它的一个应用

254
00:11:00,000 --> 00:11:02,930
而我们二分以外的问题

255
00:11:02,930 --> 00:11:06,280
基本上都会用动态规划法来解决了

256
00:11:06,280 --> 00:11:08,770
那二分它的时间复杂

257
00:11:08,770 --> 00:11:12,240
一般会与呢， N 倍的 log 2 N 相关

258
00:11:12,240 --> 00:11:15,890
注意呢，如果有外层嵌套循环的时候

259
00:11:15,890 --> 00:11:18,330
时间复杂度是不一样的啊

260
00:11:18,330 --> 00:11:21,140
那我们像归并排序、快速排序

261
00:11:21,140 --> 00:11:23,880
它们的时间复杂度一般呢，是 N 倍

262
00:11:23,880 --> 00:11:27,130
log 2 N 的动态规划法的话

263
00:11:27,130 --> 00:11:28,360
它的特点呢

264
00:11:28,360 --> 00:11:30,290
首先与分治法的区别

265
00:11:30,290 --> 00:11:33,190
它是由我们的数组来解决的

266
00:11:33,190 --> 00:11:35,130
然后呢，有递归式

267
00:11:35,130 --> 00:11:37,780
经常会出现递归式的考察

268
00:11:37,780 --> 00:11:40,440
无论是，呃，上午题还是下午题

269
00:11:40,440 --> 00:11:42,320
都有可能看到递归式啊

270
00:11:42,320 --> 00:11:45,590
那如果它是自底向上来实现的话

271
00:11:45,590 --> 00:11:48,520
唉，时间复杂度基本上能中间解

272
00:11:48,520 --> 00:11:50,420
就用查表就能得到了

273
00:11:50,420 --> 00:11:52,240
时间复杂度比较有优

274
00:11:52,240 --> 00:11:53,820
就是 N 的 K 次方

275
00:11:53,820 --> 00:11:56,540
通过循环的嵌套层

276
00:11:56,540 --> 00:11:58,400
或者说变量的个数

277
00:11:58,400 --> 00:12:01,100
可以来判断嵌套层数啊

278
00:12:01,100 --> 00:12:03,440
那我们在这里啊

279
00:12:03,440 --> 00:12:06,490
如如果说是自顶向下的话

280
00:12:06,490 --> 00:12:09,850
这种情况其实跟分治法是差不多的

281
00:12:09,850 --> 00:12:12,590
只是我们在这里不把它叫做分制了

282
00:12:12,590 --> 00:12:14,270
那我们在这里呢

283
00:12:14,270 --> 00:12:15,690
时间复杂度啊

284
00:12:15,690 --> 00:12:18,330
能够达到二的 N 次方之多

285
00:12:18,330 --> 00:12:21,140
如果外层有嵌套循环的话

286
00:12:21,140 --> 00:12:24,380
还有可能是 N 倍的二的 N 次方

287
00:12:24,380 --> 00:12:27,470
这里呢，注意一下它的这种特点

288
00:12:27,470 --> 00:12:28,600
一般来说

289
00:12:28,600 --> 00:12:31,640
动态规划法会涉及递归式

290
00:12:31,720 --> 00:12:33,220
这个递归式啊

291
00:12:33,220 --> 00:12:35,700
在我们下午的算法填空题当中

292
00:12:35,700 --> 00:12:38,220
还经常让大家呢去应用填空

293
00:12:38,220 --> 00:12:40,160
所以呢，是很重要的

294
00:12:40,160 --> 00:12:43,260
然后呢，它会有最优子结构的描述

295
00:12:43,260 --> 00:12:46,160
会有呢，数组来记录中间节

296
00:12:46,160 --> 00:12:47,750
最后贪心法

297
00:12:47,750 --> 00:12:51,330
贪心法呢，有时候也会有最优子结构的描述

298
00:12:51,330 --> 00:12:53,550
但是它没有中间数组来记录

299
00:12:53,550 --> 00:12:55,050
没有递归式

300
00:12:55,050 --> 00:12:58,850
所以说我们看是贪心法还是动态规划法

301
00:12:58,850 --> 00:12:59,810
没有递归式

302
00:12:59,810 --> 00:13:01,880
它不可能是动态规划法啊

303
00:13:01,880 --> 00:13:04,060
所以一般呢，就是贪心法了

304
00:13:04,060 --> 00:13:08,580
这两者呢，通过递归式完全可以呢去进行区分

305
00:13:08,580 --> 00:13:10,590
然后像特殊情况下

306
00:13:10,590 --> 00:13:13,660
贪心法有时候能够呢得到最优解

307
00:13:13,660 --> 00:13:16,160
这里呢，只有特殊情况才可以

308
00:13:16,160 --> 00:13:20,180
那这是我们提到的常见的四种算法策略

309
00:13:20,180 --> 00:13:22,540
要能够呢做到区分

310
00:13:22,540 --> 00:13:26,780
后面呢，我们再展开来看一下各种算法策略

311
00:13:26,780 --> 00:13:27,900
它的具体内容
